
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Permissions` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Permissions
 * 
 */
export type PermissionsModel = runtime.Types.Result.DefaultSelection<Prisma.$PermissionsPayload>

export type AggregatePermissions = {
  _count: PermissionsCountAggregateOutputType | null
  _avg: PermissionsAvgAggregateOutputType | null
  _sum: PermissionsSumAggregateOutputType | null
  _min: PermissionsMinAggregateOutputType | null
  _max: PermissionsMaxAggregateOutputType | null
}

export type PermissionsAvgAggregateOutputType = {
  id: number | null
  deletedBy: number | null
}

export type PermissionsSumAggregateOutputType = {
  id: number | null
  deletedBy: number | null
}

export type PermissionsMinAggregateOutputType = {
  id: number | null
  name: string | null
  endpoint: string | null
  method: string | null
  module: string | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PermissionsMaxAggregateOutputType = {
  id: number | null
  name: string | null
  endpoint: string | null
  method: string | null
  module: string | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PermissionsCountAggregateOutputType = {
  id: number
  name: number
  endpoint: number
  method: number
  module: number
  deletedBy: number
  isDeleted: number
  deletedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PermissionsAvgAggregateInputType = {
  id?: true
  deletedBy?: true
}

export type PermissionsSumAggregateInputType = {
  id?: true
  deletedBy?: true
}

export type PermissionsMinAggregateInputType = {
  id?: true
  name?: true
  endpoint?: true
  method?: true
  module?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type PermissionsMaxAggregateInputType = {
  id?: true
  name?: true
  endpoint?: true
  method?: true
  module?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type PermissionsCountAggregateInputType = {
  id?: true
  name?: true
  endpoint?: true
  method?: true
  module?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PermissionsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Permissions to aggregate.
   */
  where?: Prisma.PermissionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Permissions to fetch.
   */
  orderBy?: Prisma.PermissionsOrderByWithRelationInput | Prisma.PermissionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PermissionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Permissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Permissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Permissions
  **/
  _count?: true | PermissionsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PermissionsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PermissionsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PermissionsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PermissionsMaxAggregateInputType
}

export type GetPermissionsAggregateType<T extends PermissionsAggregateArgs> = {
      [P in keyof T & keyof AggregatePermissions]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePermissions[P]>
    : Prisma.GetScalarType<T[P], AggregatePermissions[P]>
}




export type PermissionsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PermissionsWhereInput
  orderBy?: Prisma.PermissionsOrderByWithAggregationInput | Prisma.PermissionsOrderByWithAggregationInput[]
  by: Prisma.PermissionsScalarFieldEnum[] | Prisma.PermissionsScalarFieldEnum
  having?: Prisma.PermissionsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PermissionsCountAggregateInputType | true
  _avg?: PermissionsAvgAggregateInputType
  _sum?: PermissionsSumAggregateInputType
  _min?: PermissionsMinAggregateInputType
  _max?: PermissionsMaxAggregateInputType
}

export type PermissionsGroupByOutputType = {
  id: number
  name: string
  endpoint: string
  method: string
  module: string
  deletedBy: number
  isDeleted: boolean
  deletedAt: Date
  createdAt: Date
  updatedAt: Date
  _count: PermissionsCountAggregateOutputType | null
  _avg: PermissionsAvgAggregateOutputType | null
  _sum: PermissionsSumAggregateOutputType | null
  _min: PermissionsMinAggregateOutputType | null
  _max: PermissionsMaxAggregateOutputType | null
}

type GetPermissionsGroupByPayload<T extends PermissionsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PermissionsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PermissionsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PermissionsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PermissionsGroupByOutputType[P]>
      }
    >
  >



export type PermissionsWhereInput = {
  AND?: Prisma.PermissionsWhereInput | Prisma.PermissionsWhereInput[]
  OR?: Prisma.PermissionsWhereInput[]
  NOT?: Prisma.PermissionsWhereInput | Prisma.PermissionsWhereInput[]
  id?: Prisma.IntFilter<"Permissions"> | number
  name?: Prisma.StringFilter<"Permissions"> | string
  endpoint?: Prisma.StringFilter<"Permissions"> | string
  method?: Prisma.StringFilter<"Permissions"> | string
  module?: Prisma.StringFilter<"Permissions"> | string
  deletedBy?: Prisma.IntFilter<"Permissions"> | number
  isDeleted?: Prisma.BoolFilter<"Permissions"> | boolean
  deletedAt?: Prisma.DateTimeFilter<"Permissions"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Permissions"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Permissions"> | Date | string
  RolePermission?: Prisma.RolePermissionListRelationFilter
}

export type PermissionsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  endpoint?: Prisma.SortOrder
  method?: Prisma.SortOrder
  module?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  RolePermission?: Prisma.RolePermissionOrderByRelationAggregateInput
  _relevance?: Prisma.PermissionsOrderByRelevanceInput
}

export type PermissionsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.PermissionsWhereInput | Prisma.PermissionsWhereInput[]
  OR?: Prisma.PermissionsWhereInput[]
  NOT?: Prisma.PermissionsWhereInput | Prisma.PermissionsWhereInput[]
  name?: Prisma.StringFilter<"Permissions"> | string
  endpoint?: Prisma.StringFilter<"Permissions"> | string
  method?: Prisma.StringFilter<"Permissions"> | string
  module?: Prisma.StringFilter<"Permissions"> | string
  deletedBy?: Prisma.IntFilter<"Permissions"> | number
  isDeleted?: Prisma.BoolFilter<"Permissions"> | boolean
  deletedAt?: Prisma.DateTimeFilter<"Permissions"> | Date | string
  createdAt?: Prisma.DateTimeFilter<"Permissions"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Permissions"> | Date | string
  RolePermission?: Prisma.RolePermissionListRelationFilter
}, "id">

export type PermissionsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  endpoint?: Prisma.SortOrder
  method?: Prisma.SortOrder
  module?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PermissionsCountOrderByAggregateInput
  _avg?: Prisma.PermissionsAvgOrderByAggregateInput
  _max?: Prisma.PermissionsMaxOrderByAggregateInput
  _min?: Prisma.PermissionsMinOrderByAggregateInput
  _sum?: Prisma.PermissionsSumOrderByAggregateInput
}

export type PermissionsScalarWhereWithAggregatesInput = {
  AND?: Prisma.PermissionsScalarWhereWithAggregatesInput | Prisma.PermissionsScalarWhereWithAggregatesInput[]
  OR?: Prisma.PermissionsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PermissionsScalarWhereWithAggregatesInput | Prisma.PermissionsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Permissions"> | number
  name?: Prisma.StringWithAggregatesFilter<"Permissions"> | string
  endpoint?: Prisma.StringWithAggregatesFilter<"Permissions"> | string
  method?: Prisma.StringWithAggregatesFilter<"Permissions"> | string
  module?: Prisma.StringWithAggregatesFilter<"Permissions"> | string
  deletedBy?: Prisma.IntWithAggregatesFilter<"Permissions"> | number
  isDeleted?: Prisma.BoolWithAggregatesFilter<"Permissions"> | boolean
  deletedAt?: Prisma.DateTimeWithAggregatesFilter<"Permissions"> | Date | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Permissions"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Permissions"> | Date | string
}

export type PermissionsCreateInput = {
  name: string
  endpoint: string
  method: string
  module: string
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  RolePermission?: Prisma.RolePermissionCreateNestedManyWithoutPermissionsInput
}

export type PermissionsUncheckedCreateInput = {
  id?: number
  name: string
  endpoint: string
  method: string
  module: string
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  RolePermission?: Prisma.RolePermissionUncheckedCreateNestedManyWithoutPermissionsInput
}

export type PermissionsUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  endpoint?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  module?: Prisma.StringFieldUpdateOperationsInput | string
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  RolePermission?: Prisma.RolePermissionUpdateManyWithoutPermissionsNestedInput
}

export type PermissionsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  endpoint?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  module?: Prisma.StringFieldUpdateOperationsInput | string
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  RolePermission?: Prisma.RolePermissionUncheckedUpdateManyWithoutPermissionsNestedInput
}

export type PermissionsCreateManyInput = {
  id?: number
  name: string
  endpoint: string
  method: string
  module: string
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PermissionsUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  endpoint?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  module?: Prisma.StringFieldUpdateOperationsInput | string
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PermissionsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  endpoint?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  module?: Prisma.StringFieldUpdateOperationsInput | string
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PermissionsOrderByRelevanceInput = {
  fields: Prisma.PermissionsOrderByRelevanceFieldEnum | Prisma.PermissionsOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type PermissionsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  endpoint?: Prisma.SortOrder
  method?: Prisma.SortOrder
  module?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PermissionsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type PermissionsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  endpoint?: Prisma.SortOrder
  method?: Prisma.SortOrder
  module?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PermissionsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  endpoint?: Prisma.SortOrder
  method?: Prisma.SortOrder
  module?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PermissionsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type PermissionsScalarRelationFilter = {
  is?: Prisma.PermissionsWhereInput
  isNot?: Prisma.PermissionsWhereInput
}

export type PermissionsCreateNestedOneWithoutRolePermissionInput = {
  create?: Prisma.XOR<Prisma.PermissionsCreateWithoutRolePermissionInput, Prisma.PermissionsUncheckedCreateWithoutRolePermissionInput>
  connectOrCreate?: Prisma.PermissionsCreateOrConnectWithoutRolePermissionInput
  connect?: Prisma.PermissionsWhereUniqueInput
}

export type PermissionsUpdateOneRequiredWithoutRolePermissionNestedInput = {
  create?: Prisma.XOR<Prisma.PermissionsCreateWithoutRolePermissionInput, Prisma.PermissionsUncheckedCreateWithoutRolePermissionInput>
  connectOrCreate?: Prisma.PermissionsCreateOrConnectWithoutRolePermissionInput
  upsert?: Prisma.PermissionsUpsertWithoutRolePermissionInput
  connect?: Prisma.PermissionsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.PermissionsUpdateToOneWithWhereWithoutRolePermissionInput, Prisma.PermissionsUpdateWithoutRolePermissionInput>, Prisma.PermissionsUncheckedUpdateWithoutRolePermissionInput>
}

export type PermissionsCreateWithoutRolePermissionInput = {
  name: string
  endpoint: string
  method: string
  module: string
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PermissionsUncheckedCreateWithoutRolePermissionInput = {
  id?: number
  name: string
  endpoint: string
  method: string
  module: string
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PermissionsCreateOrConnectWithoutRolePermissionInput = {
  where: Prisma.PermissionsWhereUniqueInput
  create: Prisma.XOR<Prisma.PermissionsCreateWithoutRolePermissionInput, Prisma.PermissionsUncheckedCreateWithoutRolePermissionInput>
}

export type PermissionsUpsertWithoutRolePermissionInput = {
  update: Prisma.XOR<Prisma.PermissionsUpdateWithoutRolePermissionInput, Prisma.PermissionsUncheckedUpdateWithoutRolePermissionInput>
  create: Prisma.XOR<Prisma.PermissionsCreateWithoutRolePermissionInput, Prisma.PermissionsUncheckedCreateWithoutRolePermissionInput>
  where?: Prisma.PermissionsWhereInput
}

export type PermissionsUpdateToOneWithWhereWithoutRolePermissionInput = {
  where?: Prisma.PermissionsWhereInput
  data: Prisma.XOR<Prisma.PermissionsUpdateWithoutRolePermissionInput, Prisma.PermissionsUncheckedUpdateWithoutRolePermissionInput>
}

export type PermissionsUpdateWithoutRolePermissionInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  endpoint?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  module?: Prisma.StringFieldUpdateOperationsInput | string
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PermissionsUncheckedUpdateWithoutRolePermissionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  endpoint?: Prisma.StringFieldUpdateOperationsInput | string
  method?: Prisma.StringFieldUpdateOperationsInput | string
  module?: Prisma.StringFieldUpdateOperationsInput | string
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PermissionsCountOutputType
 */

export type PermissionsCountOutputType = {
  RolePermission: number
}

export type PermissionsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  RolePermission?: boolean | PermissionsCountOutputTypeCountRolePermissionArgs
}

/**
 * PermissionsCountOutputType without action
 */
export type PermissionsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PermissionsCountOutputType
   */
  select?: Prisma.PermissionsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PermissionsCountOutputType without action
 */
export type PermissionsCountOutputTypeCountRolePermissionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RolePermissionWhereInput
}


export type PermissionsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  endpoint?: boolean
  method?: boolean
  module?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  RolePermission?: boolean | Prisma.Permissions$RolePermissionArgs<ExtArgs>
  _count?: boolean | Prisma.PermissionsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["permissions"]>



export type PermissionsSelectScalar = {
  id?: boolean
  name?: boolean
  endpoint?: boolean
  method?: boolean
  module?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PermissionsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "endpoint" | "method" | "module" | "deletedBy" | "isDeleted" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["permissions"]>
export type PermissionsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  RolePermission?: boolean | Prisma.Permissions$RolePermissionArgs<ExtArgs>
  _count?: boolean | Prisma.PermissionsCountOutputTypeDefaultArgs<ExtArgs>
}

export type $PermissionsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Permissions"
  objects: {
    RolePermission: Prisma.$RolePermissionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    endpoint: string
    method: string
    module: string
    deletedBy: number
    isDeleted: boolean
    deletedAt: Date
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["permissions"]>
  composites: {}
}

export type PermissionsGetPayload<S extends boolean | null | undefined | PermissionsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PermissionsPayload, S>

export type PermissionsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PermissionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PermissionsCountAggregateInputType | true
  }

export interface PermissionsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permissions'], meta: { name: 'Permissions' } }
  /**
   * Find zero or one Permissions that matches the filter.
   * @param {PermissionsFindUniqueArgs} args - Arguments to find a Permissions
   * @example
   * // Get one Permissions
   * const permissions = await prisma.permissions.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PermissionsFindUniqueArgs>(args: Prisma.SelectSubset<T, PermissionsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PermissionsClient<runtime.Types.Result.GetResult<Prisma.$PermissionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Permissions that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PermissionsFindUniqueOrThrowArgs} args - Arguments to find a Permissions
   * @example
   * // Get one Permissions
   * const permissions = await prisma.permissions.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PermissionsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PermissionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PermissionsClient<runtime.Types.Result.GetResult<Prisma.$PermissionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Permissions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PermissionsFindFirstArgs} args - Arguments to find a Permissions
   * @example
   * // Get one Permissions
   * const permissions = await prisma.permissions.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PermissionsFindFirstArgs>(args?: Prisma.SelectSubset<T, PermissionsFindFirstArgs<ExtArgs>>): Prisma.Prisma__PermissionsClient<runtime.Types.Result.GetResult<Prisma.$PermissionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Permissions that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PermissionsFindFirstOrThrowArgs} args - Arguments to find a Permissions
   * @example
   * // Get one Permissions
   * const permissions = await prisma.permissions.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PermissionsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PermissionsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PermissionsClient<runtime.Types.Result.GetResult<Prisma.$PermissionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Permissions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PermissionsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Permissions
   * const permissions = await prisma.permissions.findMany()
   * 
   * // Get first 10 Permissions
   * const permissions = await prisma.permissions.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const permissionsWithIdOnly = await prisma.permissions.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PermissionsFindManyArgs>(args?: Prisma.SelectSubset<T, PermissionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PermissionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Permissions.
   * @param {PermissionsCreateArgs} args - Arguments to create a Permissions.
   * @example
   * // Create one Permissions
   * const Permissions = await prisma.permissions.create({
   *   data: {
   *     // ... data to create a Permissions
   *   }
   * })
   * 
   */
  create<T extends PermissionsCreateArgs>(args: Prisma.SelectSubset<T, PermissionsCreateArgs<ExtArgs>>): Prisma.Prisma__PermissionsClient<runtime.Types.Result.GetResult<Prisma.$PermissionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Permissions.
   * @param {PermissionsCreateManyArgs} args - Arguments to create many Permissions.
   * @example
   * // Create many Permissions
   * const permissions = await prisma.permissions.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PermissionsCreateManyArgs>(args?: Prisma.SelectSubset<T, PermissionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Permissions.
   * @param {PermissionsDeleteArgs} args - Arguments to delete one Permissions.
   * @example
   * // Delete one Permissions
   * const Permissions = await prisma.permissions.delete({
   *   where: {
   *     // ... filter to delete one Permissions
   *   }
   * })
   * 
   */
  delete<T extends PermissionsDeleteArgs>(args: Prisma.SelectSubset<T, PermissionsDeleteArgs<ExtArgs>>): Prisma.Prisma__PermissionsClient<runtime.Types.Result.GetResult<Prisma.$PermissionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Permissions.
   * @param {PermissionsUpdateArgs} args - Arguments to update one Permissions.
   * @example
   * // Update one Permissions
   * const permissions = await prisma.permissions.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PermissionsUpdateArgs>(args: Prisma.SelectSubset<T, PermissionsUpdateArgs<ExtArgs>>): Prisma.Prisma__PermissionsClient<runtime.Types.Result.GetResult<Prisma.$PermissionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Permissions.
   * @param {PermissionsDeleteManyArgs} args - Arguments to filter Permissions to delete.
   * @example
   * // Delete a few Permissions
   * const { count } = await prisma.permissions.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PermissionsDeleteManyArgs>(args?: Prisma.SelectSubset<T, PermissionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Permissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PermissionsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Permissions
   * const permissions = await prisma.permissions.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PermissionsUpdateManyArgs>(args: Prisma.SelectSubset<T, PermissionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Permissions.
   * @param {PermissionsUpsertArgs} args - Arguments to update or create a Permissions.
   * @example
   * // Update or create a Permissions
   * const permissions = await prisma.permissions.upsert({
   *   create: {
   *     // ... data to create a Permissions
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Permissions we want to update
   *   }
   * })
   */
  upsert<T extends PermissionsUpsertArgs>(args: Prisma.SelectSubset<T, PermissionsUpsertArgs<ExtArgs>>): Prisma.Prisma__PermissionsClient<runtime.Types.Result.GetResult<Prisma.$PermissionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Permissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PermissionsCountArgs} args - Arguments to filter Permissions to count.
   * @example
   * // Count the number of Permissions
   * const count = await prisma.permissions.count({
   *   where: {
   *     // ... the filter for the Permissions we want to count
   *   }
   * })
  **/
  count<T extends PermissionsCountArgs>(
    args?: Prisma.Subset<T, PermissionsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PermissionsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Permissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PermissionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PermissionsAggregateArgs>(args: Prisma.Subset<T, PermissionsAggregateArgs>): Prisma.PrismaPromise<GetPermissionsAggregateType<T>>

  /**
   * Group by Permissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PermissionsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PermissionsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PermissionsGroupByArgs['orderBy'] }
      : { orderBy?: PermissionsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PermissionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Permissions model
 */
readonly fields: PermissionsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Permissions.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PermissionsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  RolePermission<T extends Prisma.Permissions$RolePermissionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Permissions$RolePermissionArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Permissions model
 */
export interface PermissionsFieldRefs {
  readonly id: Prisma.FieldRef<"Permissions", 'Int'>
  readonly name: Prisma.FieldRef<"Permissions", 'String'>
  readonly endpoint: Prisma.FieldRef<"Permissions", 'String'>
  readonly method: Prisma.FieldRef<"Permissions", 'String'>
  readonly module: Prisma.FieldRef<"Permissions", 'String'>
  readonly deletedBy: Prisma.FieldRef<"Permissions", 'Int'>
  readonly isDeleted: Prisma.FieldRef<"Permissions", 'Boolean'>
  readonly deletedAt: Prisma.FieldRef<"Permissions", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Permissions", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Permissions", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Permissions findUnique
 */
export type PermissionsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Permissions
   */
  select?: Prisma.PermissionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Permissions
   */
  omit?: Prisma.PermissionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PermissionsInclude<ExtArgs> | null
  /**
   * Filter, which Permissions to fetch.
   */
  where: Prisma.PermissionsWhereUniqueInput
}

/**
 * Permissions findUniqueOrThrow
 */
export type PermissionsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Permissions
   */
  select?: Prisma.PermissionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Permissions
   */
  omit?: Prisma.PermissionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PermissionsInclude<ExtArgs> | null
  /**
   * Filter, which Permissions to fetch.
   */
  where: Prisma.PermissionsWhereUniqueInput
}

/**
 * Permissions findFirst
 */
export type PermissionsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Permissions
   */
  select?: Prisma.PermissionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Permissions
   */
  omit?: Prisma.PermissionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PermissionsInclude<ExtArgs> | null
  /**
   * Filter, which Permissions to fetch.
   */
  where?: Prisma.PermissionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Permissions to fetch.
   */
  orderBy?: Prisma.PermissionsOrderByWithRelationInput | Prisma.PermissionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Permissions.
   */
  cursor?: Prisma.PermissionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Permissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Permissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Permissions.
   */
  distinct?: Prisma.PermissionsScalarFieldEnum | Prisma.PermissionsScalarFieldEnum[]
}

/**
 * Permissions findFirstOrThrow
 */
export type PermissionsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Permissions
   */
  select?: Prisma.PermissionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Permissions
   */
  omit?: Prisma.PermissionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PermissionsInclude<ExtArgs> | null
  /**
   * Filter, which Permissions to fetch.
   */
  where?: Prisma.PermissionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Permissions to fetch.
   */
  orderBy?: Prisma.PermissionsOrderByWithRelationInput | Prisma.PermissionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Permissions.
   */
  cursor?: Prisma.PermissionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Permissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Permissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Permissions.
   */
  distinct?: Prisma.PermissionsScalarFieldEnum | Prisma.PermissionsScalarFieldEnum[]
}

/**
 * Permissions findMany
 */
export type PermissionsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Permissions
   */
  select?: Prisma.PermissionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Permissions
   */
  omit?: Prisma.PermissionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PermissionsInclude<ExtArgs> | null
  /**
   * Filter, which Permissions to fetch.
   */
  where?: Prisma.PermissionsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Permissions to fetch.
   */
  orderBy?: Prisma.PermissionsOrderByWithRelationInput | Prisma.PermissionsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Permissions.
   */
  cursor?: Prisma.PermissionsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Permissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Permissions.
   */
  skip?: number
  distinct?: Prisma.PermissionsScalarFieldEnum | Prisma.PermissionsScalarFieldEnum[]
}

/**
 * Permissions create
 */
export type PermissionsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Permissions
   */
  select?: Prisma.PermissionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Permissions
   */
  omit?: Prisma.PermissionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PermissionsInclude<ExtArgs> | null
  /**
   * The data needed to create a Permissions.
   */
  data: Prisma.XOR<Prisma.PermissionsCreateInput, Prisma.PermissionsUncheckedCreateInput>
}

/**
 * Permissions createMany
 */
export type PermissionsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Permissions.
   */
  data: Prisma.PermissionsCreateManyInput | Prisma.PermissionsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Permissions update
 */
export type PermissionsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Permissions
   */
  select?: Prisma.PermissionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Permissions
   */
  omit?: Prisma.PermissionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PermissionsInclude<ExtArgs> | null
  /**
   * The data needed to update a Permissions.
   */
  data: Prisma.XOR<Prisma.PermissionsUpdateInput, Prisma.PermissionsUncheckedUpdateInput>
  /**
   * Choose, which Permissions to update.
   */
  where: Prisma.PermissionsWhereUniqueInput
}

/**
 * Permissions updateMany
 */
export type PermissionsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Permissions.
   */
  data: Prisma.XOR<Prisma.PermissionsUpdateManyMutationInput, Prisma.PermissionsUncheckedUpdateManyInput>
  /**
   * Filter which Permissions to update
   */
  where?: Prisma.PermissionsWhereInput
  /**
   * Limit how many Permissions to update.
   */
  limit?: number
}

/**
 * Permissions upsert
 */
export type PermissionsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Permissions
   */
  select?: Prisma.PermissionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Permissions
   */
  omit?: Prisma.PermissionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PermissionsInclude<ExtArgs> | null
  /**
   * The filter to search for the Permissions to update in case it exists.
   */
  where: Prisma.PermissionsWhereUniqueInput
  /**
   * In case the Permissions found by the `where` argument doesn't exist, create a new Permissions with this data.
   */
  create: Prisma.XOR<Prisma.PermissionsCreateInput, Prisma.PermissionsUncheckedCreateInput>
  /**
   * In case the Permissions was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PermissionsUpdateInput, Prisma.PermissionsUncheckedUpdateInput>
}

/**
 * Permissions delete
 */
export type PermissionsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Permissions
   */
  select?: Prisma.PermissionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Permissions
   */
  omit?: Prisma.PermissionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PermissionsInclude<ExtArgs> | null
  /**
   * Filter which Permissions to delete.
   */
  where: Prisma.PermissionsWhereUniqueInput
}

/**
 * Permissions deleteMany
 */
export type PermissionsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Permissions to delete
   */
  where?: Prisma.PermissionsWhereInput
  /**
   * Limit how many Permissions to delete.
   */
  limit?: number
}

/**
 * Permissions.RolePermission
 */
export type Permissions$RolePermissionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RolePermission
   */
  select?: Prisma.RolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RolePermission
   */
  omit?: Prisma.RolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePermissionInclude<ExtArgs> | null
  where?: Prisma.RolePermissionWhereInput
  orderBy?: Prisma.RolePermissionOrderByWithRelationInput | Prisma.RolePermissionOrderByWithRelationInput[]
  cursor?: Prisma.RolePermissionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RolePermissionScalarFieldEnum | Prisma.RolePermissionScalarFieldEnum[]
}

/**
 * Permissions without action
 */
export type PermissionsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Permissions
   */
  select?: Prisma.PermissionsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Permissions
   */
  omit?: Prisma.PermissionsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PermissionsInclude<ExtArgs> | null
}
