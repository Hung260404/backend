
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Roles` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Roles
 * 
 */
export type RolesModel = runtime.Types.Result.DefaultSelection<Prisma.$RolesPayload>

export type AggregateRoles = {
  _count: RolesCountAggregateOutputType | null
  _avg: RolesAvgAggregateOutputType | null
  _sum: RolesSumAggregateOutputType | null
  _min: RolesMinAggregateOutputType | null
  _max: RolesMaxAggregateOutputType | null
}

export type RolesAvgAggregateOutputType = {
  id: number | null
  deletedBy: number | null
}

export type RolesSumAggregateOutputType = {
  id: number | null
  deletedBy: number | null
}

export type RolesMinAggregateOutputType = {
  id: number | null
  name: string | null
  description: string | null
  isActive: boolean | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type RolesMaxAggregateOutputType = {
  id: number | null
  name: string | null
  description: string | null
  isActive: boolean | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type RolesCountAggregateOutputType = {
  id: number
  name: number
  description: number
  isActive: number
  deletedBy: number
  isDeleted: number
  deletedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type RolesAvgAggregateInputType = {
  id?: true
  deletedBy?: true
}

export type RolesSumAggregateInputType = {
  id?: true
  deletedBy?: true
}

export type RolesMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  isActive?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type RolesMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  isActive?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type RolesCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  isActive?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type RolesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Roles to aggregate.
   */
  where?: Prisma.RolesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Roles to fetch.
   */
  orderBy?: Prisma.RolesOrderByWithRelationInput | Prisma.RolesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RolesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Roles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Roles
  **/
  _count?: true | RolesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RolesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RolesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RolesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RolesMaxAggregateInputType
}

export type GetRolesAggregateType<T extends RolesAggregateArgs> = {
      [P in keyof T & keyof AggregateRoles]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRoles[P]>
    : Prisma.GetScalarType<T[P], AggregateRoles[P]>
}




export type RolesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RolesWhereInput
  orderBy?: Prisma.RolesOrderByWithAggregationInput | Prisma.RolesOrderByWithAggregationInput[]
  by: Prisma.RolesScalarFieldEnum[] | Prisma.RolesScalarFieldEnum
  having?: Prisma.RolesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RolesCountAggregateInputType | true
  _avg?: RolesAvgAggregateInputType
  _sum?: RolesSumAggregateInputType
  _min?: RolesMinAggregateInputType
  _max?: RolesMaxAggregateInputType
}

export type RolesGroupByOutputType = {
  id: number
  name: string | null
  description: string | null
  isActive: boolean | null
  deletedBy: number
  isDeleted: boolean
  deletedAt: Date | null
  createdAt: Date
  updatedAt: Date
  _count: RolesCountAggregateOutputType | null
  _avg: RolesAvgAggregateOutputType | null
  _sum: RolesSumAggregateOutputType | null
  _min: RolesMinAggregateOutputType | null
  _max: RolesMaxAggregateOutputType | null
}

type GetRolesGroupByPayload<T extends RolesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RolesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RolesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RolesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RolesGroupByOutputType[P]>
      }
    >
  >



export type RolesWhereInput = {
  AND?: Prisma.RolesWhereInput | Prisma.RolesWhereInput[]
  OR?: Prisma.RolesWhereInput[]
  NOT?: Prisma.RolesWhereInput | Prisma.RolesWhereInput[]
  id?: Prisma.IntFilter<"Roles"> | number
  name?: Prisma.StringNullableFilter<"Roles"> | string | null
  description?: Prisma.StringNullableFilter<"Roles"> | string | null
  isActive?: Prisma.BoolNullableFilter<"Roles"> | boolean | null
  deletedBy?: Prisma.IntFilter<"Roles"> | number
  isDeleted?: Prisma.BoolFilter<"Roles"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"Roles"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Roles"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Roles"> | Date | string
  RolePermission?: Prisma.RolePermissionListRelationFilter
  Users?: Prisma.UsersListRelationFilter
}

export type RolesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  isActive?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  RolePermission?: Prisma.RolePermissionOrderByRelationAggregateInput
  Users?: Prisma.UsersOrderByRelationAggregateInput
  _relevance?: Prisma.RolesOrderByRelevanceInput
}

export type RolesWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.RolesWhereInput | Prisma.RolesWhereInput[]
  OR?: Prisma.RolesWhereInput[]
  NOT?: Prisma.RolesWhereInput | Prisma.RolesWhereInput[]
  name?: Prisma.StringNullableFilter<"Roles"> | string | null
  description?: Prisma.StringNullableFilter<"Roles"> | string | null
  isActive?: Prisma.BoolNullableFilter<"Roles"> | boolean | null
  deletedBy?: Prisma.IntFilter<"Roles"> | number
  isDeleted?: Prisma.BoolFilter<"Roles"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"Roles"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Roles"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Roles"> | Date | string
  RolePermission?: Prisma.RolePermissionListRelationFilter
  Users?: Prisma.UsersListRelationFilter
}, "id">

export type RolesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  isActive?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.RolesCountOrderByAggregateInput
  _avg?: Prisma.RolesAvgOrderByAggregateInput
  _max?: Prisma.RolesMaxOrderByAggregateInput
  _min?: Prisma.RolesMinOrderByAggregateInput
  _sum?: Prisma.RolesSumOrderByAggregateInput
}

export type RolesScalarWhereWithAggregatesInput = {
  AND?: Prisma.RolesScalarWhereWithAggregatesInput | Prisma.RolesScalarWhereWithAggregatesInput[]
  OR?: Prisma.RolesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RolesScalarWhereWithAggregatesInput | Prisma.RolesScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Roles"> | number
  name?: Prisma.StringNullableWithAggregatesFilter<"Roles"> | string | null
  description?: Prisma.StringNullableWithAggregatesFilter<"Roles"> | string | null
  isActive?: Prisma.BoolNullableWithAggregatesFilter<"Roles"> | boolean | null
  deletedBy?: Prisma.IntWithAggregatesFilter<"Roles"> | number
  isDeleted?: Prisma.BoolWithAggregatesFilter<"Roles"> | boolean
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Roles"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Roles"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Roles"> | Date | string
}

export type RolesCreateInput = {
  name?: string | null
  description?: string | null
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  RolePermission?: Prisma.RolePermissionCreateNestedManyWithoutRolesInput
  Users?: Prisma.UsersCreateNestedManyWithoutRolesInput
}

export type RolesUncheckedCreateInput = {
  id?: number
  name?: string | null
  description?: string | null
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  RolePermission?: Prisma.RolePermissionUncheckedCreateNestedManyWithoutRolesInput
  Users?: Prisma.UsersUncheckedCreateNestedManyWithoutRolesInput
}

export type RolesUpdateInput = {
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  RolePermission?: Prisma.RolePermissionUpdateManyWithoutRolesNestedInput
  Users?: Prisma.UsersUpdateManyWithoutRolesNestedInput
}

export type RolesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  RolePermission?: Prisma.RolePermissionUncheckedUpdateManyWithoutRolesNestedInput
  Users?: Prisma.UsersUncheckedUpdateManyWithoutRolesNestedInput
}

export type RolesCreateManyInput = {
  id?: number
  name?: string | null
  description?: string | null
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RolesUpdateManyMutationInput = {
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RolesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RolesScalarRelationFilter = {
  is?: Prisma.RolesWhereInput
  isNot?: Prisma.RolesWhereInput
}

export type RolesOrderByRelevanceInput = {
  fields: Prisma.RolesOrderByRelevanceFieldEnum | Prisma.RolesOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type RolesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RolesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type RolesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RolesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RolesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type RolesCreateNestedOneWithoutRolePermissionInput = {
  create?: Prisma.XOR<Prisma.RolesCreateWithoutRolePermissionInput, Prisma.RolesUncheckedCreateWithoutRolePermissionInput>
  connectOrCreate?: Prisma.RolesCreateOrConnectWithoutRolePermissionInput
  connect?: Prisma.RolesWhereUniqueInput
}

export type RolesUpdateOneRequiredWithoutRolePermissionNestedInput = {
  create?: Prisma.XOR<Prisma.RolesCreateWithoutRolePermissionInput, Prisma.RolesUncheckedCreateWithoutRolePermissionInput>
  connectOrCreate?: Prisma.RolesCreateOrConnectWithoutRolePermissionInput
  upsert?: Prisma.RolesUpsertWithoutRolePermissionInput
  connect?: Prisma.RolesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RolesUpdateToOneWithWhereWithoutRolePermissionInput, Prisma.RolesUpdateWithoutRolePermissionInput>, Prisma.RolesUncheckedUpdateWithoutRolePermissionInput>
}

export type RolesCreateNestedOneWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.RolesCreateWithoutUsersInput, Prisma.RolesUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.RolesCreateOrConnectWithoutUsersInput
  connect?: Prisma.RolesWhereUniqueInput
}

export type RolesUpdateOneRequiredWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.RolesCreateWithoutUsersInput, Prisma.RolesUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.RolesCreateOrConnectWithoutUsersInput
  upsert?: Prisma.RolesUpsertWithoutUsersInput
  connect?: Prisma.RolesWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.RolesUpdateToOneWithWhereWithoutUsersInput, Prisma.RolesUpdateWithoutUsersInput>, Prisma.RolesUncheckedUpdateWithoutUsersInput>
}

export type RolesCreateWithoutRolePermissionInput = {
  name?: string | null
  description?: string | null
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Users?: Prisma.UsersCreateNestedManyWithoutRolesInput
}

export type RolesUncheckedCreateWithoutRolePermissionInput = {
  id?: number
  name?: string | null
  description?: string | null
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Users?: Prisma.UsersUncheckedCreateNestedManyWithoutRolesInput
}

export type RolesCreateOrConnectWithoutRolePermissionInput = {
  where: Prisma.RolesWhereUniqueInput
  create: Prisma.XOR<Prisma.RolesCreateWithoutRolePermissionInput, Prisma.RolesUncheckedCreateWithoutRolePermissionInput>
}

export type RolesUpsertWithoutRolePermissionInput = {
  update: Prisma.XOR<Prisma.RolesUpdateWithoutRolePermissionInput, Prisma.RolesUncheckedUpdateWithoutRolePermissionInput>
  create: Prisma.XOR<Prisma.RolesCreateWithoutRolePermissionInput, Prisma.RolesUncheckedCreateWithoutRolePermissionInput>
  where?: Prisma.RolesWhereInput
}

export type RolesUpdateToOneWithWhereWithoutRolePermissionInput = {
  where?: Prisma.RolesWhereInput
  data: Prisma.XOR<Prisma.RolesUpdateWithoutRolePermissionInput, Prisma.RolesUncheckedUpdateWithoutRolePermissionInput>
}

export type RolesUpdateWithoutRolePermissionInput = {
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Users?: Prisma.UsersUpdateManyWithoutRolesNestedInput
}

export type RolesUncheckedUpdateWithoutRolePermissionInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Users?: Prisma.UsersUncheckedUpdateManyWithoutRolesNestedInput
}

export type RolesCreateWithoutUsersInput = {
  name?: string | null
  description?: string | null
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  RolePermission?: Prisma.RolePermissionCreateNestedManyWithoutRolesInput
}

export type RolesUncheckedCreateWithoutUsersInput = {
  id?: number
  name?: string | null
  description?: string | null
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  RolePermission?: Prisma.RolePermissionUncheckedCreateNestedManyWithoutRolesInput
}

export type RolesCreateOrConnectWithoutUsersInput = {
  where: Prisma.RolesWhereUniqueInput
  create: Prisma.XOR<Prisma.RolesCreateWithoutUsersInput, Prisma.RolesUncheckedCreateWithoutUsersInput>
}

export type RolesUpsertWithoutUsersInput = {
  update: Prisma.XOR<Prisma.RolesUpdateWithoutUsersInput, Prisma.RolesUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.RolesCreateWithoutUsersInput, Prisma.RolesUncheckedCreateWithoutUsersInput>
  where?: Prisma.RolesWhereInput
}

export type RolesUpdateToOneWithWhereWithoutUsersInput = {
  where?: Prisma.RolesWhereInput
  data: Prisma.XOR<Prisma.RolesUpdateWithoutUsersInput, Prisma.RolesUncheckedUpdateWithoutUsersInput>
}

export type RolesUpdateWithoutUsersInput = {
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  RolePermission?: Prisma.RolePermissionUpdateManyWithoutRolesNestedInput
}

export type RolesUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  RolePermission?: Prisma.RolePermissionUncheckedUpdateManyWithoutRolesNestedInput
}


/**
 * Count Type RolesCountOutputType
 */

export type RolesCountOutputType = {
  RolePermission: number
  Users: number
}

export type RolesCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  RolePermission?: boolean | RolesCountOutputTypeCountRolePermissionArgs
  Users?: boolean | RolesCountOutputTypeCountUsersArgs
}

/**
 * RolesCountOutputType without action
 */
export type RolesCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RolesCountOutputType
   */
  select?: Prisma.RolesCountOutputTypeSelect<ExtArgs> | null
}

/**
 * RolesCountOutputType without action
 */
export type RolesCountOutputTypeCountRolePermissionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RolePermissionWhereInput
}

/**
 * RolesCountOutputType without action
 */
export type RolesCountOutputTypeCountUsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UsersWhereInput
}


export type RolesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  isActive?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  RolePermission?: boolean | Prisma.Roles$RolePermissionArgs<ExtArgs>
  Users?: boolean | Prisma.Roles$UsersArgs<ExtArgs>
  _count?: boolean | Prisma.RolesCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["roles"]>



export type RolesSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  isActive?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type RolesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "isActive" | "deletedBy" | "isDeleted" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["roles"]>
export type RolesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  RolePermission?: boolean | Prisma.Roles$RolePermissionArgs<ExtArgs>
  Users?: boolean | Prisma.Roles$UsersArgs<ExtArgs>
  _count?: boolean | Prisma.RolesCountOutputTypeDefaultArgs<ExtArgs>
}

export type $RolesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Roles"
  objects: {
    RolePermission: Prisma.$RolePermissionPayload<ExtArgs>[]
    Users: Prisma.$UsersPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string | null
    description: string | null
    isActive: boolean | null
    deletedBy: number
    isDeleted: boolean
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["roles"]>
  composites: {}
}

export type RolesGetPayload<S extends boolean | null | undefined | RolesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RolesPayload, S>

export type RolesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RolesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RolesCountAggregateInputType | true
  }

export interface RolesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Roles'], meta: { name: 'Roles' } }
  /**
   * Find zero or one Roles that matches the filter.
   * @param {RolesFindUniqueArgs} args - Arguments to find a Roles
   * @example
   * // Get one Roles
   * const roles = await prisma.roles.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RolesFindUniqueArgs>(args: Prisma.SelectSubset<T, RolesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RolesClient<runtime.Types.Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Roles that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RolesFindUniqueOrThrowArgs} args - Arguments to find a Roles
   * @example
   * // Get one Roles
   * const roles = await prisma.roles.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RolesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RolesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RolesClient<runtime.Types.Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Roles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolesFindFirstArgs} args - Arguments to find a Roles
   * @example
   * // Get one Roles
   * const roles = await prisma.roles.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RolesFindFirstArgs>(args?: Prisma.SelectSubset<T, RolesFindFirstArgs<ExtArgs>>): Prisma.Prisma__RolesClient<runtime.Types.Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Roles that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolesFindFirstOrThrowArgs} args - Arguments to find a Roles
   * @example
   * // Get one Roles
   * const roles = await prisma.roles.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RolesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RolesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RolesClient<runtime.Types.Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Roles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Roles
   * const roles = await prisma.roles.findMany()
   * 
   * // Get first 10 Roles
   * const roles = await prisma.roles.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const rolesWithIdOnly = await prisma.roles.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RolesFindManyArgs>(args?: Prisma.SelectSubset<T, RolesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Roles.
   * @param {RolesCreateArgs} args - Arguments to create a Roles.
   * @example
   * // Create one Roles
   * const Roles = await prisma.roles.create({
   *   data: {
   *     // ... data to create a Roles
   *   }
   * })
   * 
   */
  create<T extends RolesCreateArgs>(args: Prisma.SelectSubset<T, RolesCreateArgs<ExtArgs>>): Prisma.Prisma__RolesClient<runtime.Types.Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Roles.
   * @param {RolesCreateManyArgs} args - Arguments to create many Roles.
   * @example
   * // Create many Roles
   * const roles = await prisma.roles.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RolesCreateManyArgs>(args?: Prisma.SelectSubset<T, RolesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Roles.
   * @param {RolesDeleteArgs} args - Arguments to delete one Roles.
   * @example
   * // Delete one Roles
   * const Roles = await prisma.roles.delete({
   *   where: {
   *     // ... filter to delete one Roles
   *   }
   * })
   * 
   */
  delete<T extends RolesDeleteArgs>(args: Prisma.SelectSubset<T, RolesDeleteArgs<ExtArgs>>): Prisma.Prisma__RolesClient<runtime.Types.Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Roles.
   * @param {RolesUpdateArgs} args - Arguments to update one Roles.
   * @example
   * // Update one Roles
   * const roles = await prisma.roles.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RolesUpdateArgs>(args: Prisma.SelectSubset<T, RolesUpdateArgs<ExtArgs>>): Prisma.Prisma__RolesClient<runtime.Types.Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Roles.
   * @param {RolesDeleteManyArgs} args - Arguments to filter Roles to delete.
   * @example
   * // Delete a few Roles
   * const { count } = await prisma.roles.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RolesDeleteManyArgs>(args?: Prisma.SelectSubset<T, RolesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Roles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Roles
   * const roles = await prisma.roles.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RolesUpdateManyArgs>(args: Prisma.SelectSubset<T, RolesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Roles.
   * @param {RolesUpsertArgs} args - Arguments to update or create a Roles.
   * @example
   * // Update or create a Roles
   * const roles = await prisma.roles.upsert({
   *   create: {
   *     // ... data to create a Roles
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Roles we want to update
   *   }
   * })
   */
  upsert<T extends RolesUpsertArgs>(args: Prisma.SelectSubset<T, RolesUpsertArgs<ExtArgs>>): Prisma.Prisma__RolesClient<runtime.Types.Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Roles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolesCountArgs} args - Arguments to filter Roles to count.
   * @example
   * // Count the number of Roles
   * const count = await prisma.roles.count({
   *   where: {
   *     // ... the filter for the Roles we want to count
   *   }
   * })
  **/
  count<T extends RolesCountArgs>(
    args?: Prisma.Subset<T, RolesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RolesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Roles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RolesAggregateArgs>(args: Prisma.Subset<T, RolesAggregateArgs>): Prisma.PrismaPromise<GetRolesAggregateType<T>>

  /**
   * Group by Roles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RolesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RolesGroupByArgs['orderBy'] }
      : { orderBy?: RolesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Roles model
 */
readonly fields: RolesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Roles.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RolesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  RolePermission<T extends Prisma.Roles$RolePermissionArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Roles$RolePermissionArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Users<T extends Prisma.Roles$UsersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Roles$UsersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Roles model
 */
export interface RolesFieldRefs {
  readonly id: Prisma.FieldRef<"Roles", 'Int'>
  readonly name: Prisma.FieldRef<"Roles", 'String'>
  readonly description: Prisma.FieldRef<"Roles", 'String'>
  readonly isActive: Prisma.FieldRef<"Roles", 'Boolean'>
  readonly deletedBy: Prisma.FieldRef<"Roles", 'Int'>
  readonly isDeleted: Prisma.FieldRef<"Roles", 'Boolean'>
  readonly deletedAt: Prisma.FieldRef<"Roles", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Roles", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Roles", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Roles findUnique
 */
export type RolesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Roles
   */
  select?: Prisma.RolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Roles
   */
  omit?: Prisma.RolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolesInclude<ExtArgs> | null
  /**
   * Filter, which Roles to fetch.
   */
  where: Prisma.RolesWhereUniqueInput
}

/**
 * Roles findUniqueOrThrow
 */
export type RolesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Roles
   */
  select?: Prisma.RolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Roles
   */
  omit?: Prisma.RolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolesInclude<ExtArgs> | null
  /**
   * Filter, which Roles to fetch.
   */
  where: Prisma.RolesWhereUniqueInput
}

/**
 * Roles findFirst
 */
export type RolesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Roles
   */
  select?: Prisma.RolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Roles
   */
  omit?: Prisma.RolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolesInclude<ExtArgs> | null
  /**
   * Filter, which Roles to fetch.
   */
  where?: Prisma.RolesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Roles to fetch.
   */
  orderBy?: Prisma.RolesOrderByWithRelationInput | Prisma.RolesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Roles.
   */
  cursor?: Prisma.RolesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Roles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Roles.
   */
  distinct?: Prisma.RolesScalarFieldEnum | Prisma.RolesScalarFieldEnum[]
}

/**
 * Roles findFirstOrThrow
 */
export type RolesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Roles
   */
  select?: Prisma.RolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Roles
   */
  omit?: Prisma.RolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolesInclude<ExtArgs> | null
  /**
   * Filter, which Roles to fetch.
   */
  where?: Prisma.RolesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Roles to fetch.
   */
  orderBy?: Prisma.RolesOrderByWithRelationInput | Prisma.RolesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Roles.
   */
  cursor?: Prisma.RolesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Roles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Roles.
   */
  distinct?: Prisma.RolesScalarFieldEnum | Prisma.RolesScalarFieldEnum[]
}

/**
 * Roles findMany
 */
export type RolesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Roles
   */
  select?: Prisma.RolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Roles
   */
  omit?: Prisma.RolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolesInclude<ExtArgs> | null
  /**
   * Filter, which Roles to fetch.
   */
  where?: Prisma.RolesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Roles to fetch.
   */
  orderBy?: Prisma.RolesOrderByWithRelationInput | Prisma.RolesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Roles.
   */
  cursor?: Prisma.RolesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Roles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Roles.
   */
  skip?: number
  distinct?: Prisma.RolesScalarFieldEnum | Prisma.RolesScalarFieldEnum[]
}

/**
 * Roles create
 */
export type RolesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Roles
   */
  select?: Prisma.RolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Roles
   */
  omit?: Prisma.RolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolesInclude<ExtArgs> | null
  /**
   * The data needed to create a Roles.
   */
  data?: Prisma.XOR<Prisma.RolesCreateInput, Prisma.RolesUncheckedCreateInput>
}

/**
 * Roles createMany
 */
export type RolesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Roles.
   */
  data: Prisma.RolesCreateManyInput | Prisma.RolesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Roles update
 */
export type RolesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Roles
   */
  select?: Prisma.RolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Roles
   */
  omit?: Prisma.RolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolesInclude<ExtArgs> | null
  /**
   * The data needed to update a Roles.
   */
  data: Prisma.XOR<Prisma.RolesUpdateInput, Prisma.RolesUncheckedUpdateInput>
  /**
   * Choose, which Roles to update.
   */
  where: Prisma.RolesWhereUniqueInput
}

/**
 * Roles updateMany
 */
export type RolesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Roles.
   */
  data: Prisma.XOR<Prisma.RolesUpdateManyMutationInput, Prisma.RolesUncheckedUpdateManyInput>
  /**
   * Filter which Roles to update
   */
  where?: Prisma.RolesWhereInput
  /**
   * Limit how many Roles to update.
   */
  limit?: number
}

/**
 * Roles upsert
 */
export type RolesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Roles
   */
  select?: Prisma.RolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Roles
   */
  omit?: Prisma.RolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolesInclude<ExtArgs> | null
  /**
   * The filter to search for the Roles to update in case it exists.
   */
  where: Prisma.RolesWhereUniqueInput
  /**
   * In case the Roles found by the `where` argument doesn't exist, create a new Roles with this data.
   */
  create: Prisma.XOR<Prisma.RolesCreateInput, Prisma.RolesUncheckedCreateInput>
  /**
   * In case the Roles was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RolesUpdateInput, Prisma.RolesUncheckedUpdateInput>
}

/**
 * Roles delete
 */
export type RolesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Roles
   */
  select?: Prisma.RolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Roles
   */
  omit?: Prisma.RolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolesInclude<ExtArgs> | null
  /**
   * Filter which Roles to delete.
   */
  where: Prisma.RolesWhereUniqueInput
}

/**
 * Roles deleteMany
 */
export type RolesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Roles to delete
   */
  where?: Prisma.RolesWhereInput
  /**
   * Limit how many Roles to delete.
   */
  limit?: number
}

/**
 * Roles.RolePermission
 */
export type Roles$RolePermissionArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RolePermission
   */
  select?: Prisma.RolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RolePermission
   */
  omit?: Prisma.RolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePermissionInclude<ExtArgs> | null
  where?: Prisma.RolePermissionWhereInput
  orderBy?: Prisma.RolePermissionOrderByWithRelationInput | Prisma.RolePermissionOrderByWithRelationInput[]
  cursor?: Prisma.RolePermissionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.RolePermissionScalarFieldEnum | Prisma.RolePermissionScalarFieldEnum[]
}

/**
 * Roles.Users
 */
export type Roles$UsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Users
   */
  select?: Prisma.UsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Users
   */
  omit?: Prisma.UsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersInclude<ExtArgs> | null
  where?: Prisma.UsersWhereInput
  orderBy?: Prisma.UsersOrderByWithRelationInput | Prisma.UsersOrderByWithRelationInput[]
  cursor?: Prisma.UsersWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UsersScalarFieldEnum | Prisma.UsersScalarFieldEnum[]
}

/**
 * Roles without action
 */
export type RolesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Roles
   */
  select?: Prisma.RolesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Roles
   */
  omit?: Prisma.RolesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolesInclude<ExtArgs> | null
}
