
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ChatGroupMembers` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ChatGroupMembers
 * 
 */
export type ChatGroupMembersModel = runtime.Types.Result.DefaultSelection<Prisma.$ChatGroupMembersPayload>

export type AggregateChatGroupMembers = {
  _count: ChatGroupMembersCountAggregateOutputType | null
  _avg: ChatGroupMembersAvgAggregateOutputType | null
  _sum: ChatGroupMembersSumAggregateOutputType | null
  _min: ChatGroupMembersMinAggregateOutputType | null
  _max: ChatGroupMembersMaxAggregateOutputType | null
}

export type ChatGroupMembersAvgAggregateOutputType = {
  id: number | null
  userId: number | null
  chatGroupId: number | null
  deletedBy: number | null
}

export type ChatGroupMembersSumAggregateOutputType = {
  id: number | null
  userId: number | null
  chatGroupId: number | null
  deletedBy: number | null
}

export type ChatGroupMembersMinAggregateOutputType = {
  id: number | null
  userId: number | null
  chatGroupId: number | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ChatGroupMembersMaxAggregateOutputType = {
  id: number | null
  userId: number | null
  chatGroupId: number | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ChatGroupMembersCountAggregateOutputType = {
  id: number
  userId: number
  chatGroupId: number
  deletedBy: number
  isDeleted: number
  deletedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ChatGroupMembersAvgAggregateInputType = {
  id?: true
  userId?: true
  chatGroupId?: true
  deletedBy?: true
}

export type ChatGroupMembersSumAggregateInputType = {
  id?: true
  userId?: true
  chatGroupId?: true
  deletedBy?: true
}

export type ChatGroupMembersMinAggregateInputType = {
  id?: true
  userId?: true
  chatGroupId?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ChatGroupMembersMaxAggregateInputType = {
  id?: true
  userId?: true
  chatGroupId?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ChatGroupMembersCountAggregateInputType = {
  id?: true
  userId?: true
  chatGroupId?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ChatGroupMembersAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatGroupMembers to aggregate.
   */
  where?: Prisma.ChatGroupMembersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatGroupMembers to fetch.
   */
  orderBy?: Prisma.ChatGroupMembersOrderByWithRelationInput | Prisma.ChatGroupMembersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChatGroupMembersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatGroupMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatGroupMembers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ChatGroupMembers
  **/
  _count?: true | ChatGroupMembersCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ChatGroupMembersAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ChatGroupMembersSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChatGroupMembersMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChatGroupMembersMaxAggregateInputType
}

export type GetChatGroupMembersAggregateType<T extends ChatGroupMembersAggregateArgs> = {
      [P in keyof T & keyof AggregateChatGroupMembers]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChatGroupMembers[P]>
    : Prisma.GetScalarType<T[P], AggregateChatGroupMembers[P]>
}




export type ChatGroupMembersGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatGroupMembersWhereInput
  orderBy?: Prisma.ChatGroupMembersOrderByWithAggregationInput | Prisma.ChatGroupMembersOrderByWithAggregationInput[]
  by: Prisma.ChatGroupMembersScalarFieldEnum[] | Prisma.ChatGroupMembersScalarFieldEnum
  having?: Prisma.ChatGroupMembersScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChatGroupMembersCountAggregateInputType | true
  _avg?: ChatGroupMembersAvgAggregateInputType
  _sum?: ChatGroupMembersSumAggregateInputType
  _min?: ChatGroupMembersMinAggregateInputType
  _max?: ChatGroupMembersMaxAggregateInputType
}

export type ChatGroupMembersGroupByOutputType = {
  id: number
  userId: number | null
  chatGroupId: number | null
  deletedBy: number
  isDeleted: boolean
  deletedAt: Date | null
  createdAt: Date
  updatedAt: Date
  _count: ChatGroupMembersCountAggregateOutputType | null
  _avg: ChatGroupMembersAvgAggregateOutputType | null
  _sum: ChatGroupMembersSumAggregateOutputType | null
  _min: ChatGroupMembersMinAggregateOutputType | null
  _max: ChatGroupMembersMaxAggregateOutputType | null
}

type GetChatGroupMembersGroupByPayload<T extends ChatGroupMembersGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChatGroupMembersGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChatGroupMembersGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChatGroupMembersGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChatGroupMembersGroupByOutputType[P]>
      }
    >
  >



export type ChatGroupMembersWhereInput = {
  AND?: Prisma.ChatGroupMembersWhereInput | Prisma.ChatGroupMembersWhereInput[]
  OR?: Prisma.ChatGroupMembersWhereInput[]
  NOT?: Prisma.ChatGroupMembersWhereInput | Prisma.ChatGroupMembersWhereInput[]
  id?: Prisma.IntFilter<"ChatGroupMembers"> | number
  userId?: Prisma.IntNullableFilter<"ChatGroupMembers"> | number | null
  chatGroupId?: Prisma.IntNullableFilter<"ChatGroupMembers"> | number | null
  deletedBy?: Prisma.IntFilter<"ChatGroupMembers"> | number
  isDeleted?: Prisma.BoolFilter<"ChatGroupMembers"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"ChatGroupMembers"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"ChatGroupMembers"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChatGroupMembers"> | Date | string
  Users?: Prisma.XOR<Prisma.UsersNullableScalarRelationFilter, Prisma.UsersWhereInput> | null
  ChatGroups?: Prisma.XOR<Prisma.ChatGroupsNullableScalarRelationFilter, Prisma.ChatGroupsWhereInput> | null
}

export type ChatGroupMembersOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  chatGroupId?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  Users?: Prisma.UsersOrderByWithRelationInput
  ChatGroups?: Prisma.ChatGroupsOrderByWithRelationInput
}

export type ChatGroupMembersWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ChatGroupMembersWhereInput | Prisma.ChatGroupMembersWhereInput[]
  OR?: Prisma.ChatGroupMembersWhereInput[]
  NOT?: Prisma.ChatGroupMembersWhereInput | Prisma.ChatGroupMembersWhereInput[]
  userId?: Prisma.IntNullableFilter<"ChatGroupMembers"> | number | null
  chatGroupId?: Prisma.IntNullableFilter<"ChatGroupMembers"> | number | null
  deletedBy?: Prisma.IntFilter<"ChatGroupMembers"> | number
  isDeleted?: Prisma.BoolFilter<"ChatGroupMembers"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"ChatGroupMembers"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"ChatGroupMembers"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChatGroupMembers"> | Date | string
  Users?: Prisma.XOR<Prisma.UsersNullableScalarRelationFilter, Prisma.UsersWhereInput> | null
  ChatGroups?: Prisma.XOR<Prisma.ChatGroupsNullableScalarRelationFilter, Prisma.ChatGroupsWhereInput> | null
}, "id">

export type ChatGroupMembersOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  chatGroupId?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ChatGroupMembersCountOrderByAggregateInput
  _avg?: Prisma.ChatGroupMembersAvgOrderByAggregateInput
  _max?: Prisma.ChatGroupMembersMaxOrderByAggregateInput
  _min?: Prisma.ChatGroupMembersMinOrderByAggregateInput
  _sum?: Prisma.ChatGroupMembersSumOrderByAggregateInput
}

export type ChatGroupMembersScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChatGroupMembersScalarWhereWithAggregatesInput | Prisma.ChatGroupMembersScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChatGroupMembersScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChatGroupMembersScalarWhereWithAggregatesInput | Prisma.ChatGroupMembersScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ChatGroupMembers"> | number
  userId?: Prisma.IntNullableWithAggregatesFilter<"ChatGroupMembers"> | number | null
  chatGroupId?: Prisma.IntNullableWithAggregatesFilter<"ChatGroupMembers"> | number | null
  deletedBy?: Prisma.IntWithAggregatesFilter<"ChatGroupMembers"> | number
  isDeleted?: Prisma.BoolWithAggregatesFilter<"ChatGroupMembers"> | boolean
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"ChatGroupMembers"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ChatGroupMembers"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ChatGroupMembers"> | Date | string
}

export type ChatGroupMembersCreateInput = {
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Users?: Prisma.UsersCreateNestedOneWithoutChatGroupMembersInput
  ChatGroups?: Prisma.ChatGroupsCreateNestedOneWithoutChatGroupMembersInput
}

export type ChatGroupMembersUncheckedCreateInput = {
  id?: number
  userId?: number | null
  chatGroupId?: number | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatGroupMembersUpdateInput = {
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Users?: Prisma.UsersUpdateOneWithoutChatGroupMembersNestedInput
  ChatGroups?: Prisma.ChatGroupsUpdateOneWithoutChatGroupMembersNestedInput
}

export type ChatGroupMembersUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  chatGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatGroupMembersCreateManyInput = {
  id?: number
  userId?: number | null
  chatGroupId?: number | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatGroupMembersUpdateManyMutationInput = {
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatGroupMembersUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  chatGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatGroupMembersCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  chatGroupId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChatGroupMembersAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  chatGroupId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type ChatGroupMembersMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  chatGroupId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChatGroupMembersMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  chatGroupId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChatGroupMembersSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  chatGroupId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type ChatGroupMembersListRelationFilter = {
  every?: Prisma.ChatGroupMembersWhereInput
  some?: Prisma.ChatGroupMembersWhereInput
  none?: Prisma.ChatGroupMembersWhereInput
}

export type ChatGroupMembersOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type ChatGroupMembersCreateNestedManyWithoutChatGroupsInput = {
  create?: Prisma.XOR<Prisma.ChatGroupMembersCreateWithoutChatGroupsInput, Prisma.ChatGroupMembersUncheckedCreateWithoutChatGroupsInput> | Prisma.ChatGroupMembersCreateWithoutChatGroupsInput[] | Prisma.ChatGroupMembersUncheckedCreateWithoutChatGroupsInput[]
  connectOrCreate?: Prisma.ChatGroupMembersCreateOrConnectWithoutChatGroupsInput | Prisma.ChatGroupMembersCreateOrConnectWithoutChatGroupsInput[]
  createMany?: Prisma.ChatGroupMembersCreateManyChatGroupsInputEnvelope
  connect?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
}

export type ChatGroupMembersUncheckedCreateNestedManyWithoutChatGroupsInput = {
  create?: Prisma.XOR<Prisma.ChatGroupMembersCreateWithoutChatGroupsInput, Prisma.ChatGroupMembersUncheckedCreateWithoutChatGroupsInput> | Prisma.ChatGroupMembersCreateWithoutChatGroupsInput[] | Prisma.ChatGroupMembersUncheckedCreateWithoutChatGroupsInput[]
  connectOrCreate?: Prisma.ChatGroupMembersCreateOrConnectWithoutChatGroupsInput | Prisma.ChatGroupMembersCreateOrConnectWithoutChatGroupsInput[]
  createMany?: Prisma.ChatGroupMembersCreateManyChatGroupsInputEnvelope
  connect?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
}

export type ChatGroupMembersUpdateManyWithoutChatGroupsNestedInput = {
  create?: Prisma.XOR<Prisma.ChatGroupMembersCreateWithoutChatGroupsInput, Prisma.ChatGroupMembersUncheckedCreateWithoutChatGroupsInput> | Prisma.ChatGroupMembersCreateWithoutChatGroupsInput[] | Prisma.ChatGroupMembersUncheckedCreateWithoutChatGroupsInput[]
  connectOrCreate?: Prisma.ChatGroupMembersCreateOrConnectWithoutChatGroupsInput | Prisma.ChatGroupMembersCreateOrConnectWithoutChatGroupsInput[]
  upsert?: Prisma.ChatGroupMembersUpsertWithWhereUniqueWithoutChatGroupsInput | Prisma.ChatGroupMembersUpsertWithWhereUniqueWithoutChatGroupsInput[]
  createMany?: Prisma.ChatGroupMembersCreateManyChatGroupsInputEnvelope
  set?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  disconnect?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  delete?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  connect?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  update?: Prisma.ChatGroupMembersUpdateWithWhereUniqueWithoutChatGroupsInput | Prisma.ChatGroupMembersUpdateWithWhereUniqueWithoutChatGroupsInput[]
  updateMany?: Prisma.ChatGroupMembersUpdateManyWithWhereWithoutChatGroupsInput | Prisma.ChatGroupMembersUpdateManyWithWhereWithoutChatGroupsInput[]
  deleteMany?: Prisma.ChatGroupMembersScalarWhereInput | Prisma.ChatGroupMembersScalarWhereInput[]
}

export type ChatGroupMembersUncheckedUpdateManyWithoutChatGroupsNestedInput = {
  create?: Prisma.XOR<Prisma.ChatGroupMembersCreateWithoutChatGroupsInput, Prisma.ChatGroupMembersUncheckedCreateWithoutChatGroupsInput> | Prisma.ChatGroupMembersCreateWithoutChatGroupsInput[] | Prisma.ChatGroupMembersUncheckedCreateWithoutChatGroupsInput[]
  connectOrCreate?: Prisma.ChatGroupMembersCreateOrConnectWithoutChatGroupsInput | Prisma.ChatGroupMembersCreateOrConnectWithoutChatGroupsInput[]
  upsert?: Prisma.ChatGroupMembersUpsertWithWhereUniqueWithoutChatGroupsInput | Prisma.ChatGroupMembersUpsertWithWhereUniqueWithoutChatGroupsInput[]
  createMany?: Prisma.ChatGroupMembersCreateManyChatGroupsInputEnvelope
  set?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  disconnect?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  delete?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  connect?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  update?: Prisma.ChatGroupMembersUpdateWithWhereUniqueWithoutChatGroupsInput | Prisma.ChatGroupMembersUpdateWithWhereUniqueWithoutChatGroupsInput[]
  updateMany?: Prisma.ChatGroupMembersUpdateManyWithWhereWithoutChatGroupsInput | Prisma.ChatGroupMembersUpdateManyWithWhereWithoutChatGroupsInput[]
  deleteMany?: Prisma.ChatGroupMembersScalarWhereInput | Prisma.ChatGroupMembersScalarWhereInput[]
}

export type ChatGroupMembersCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.ChatGroupMembersCreateWithoutUsersInput, Prisma.ChatGroupMembersUncheckedCreateWithoutUsersInput> | Prisma.ChatGroupMembersCreateWithoutUsersInput[] | Prisma.ChatGroupMembersUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatGroupMembersCreateOrConnectWithoutUsersInput | Prisma.ChatGroupMembersCreateOrConnectWithoutUsersInput[]
  createMany?: Prisma.ChatGroupMembersCreateManyUsersInputEnvelope
  connect?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
}

export type ChatGroupMembersUncheckedCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.ChatGroupMembersCreateWithoutUsersInput, Prisma.ChatGroupMembersUncheckedCreateWithoutUsersInput> | Prisma.ChatGroupMembersCreateWithoutUsersInput[] | Prisma.ChatGroupMembersUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatGroupMembersCreateOrConnectWithoutUsersInput | Prisma.ChatGroupMembersCreateOrConnectWithoutUsersInput[]
  createMany?: Prisma.ChatGroupMembersCreateManyUsersInputEnvelope
  connect?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
}

export type ChatGroupMembersUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.ChatGroupMembersCreateWithoutUsersInput, Prisma.ChatGroupMembersUncheckedCreateWithoutUsersInput> | Prisma.ChatGroupMembersCreateWithoutUsersInput[] | Prisma.ChatGroupMembersUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatGroupMembersCreateOrConnectWithoutUsersInput | Prisma.ChatGroupMembersCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.ChatGroupMembersUpsertWithWhereUniqueWithoutUsersInput | Prisma.ChatGroupMembersUpsertWithWhereUniqueWithoutUsersInput[]
  createMany?: Prisma.ChatGroupMembersCreateManyUsersInputEnvelope
  set?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  disconnect?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  delete?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  connect?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  update?: Prisma.ChatGroupMembersUpdateWithWhereUniqueWithoutUsersInput | Prisma.ChatGroupMembersUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.ChatGroupMembersUpdateManyWithWhereWithoutUsersInput | Prisma.ChatGroupMembersUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.ChatGroupMembersScalarWhereInput | Prisma.ChatGroupMembersScalarWhereInput[]
}

export type ChatGroupMembersUncheckedUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.ChatGroupMembersCreateWithoutUsersInput, Prisma.ChatGroupMembersUncheckedCreateWithoutUsersInput> | Prisma.ChatGroupMembersCreateWithoutUsersInput[] | Prisma.ChatGroupMembersUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatGroupMembersCreateOrConnectWithoutUsersInput | Prisma.ChatGroupMembersCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.ChatGroupMembersUpsertWithWhereUniqueWithoutUsersInput | Prisma.ChatGroupMembersUpsertWithWhereUniqueWithoutUsersInput[]
  createMany?: Prisma.ChatGroupMembersCreateManyUsersInputEnvelope
  set?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  disconnect?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  delete?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  connect?: Prisma.ChatGroupMembersWhereUniqueInput | Prisma.ChatGroupMembersWhereUniqueInput[]
  update?: Prisma.ChatGroupMembersUpdateWithWhereUniqueWithoutUsersInput | Prisma.ChatGroupMembersUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.ChatGroupMembersUpdateManyWithWhereWithoutUsersInput | Prisma.ChatGroupMembersUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.ChatGroupMembersScalarWhereInput | Prisma.ChatGroupMembersScalarWhereInput[]
}

export type ChatGroupMembersCreateWithoutChatGroupsInput = {
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Users?: Prisma.UsersCreateNestedOneWithoutChatGroupMembersInput
}

export type ChatGroupMembersUncheckedCreateWithoutChatGroupsInput = {
  id?: number
  userId?: number | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatGroupMembersCreateOrConnectWithoutChatGroupsInput = {
  where: Prisma.ChatGroupMembersWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatGroupMembersCreateWithoutChatGroupsInput, Prisma.ChatGroupMembersUncheckedCreateWithoutChatGroupsInput>
}

export type ChatGroupMembersCreateManyChatGroupsInputEnvelope = {
  data: Prisma.ChatGroupMembersCreateManyChatGroupsInput | Prisma.ChatGroupMembersCreateManyChatGroupsInput[]
  skipDuplicates?: boolean
}

export type ChatGroupMembersUpsertWithWhereUniqueWithoutChatGroupsInput = {
  where: Prisma.ChatGroupMembersWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatGroupMembersUpdateWithoutChatGroupsInput, Prisma.ChatGroupMembersUncheckedUpdateWithoutChatGroupsInput>
  create: Prisma.XOR<Prisma.ChatGroupMembersCreateWithoutChatGroupsInput, Prisma.ChatGroupMembersUncheckedCreateWithoutChatGroupsInput>
}

export type ChatGroupMembersUpdateWithWhereUniqueWithoutChatGroupsInput = {
  where: Prisma.ChatGroupMembersWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatGroupMembersUpdateWithoutChatGroupsInput, Prisma.ChatGroupMembersUncheckedUpdateWithoutChatGroupsInput>
}

export type ChatGroupMembersUpdateManyWithWhereWithoutChatGroupsInput = {
  where: Prisma.ChatGroupMembersScalarWhereInput
  data: Prisma.XOR<Prisma.ChatGroupMembersUpdateManyMutationInput, Prisma.ChatGroupMembersUncheckedUpdateManyWithoutChatGroupsInput>
}

export type ChatGroupMembersScalarWhereInput = {
  AND?: Prisma.ChatGroupMembersScalarWhereInput | Prisma.ChatGroupMembersScalarWhereInput[]
  OR?: Prisma.ChatGroupMembersScalarWhereInput[]
  NOT?: Prisma.ChatGroupMembersScalarWhereInput | Prisma.ChatGroupMembersScalarWhereInput[]
  id?: Prisma.IntFilter<"ChatGroupMembers"> | number
  userId?: Prisma.IntNullableFilter<"ChatGroupMembers"> | number | null
  chatGroupId?: Prisma.IntNullableFilter<"ChatGroupMembers"> | number | null
  deletedBy?: Prisma.IntFilter<"ChatGroupMembers"> | number
  isDeleted?: Prisma.BoolFilter<"ChatGroupMembers"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"ChatGroupMembers"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"ChatGroupMembers"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChatGroupMembers"> | Date | string
}

export type ChatGroupMembersCreateWithoutUsersInput = {
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroups?: Prisma.ChatGroupsCreateNestedOneWithoutChatGroupMembersInput
}

export type ChatGroupMembersUncheckedCreateWithoutUsersInput = {
  id?: number
  chatGroupId?: number | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatGroupMembersCreateOrConnectWithoutUsersInput = {
  where: Prisma.ChatGroupMembersWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatGroupMembersCreateWithoutUsersInput, Prisma.ChatGroupMembersUncheckedCreateWithoutUsersInput>
}

export type ChatGroupMembersCreateManyUsersInputEnvelope = {
  data: Prisma.ChatGroupMembersCreateManyUsersInput | Prisma.ChatGroupMembersCreateManyUsersInput[]
  skipDuplicates?: boolean
}

export type ChatGroupMembersUpsertWithWhereUniqueWithoutUsersInput = {
  where: Prisma.ChatGroupMembersWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatGroupMembersUpdateWithoutUsersInput, Prisma.ChatGroupMembersUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.ChatGroupMembersCreateWithoutUsersInput, Prisma.ChatGroupMembersUncheckedCreateWithoutUsersInput>
}

export type ChatGroupMembersUpdateWithWhereUniqueWithoutUsersInput = {
  where: Prisma.ChatGroupMembersWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatGroupMembersUpdateWithoutUsersInput, Prisma.ChatGroupMembersUncheckedUpdateWithoutUsersInput>
}

export type ChatGroupMembersUpdateManyWithWhereWithoutUsersInput = {
  where: Prisma.ChatGroupMembersScalarWhereInput
  data: Prisma.XOR<Prisma.ChatGroupMembersUpdateManyMutationInput, Prisma.ChatGroupMembersUncheckedUpdateManyWithoutUsersInput>
}

export type ChatGroupMembersCreateManyChatGroupsInput = {
  id?: number
  userId?: number | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatGroupMembersUpdateWithoutChatGroupsInput = {
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Users?: Prisma.UsersUpdateOneWithoutChatGroupMembersNestedInput
}

export type ChatGroupMembersUncheckedUpdateWithoutChatGroupsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatGroupMembersUncheckedUpdateManyWithoutChatGroupsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatGroupMembersCreateManyUsersInput = {
  id?: number
  chatGroupId?: number | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatGroupMembersUpdateWithoutUsersInput = {
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroups?: Prisma.ChatGroupsUpdateOneWithoutChatGroupMembersNestedInput
}

export type ChatGroupMembersUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  chatGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatGroupMembersUncheckedUpdateManyWithoutUsersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  chatGroupId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ChatGroupMembersSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  chatGroupId?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Users?: boolean | Prisma.ChatGroupMembers$UsersArgs<ExtArgs>
  ChatGroups?: boolean | Prisma.ChatGroupMembers$ChatGroupsArgs<ExtArgs>
}, ExtArgs["result"]["chatGroupMembers"]>



export type ChatGroupMembersSelectScalar = {
  id?: boolean
  userId?: boolean
  chatGroupId?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ChatGroupMembersOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "chatGroupId" | "deletedBy" | "isDeleted" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["chatGroupMembers"]>
export type ChatGroupMembersInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Users?: boolean | Prisma.ChatGroupMembers$UsersArgs<ExtArgs>
  ChatGroups?: boolean | Prisma.ChatGroupMembers$ChatGroupsArgs<ExtArgs>
}

export type $ChatGroupMembersPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ChatGroupMembers"
  objects: {
    Users: Prisma.$UsersPayload<ExtArgs> | null
    ChatGroups: Prisma.$ChatGroupsPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    userId: number | null
    chatGroupId: number | null
    deletedBy: number
    isDeleted: boolean
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["chatGroupMembers"]>
  composites: {}
}

export type ChatGroupMembersGetPayload<S extends boolean | null | undefined | ChatGroupMembersDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChatGroupMembersPayload, S>

export type ChatGroupMembersCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChatGroupMembersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChatGroupMembersCountAggregateInputType | true
  }

export interface ChatGroupMembersDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatGroupMembers'], meta: { name: 'ChatGroupMembers' } }
  /**
   * Find zero or one ChatGroupMembers that matches the filter.
   * @param {ChatGroupMembersFindUniqueArgs} args - Arguments to find a ChatGroupMembers
   * @example
   * // Get one ChatGroupMembers
   * const chatGroupMembers = await prisma.chatGroupMembers.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChatGroupMembersFindUniqueArgs>(args: Prisma.SelectSubset<T, ChatGroupMembersFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChatGroupMembersClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupMembersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ChatGroupMembers that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChatGroupMembersFindUniqueOrThrowArgs} args - Arguments to find a ChatGroupMembers
   * @example
   * // Get one ChatGroupMembers
   * const chatGroupMembers = await prisma.chatGroupMembers.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChatGroupMembersFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChatGroupMembersFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatGroupMembersClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupMembersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatGroupMembers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupMembersFindFirstArgs} args - Arguments to find a ChatGroupMembers
   * @example
   * // Get one ChatGroupMembers
   * const chatGroupMembers = await prisma.chatGroupMembers.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChatGroupMembersFindFirstArgs>(args?: Prisma.SelectSubset<T, ChatGroupMembersFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChatGroupMembersClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupMembersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatGroupMembers that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupMembersFindFirstOrThrowArgs} args - Arguments to find a ChatGroupMembers
   * @example
   * // Get one ChatGroupMembers
   * const chatGroupMembers = await prisma.chatGroupMembers.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChatGroupMembersFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChatGroupMembersFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatGroupMembersClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupMembersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ChatGroupMembers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupMembersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChatGroupMembers
   * const chatGroupMembers = await prisma.chatGroupMembers.findMany()
   * 
   * // Get first 10 ChatGroupMembers
   * const chatGroupMembers = await prisma.chatGroupMembers.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chatGroupMembersWithIdOnly = await prisma.chatGroupMembers.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChatGroupMembersFindManyArgs>(args?: Prisma.SelectSubset<T, ChatGroupMembersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatGroupMembersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ChatGroupMembers.
   * @param {ChatGroupMembersCreateArgs} args - Arguments to create a ChatGroupMembers.
   * @example
   * // Create one ChatGroupMembers
   * const ChatGroupMembers = await prisma.chatGroupMembers.create({
   *   data: {
   *     // ... data to create a ChatGroupMembers
   *   }
   * })
   * 
   */
  create<T extends ChatGroupMembersCreateArgs>(args: Prisma.SelectSubset<T, ChatGroupMembersCreateArgs<ExtArgs>>): Prisma.Prisma__ChatGroupMembersClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupMembersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ChatGroupMembers.
   * @param {ChatGroupMembersCreateManyArgs} args - Arguments to create many ChatGroupMembers.
   * @example
   * // Create many ChatGroupMembers
   * const chatGroupMembers = await prisma.chatGroupMembers.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChatGroupMembersCreateManyArgs>(args?: Prisma.SelectSubset<T, ChatGroupMembersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a ChatGroupMembers.
   * @param {ChatGroupMembersDeleteArgs} args - Arguments to delete one ChatGroupMembers.
   * @example
   * // Delete one ChatGroupMembers
   * const ChatGroupMembers = await prisma.chatGroupMembers.delete({
   *   where: {
   *     // ... filter to delete one ChatGroupMembers
   *   }
   * })
   * 
   */
  delete<T extends ChatGroupMembersDeleteArgs>(args: Prisma.SelectSubset<T, ChatGroupMembersDeleteArgs<ExtArgs>>): Prisma.Prisma__ChatGroupMembersClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupMembersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ChatGroupMembers.
   * @param {ChatGroupMembersUpdateArgs} args - Arguments to update one ChatGroupMembers.
   * @example
   * // Update one ChatGroupMembers
   * const chatGroupMembers = await prisma.chatGroupMembers.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChatGroupMembersUpdateArgs>(args: Prisma.SelectSubset<T, ChatGroupMembersUpdateArgs<ExtArgs>>): Prisma.Prisma__ChatGroupMembersClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupMembersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ChatGroupMembers.
   * @param {ChatGroupMembersDeleteManyArgs} args - Arguments to filter ChatGroupMembers to delete.
   * @example
   * // Delete a few ChatGroupMembers
   * const { count } = await prisma.chatGroupMembers.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChatGroupMembersDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChatGroupMembersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatGroupMembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupMembersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChatGroupMembers
   * const chatGroupMembers = await prisma.chatGroupMembers.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChatGroupMembersUpdateManyArgs>(args: Prisma.SelectSubset<T, ChatGroupMembersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one ChatGroupMembers.
   * @param {ChatGroupMembersUpsertArgs} args - Arguments to update or create a ChatGroupMembers.
   * @example
   * // Update or create a ChatGroupMembers
   * const chatGroupMembers = await prisma.chatGroupMembers.upsert({
   *   create: {
   *     // ... data to create a ChatGroupMembers
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ChatGroupMembers we want to update
   *   }
   * })
   */
  upsert<T extends ChatGroupMembersUpsertArgs>(args: Prisma.SelectSubset<T, ChatGroupMembersUpsertArgs<ExtArgs>>): Prisma.Prisma__ChatGroupMembersClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupMembersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ChatGroupMembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupMembersCountArgs} args - Arguments to filter ChatGroupMembers to count.
   * @example
   * // Count the number of ChatGroupMembers
   * const count = await prisma.chatGroupMembers.count({
   *   where: {
   *     // ... the filter for the ChatGroupMembers we want to count
   *   }
   * })
  **/
  count<T extends ChatGroupMembersCountArgs>(
    args?: Prisma.Subset<T, ChatGroupMembersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChatGroupMembersCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ChatGroupMembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupMembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChatGroupMembersAggregateArgs>(args: Prisma.Subset<T, ChatGroupMembersAggregateArgs>): Prisma.PrismaPromise<GetChatGroupMembersAggregateType<T>>

  /**
   * Group by ChatGroupMembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupMembersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChatGroupMembersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChatGroupMembersGroupByArgs['orderBy'] }
      : { orderBy?: ChatGroupMembersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChatGroupMembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupMembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ChatGroupMembers model
 */
readonly fields: ChatGroupMembersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ChatGroupMembers.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChatGroupMembersClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Users<T extends Prisma.ChatGroupMembers$UsersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatGroupMembers$UsersArgs<ExtArgs>>): Prisma.Prisma__UsersClient<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  ChatGroups<T extends Prisma.ChatGroupMembers$ChatGroupsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatGroupMembers$ChatGroupsArgs<ExtArgs>>): Prisma.Prisma__ChatGroupsClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ChatGroupMembers model
 */
export interface ChatGroupMembersFieldRefs {
  readonly id: Prisma.FieldRef<"ChatGroupMembers", 'Int'>
  readonly userId: Prisma.FieldRef<"ChatGroupMembers", 'Int'>
  readonly chatGroupId: Prisma.FieldRef<"ChatGroupMembers", 'Int'>
  readonly deletedBy: Prisma.FieldRef<"ChatGroupMembers", 'Int'>
  readonly isDeleted: Prisma.FieldRef<"ChatGroupMembers", 'Boolean'>
  readonly deletedAt: Prisma.FieldRef<"ChatGroupMembers", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"ChatGroupMembers", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ChatGroupMembers", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ChatGroupMembers findUnique
 */
export type ChatGroupMembersFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroupMembers
   */
  select?: Prisma.ChatGroupMembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroupMembers
   */
  omit?: Prisma.ChatGroupMembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupMembersInclude<ExtArgs> | null
  /**
   * Filter, which ChatGroupMembers to fetch.
   */
  where: Prisma.ChatGroupMembersWhereUniqueInput
}

/**
 * ChatGroupMembers findUniqueOrThrow
 */
export type ChatGroupMembersFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroupMembers
   */
  select?: Prisma.ChatGroupMembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroupMembers
   */
  omit?: Prisma.ChatGroupMembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupMembersInclude<ExtArgs> | null
  /**
   * Filter, which ChatGroupMembers to fetch.
   */
  where: Prisma.ChatGroupMembersWhereUniqueInput
}

/**
 * ChatGroupMembers findFirst
 */
export type ChatGroupMembersFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroupMembers
   */
  select?: Prisma.ChatGroupMembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroupMembers
   */
  omit?: Prisma.ChatGroupMembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupMembersInclude<ExtArgs> | null
  /**
   * Filter, which ChatGroupMembers to fetch.
   */
  where?: Prisma.ChatGroupMembersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatGroupMembers to fetch.
   */
  orderBy?: Prisma.ChatGroupMembersOrderByWithRelationInput | Prisma.ChatGroupMembersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatGroupMembers.
   */
  cursor?: Prisma.ChatGroupMembersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatGroupMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatGroupMembers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatGroupMembers.
   */
  distinct?: Prisma.ChatGroupMembersScalarFieldEnum | Prisma.ChatGroupMembersScalarFieldEnum[]
}

/**
 * ChatGroupMembers findFirstOrThrow
 */
export type ChatGroupMembersFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroupMembers
   */
  select?: Prisma.ChatGroupMembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroupMembers
   */
  omit?: Prisma.ChatGroupMembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupMembersInclude<ExtArgs> | null
  /**
   * Filter, which ChatGroupMembers to fetch.
   */
  where?: Prisma.ChatGroupMembersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatGroupMembers to fetch.
   */
  orderBy?: Prisma.ChatGroupMembersOrderByWithRelationInput | Prisma.ChatGroupMembersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatGroupMembers.
   */
  cursor?: Prisma.ChatGroupMembersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatGroupMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatGroupMembers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatGroupMembers.
   */
  distinct?: Prisma.ChatGroupMembersScalarFieldEnum | Prisma.ChatGroupMembersScalarFieldEnum[]
}

/**
 * ChatGroupMembers findMany
 */
export type ChatGroupMembersFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroupMembers
   */
  select?: Prisma.ChatGroupMembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroupMembers
   */
  omit?: Prisma.ChatGroupMembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupMembersInclude<ExtArgs> | null
  /**
   * Filter, which ChatGroupMembers to fetch.
   */
  where?: Prisma.ChatGroupMembersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatGroupMembers to fetch.
   */
  orderBy?: Prisma.ChatGroupMembersOrderByWithRelationInput | Prisma.ChatGroupMembersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ChatGroupMembers.
   */
  cursor?: Prisma.ChatGroupMembersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatGroupMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatGroupMembers.
   */
  skip?: number
  distinct?: Prisma.ChatGroupMembersScalarFieldEnum | Prisma.ChatGroupMembersScalarFieldEnum[]
}

/**
 * ChatGroupMembers create
 */
export type ChatGroupMembersCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroupMembers
   */
  select?: Prisma.ChatGroupMembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroupMembers
   */
  omit?: Prisma.ChatGroupMembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupMembersInclude<ExtArgs> | null
  /**
   * The data needed to create a ChatGroupMembers.
   */
  data?: Prisma.XOR<Prisma.ChatGroupMembersCreateInput, Prisma.ChatGroupMembersUncheckedCreateInput>
}

/**
 * ChatGroupMembers createMany
 */
export type ChatGroupMembersCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ChatGroupMembers.
   */
  data: Prisma.ChatGroupMembersCreateManyInput | Prisma.ChatGroupMembersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ChatGroupMembers update
 */
export type ChatGroupMembersUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroupMembers
   */
  select?: Prisma.ChatGroupMembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroupMembers
   */
  omit?: Prisma.ChatGroupMembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupMembersInclude<ExtArgs> | null
  /**
   * The data needed to update a ChatGroupMembers.
   */
  data: Prisma.XOR<Prisma.ChatGroupMembersUpdateInput, Prisma.ChatGroupMembersUncheckedUpdateInput>
  /**
   * Choose, which ChatGroupMembers to update.
   */
  where: Prisma.ChatGroupMembersWhereUniqueInput
}

/**
 * ChatGroupMembers updateMany
 */
export type ChatGroupMembersUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ChatGroupMembers.
   */
  data: Prisma.XOR<Prisma.ChatGroupMembersUpdateManyMutationInput, Prisma.ChatGroupMembersUncheckedUpdateManyInput>
  /**
   * Filter which ChatGroupMembers to update
   */
  where?: Prisma.ChatGroupMembersWhereInput
  /**
   * Limit how many ChatGroupMembers to update.
   */
  limit?: number
}

/**
 * ChatGroupMembers upsert
 */
export type ChatGroupMembersUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroupMembers
   */
  select?: Prisma.ChatGroupMembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroupMembers
   */
  omit?: Prisma.ChatGroupMembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupMembersInclude<ExtArgs> | null
  /**
   * The filter to search for the ChatGroupMembers to update in case it exists.
   */
  where: Prisma.ChatGroupMembersWhereUniqueInput
  /**
   * In case the ChatGroupMembers found by the `where` argument doesn't exist, create a new ChatGroupMembers with this data.
   */
  create: Prisma.XOR<Prisma.ChatGroupMembersCreateInput, Prisma.ChatGroupMembersUncheckedCreateInput>
  /**
   * In case the ChatGroupMembers was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChatGroupMembersUpdateInput, Prisma.ChatGroupMembersUncheckedUpdateInput>
}

/**
 * ChatGroupMembers delete
 */
export type ChatGroupMembersDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroupMembers
   */
  select?: Prisma.ChatGroupMembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroupMembers
   */
  omit?: Prisma.ChatGroupMembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupMembersInclude<ExtArgs> | null
  /**
   * Filter which ChatGroupMembers to delete.
   */
  where: Prisma.ChatGroupMembersWhereUniqueInput
}

/**
 * ChatGroupMembers deleteMany
 */
export type ChatGroupMembersDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatGroupMembers to delete
   */
  where?: Prisma.ChatGroupMembersWhereInput
  /**
   * Limit how many ChatGroupMembers to delete.
   */
  limit?: number
}

/**
 * ChatGroupMembers.Users
 */
export type ChatGroupMembers$UsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Users
   */
  select?: Prisma.UsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Users
   */
  omit?: Prisma.UsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersInclude<ExtArgs> | null
  where?: Prisma.UsersWhereInput
}

/**
 * ChatGroupMembers.ChatGroups
 */
export type ChatGroupMembers$ChatGroupsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroups
   */
  select?: Prisma.ChatGroupsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroups
   */
  omit?: Prisma.ChatGroupsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupsInclude<ExtArgs> | null
  where?: Prisma.ChatGroupsWhereInput
}

/**
 * ChatGroupMembers without action
 */
export type ChatGroupMembersDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroupMembers
   */
  select?: Prisma.ChatGroupMembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroupMembers
   */
  omit?: Prisma.ChatGroupMembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupMembersInclude<ExtArgs> | null
}
