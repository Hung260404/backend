
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Chats` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Chats
 * 
 */
export type ChatsModel = runtime.Types.Result.DefaultSelection<Prisma.$ChatsPayload>

export type AggregateChats = {
  _count: ChatsCountAggregateOutputType | null
  _avg: ChatsAvgAggregateOutputType | null
  _sum: ChatsSumAggregateOutputType | null
  _min: ChatsMinAggregateOutputType | null
  _max: ChatsMaxAggregateOutputType | null
}

export type ChatsAvgAggregateOutputType = {
  id: number | null
  userId: number | null
  deletedBy: number | null
}

export type ChatsSumAggregateOutputType = {
  id: number | null
  userId: number | null
  deletedBy: number | null
}

export type ChatsMinAggregateOutputType = {
  id: number | null
  message: string | null
  userId: number | null
  roomId: string | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ChatsMaxAggregateOutputType = {
  id: number | null
  message: string | null
  userId: number | null
  roomId: string | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ChatsCountAggregateOutputType = {
  id: number
  message: number
  userId: number
  roomId: number
  deletedBy: number
  isDeleted: number
  deletedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ChatsAvgAggregateInputType = {
  id?: true
  userId?: true
  deletedBy?: true
}

export type ChatsSumAggregateInputType = {
  id?: true
  userId?: true
  deletedBy?: true
}

export type ChatsMinAggregateInputType = {
  id?: true
  message?: true
  userId?: true
  roomId?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ChatsMaxAggregateInputType = {
  id?: true
  message?: true
  userId?: true
  roomId?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ChatsCountAggregateInputType = {
  id?: true
  message?: true
  userId?: true
  roomId?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ChatsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Chats to aggregate.
   */
  where?: Prisma.ChatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chats to fetch.
   */
  orderBy?: Prisma.ChatsOrderByWithRelationInput | Prisma.ChatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Chats
  **/
  _count?: true | ChatsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ChatsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ChatsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChatsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChatsMaxAggregateInputType
}

export type GetChatsAggregateType<T extends ChatsAggregateArgs> = {
      [P in keyof T & keyof AggregateChats]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChats[P]>
    : Prisma.GetScalarType<T[P], AggregateChats[P]>
}




export type ChatsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatsWhereInput
  orderBy?: Prisma.ChatsOrderByWithAggregationInput | Prisma.ChatsOrderByWithAggregationInput[]
  by: Prisma.ChatsScalarFieldEnum[] | Prisma.ChatsScalarFieldEnum
  having?: Prisma.ChatsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChatsCountAggregateInputType | true
  _avg?: ChatsAvgAggregateInputType
  _sum?: ChatsSumAggregateInputType
  _min?: ChatsMinAggregateInputType
  _max?: ChatsMaxAggregateInputType
}

export type ChatsGroupByOutputType = {
  id: number
  message: string | null
  userId: number
  roomId: string
  deletedBy: number
  isDeleted: boolean
  deletedAt: Date | null
  createdAt: Date
  updatedAt: Date
  _count: ChatsCountAggregateOutputType | null
  _avg: ChatsAvgAggregateOutputType | null
  _sum: ChatsSumAggregateOutputType | null
  _min: ChatsMinAggregateOutputType | null
  _max: ChatsMaxAggregateOutputType | null
}

type GetChatsGroupByPayload<T extends ChatsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChatsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChatsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChatsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChatsGroupByOutputType[P]>
      }
    >
  >



export type ChatsWhereInput = {
  AND?: Prisma.ChatsWhereInput | Prisma.ChatsWhereInput[]
  OR?: Prisma.ChatsWhereInput[]
  NOT?: Prisma.ChatsWhereInput | Prisma.ChatsWhereInput[]
  id?: Prisma.IntFilter<"Chats"> | number
  message?: Prisma.StringNullableFilter<"Chats"> | string | null
  userId?: Prisma.IntFilter<"Chats"> | number
  roomId?: Prisma.StringFilter<"Chats"> | string
  deletedBy?: Prisma.IntFilter<"Chats"> | number
  isDeleted?: Prisma.BoolFilter<"Chats"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"Chats"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Chats"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Chats"> | Date | string
  Users?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.UsersWhereInput>
}

export type ChatsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  message?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  Users?: Prisma.UsersOrderByWithRelationInput
  _relevance?: Prisma.ChatsOrderByRelevanceInput
}

export type ChatsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ChatsWhereInput | Prisma.ChatsWhereInput[]
  OR?: Prisma.ChatsWhereInput[]
  NOT?: Prisma.ChatsWhereInput | Prisma.ChatsWhereInput[]
  message?: Prisma.StringNullableFilter<"Chats"> | string | null
  userId?: Prisma.IntFilter<"Chats"> | number
  roomId?: Prisma.StringFilter<"Chats"> | string
  deletedBy?: Prisma.IntFilter<"Chats"> | number
  isDeleted?: Prisma.BoolFilter<"Chats"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"Chats"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Chats"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Chats"> | Date | string
  Users?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.UsersWhereInput>
}, "id">

export type ChatsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  message?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ChatsCountOrderByAggregateInput
  _avg?: Prisma.ChatsAvgOrderByAggregateInput
  _max?: Prisma.ChatsMaxOrderByAggregateInput
  _min?: Prisma.ChatsMinOrderByAggregateInput
  _sum?: Prisma.ChatsSumOrderByAggregateInput
}

export type ChatsScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChatsScalarWhereWithAggregatesInput | Prisma.ChatsScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChatsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChatsScalarWhereWithAggregatesInput | Prisma.ChatsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Chats"> | number
  message?: Prisma.StringNullableWithAggregatesFilter<"Chats"> | string | null
  userId?: Prisma.IntWithAggregatesFilter<"Chats"> | number
  roomId?: Prisma.StringWithAggregatesFilter<"Chats"> | string
  deletedBy?: Prisma.IntWithAggregatesFilter<"Chats"> | number
  isDeleted?: Prisma.BoolWithAggregatesFilter<"Chats"> | boolean
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Chats"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Chats"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Chats"> | Date | string
}

export type ChatsCreateInput = {
  message?: string | null
  roomId: string
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Users: Prisma.UsersCreateNestedOneWithoutChatsInput
}

export type ChatsUncheckedCreateInput = {
  id?: number
  message?: string | null
  userId: number
  roomId: string
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatsUpdateInput = {
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Users?: Prisma.UsersUpdateOneRequiredWithoutChatsNestedInput
}

export type ChatsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatsCreateManyInput = {
  id?: number
  message?: string | null
  userId: number
  roomId: string
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatsUpdateManyMutationInput = {
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatsOrderByRelevanceInput = {
  fields: Prisma.ChatsOrderByRelevanceFieldEnum | Prisma.ChatsOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ChatsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChatsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type ChatsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChatsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  message?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChatsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type ChatsListRelationFilter = {
  every?: Prisma.ChatsWhereInput
  some?: Prisma.ChatsWhereInput
  none?: Prisma.ChatsWhereInput
}

export type ChatsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type ChatsCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.ChatsCreateWithoutUsersInput, Prisma.ChatsUncheckedCreateWithoutUsersInput> | Prisma.ChatsCreateWithoutUsersInput[] | Prisma.ChatsUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatsCreateOrConnectWithoutUsersInput | Prisma.ChatsCreateOrConnectWithoutUsersInput[]
  createMany?: Prisma.ChatsCreateManyUsersInputEnvelope
  connect?: Prisma.ChatsWhereUniqueInput | Prisma.ChatsWhereUniqueInput[]
}

export type ChatsUncheckedCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.ChatsCreateWithoutUsersInput, Prisma.ChatsUncheckedCreateWithoutUsersInput> | Prisma.ChatsCreateWithoutUsersInput[] | Prisma.ChatsUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatsCreateOrConnectWithoutUsersInput | Prisma.ChatsCreateOrConnectWithoutUsersInput[]
  createMany?: Prisma.ChatsCreateManyUsersInputEnvelope
  connect?: Prisma.ChatsWhereUniqueInput | Prisma.ChatsWhereUniqueInput[]
}

export type ChatsUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.ChatsCreateWithoutUsersInput, Prisma.ChatsUncheckedCreateWithoutUsersInput> | Prisma.ChatsCreateWithoutUsersInput[] | Prisma.ChatsUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatsCreateOrConnectWithoutUsersInput | Prisma.ChatsCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.ChatsUpsertWithWhereUniqueWithoutUsersInput | Prisma.ChatsUpsertWithWhereUniqueWithoutUsersInput[]
  createMany?: Prisma.ChatsCreateManyUsersInputEnvelope
  set?: Prisma.ChatsWhereUniqueInput | Prisma.ChatsWhereUniqueInput[]
  disconnect?: Prisma.ChatsWhereUniqueInput | Prisma.ChatsWhereUniqueInput[]
  delete?: Prisma.ChatsWhereUniqueInput | Prisma.ChatsWhereUniqueInput[]
  connect?: Prisma.ChatsWhereUniqueInput | Prisma.ChatsWhereUniqueInput[]
  update?: Prisma.ChatsUpdateWithWhereUniqueWithoutUsersInput | Prisma.ChatsUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.ChatsUpdateManyWithWhereWithoutUsersInput | Prisma.ChatsUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.ChatsScalarWhereInput | Prisma.ChatsScalarWhereInput[]
}

export type ChatsUncheckedUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.ChatsCreateWithoutUsersInput, Prisma.ChatsUncheckedCreateWithoutUsersInput> | Prisma.ChatsCreateWithoutUsersInput[] | Prisma.ChatsUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatsCreateOrConnectWithoutUsersInput | Prisma.ChatsCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.ChatsUpsertWithWhereUniqueWithoutUsersInput | Prisma.ChatsUpsertWithWhereUniqueWithoutUsersInput[]
  createMany?: Prisma.ChatsCreateManyUsersInputEnvelope
  set?: Prisma.ChatsWhereUniqueInput | Prisma.ChatsWhereUniqueInput[]
  disconnect?: Prisma.ChatsWhereUniqueInput | Prisma.ChatsWhereUniqueInput[]
  delete?: Prisma.ChatsWhereUniqueInput | Prisma.ChatsWhereUniqueInput[]
  connect?: Prisma.ChatsWhereUniqueInput | Prisma.ChatsWhereUniqueInput[]
  update?: Prisma.ChatsUpdateWithWhereUniqueWithoutUsersInput | Prisma.ChatsUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.ChatsUpdateManyWithWhereWithoutUsersInput | Prisma.ChatsUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.ChatsScalarWhereInput | Prisma.ChatsScalarWhereInput[]
}

export type ChatsCreateWithoutUsersInput = {
  message?: string | null
  roomId: string
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatsUncheckedCreateWithoutUsersInput = {
  id?: number
  message?: string | null
  roomId: string
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatsCreateOrConnectWithoutUsersInput = {
  where: Prisma.ChatsWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatsCreateWithoutUsersInput, Prisma.ChatsUncheckedCreateWithoutUsersInput>
}

export type ChatsCreateManyUsersInputEnvelope = {
  data: Prisma.ChatsCreateManyUsersInput | Prisma.ChatsCreateManyUsersInput[]
  skipDuplicates?: boolean
}

export type ChatsUpsertWithWhereUniqueWithoutUsersInput = {
  where: Prisma.ChatsWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatsUpdateWithoutUsersInput, Prisma.ChatsUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.ChatsCreateWithoutUsersInput, Prisma.ChatsUncheckedCreateWithoutUsersInput>
}

export type ChatsUpdateWithWhereUniqueWithoutUsersInput = {
  where: Prisma.ChatsWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatsUpdateWithoutUsersInput, Prisma.ChatsUncheckedUpdateWithoutUsersInput>
}

export type ChatsUpdateManyWithWhereWithoutUsersInput = {
  where: Prisma.ChatsScalarWhereInput
  data: Prisma.XOR<Prisma.ChatsUpdateManyMutationInput, Prisma.ChatsUncheckedUpdateManyWithoutUsersInput>
}

export type ChatsScalarWhereInput = {
  AND?: Prisma.ChatsScalarWhereInput | Prisma.ChatsScalarWhereInput[]
  OR?: Prisma.ChatsScalarWhereInput[]
  NOT?: Prisma.ChatsScalarWhereInput | Prisma.ChatsScalarWhereInput[]
  id?: Prisma.IntFilter<"Chats"> | number
  message?: Prisma.StringNullableFilter<"Chats"> | string | null
  userId?: Prisma.IntFilter<"Chats"> | number
  roomId?: Prisma.StringFilter<"Chats"> | string
  deletedBy?: Prisma.IntFilter<"Chats"> | number
  isDeleted?: Prisma.BoolFilter<"Chats"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"Chats"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Chats"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Chats"> | Date | string
}

export type ChatsCreateManyUsersInput = {
  id?: number
  message?: string | null
  roomId: string
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatsUpdateWithoutUsersInput = {
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatsUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatsUncheckedUpdateManyWithoutUsersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  message?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  roomId?: Prisma.StringFieldUpdateOperationsInput | string
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ChatsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  message?: boolean
  userId?: boolean
  roomId?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Users?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chats"]>



export type ChatsSelectScalar = {
  id?: boolean
  message?: boolean
  userId?: boolean
  roomId?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ChatsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "message" | "userId" | "roomId" | "deletedBy" | "isDeleted" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["chats"]>
export type ChatsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Users?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
}

export type $ChatsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Chats"
  objects: {
    Users: Prisma.$UsersPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    message: string | null
    userId: number
    roomId: string
    deletedBy: number
    isDeleted: boolean
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["chats"]>
  composites: {}
}

export type ChatsGetPayload<S extends boolean | null | undefined | ChatsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChatsPayload, S>

export type ChatsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChatsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChatsCountAggregateInputType | true
  }

export interface ChatsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chats'], meta: { name: 'Chats' } }
  /**
   * Find zero or one Chats that matches the filter.
   * @param {ChatsFindUniqueArgs} args - Arguments to find a Chats
   * @example
   * // Get one Chats
   * const chats = await prisma.chats.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChatsFindUniqueArgs>(args: Prisma.SelectSubset<T, ChatsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChatsClient<runtime.Types.Result.GetResult<Prisma.$ChatsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Chats that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChatsFindUniqueOrThrowArgs} args - Arguments to find a Chats
   * @example
   * // Get one Chats
   * const chats = await prisma.chats.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChatsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatsClient<runtime.Types.Result.GetResult<Prisma.$ChatsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Chats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatsFindFirstArgs} args - Arguments to find a Chats
   * @example
   * // Get one Chats
   * const chats = await prisma.chats.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChatsFindFirstArgs>(args?: Prisma.SelectSubset<T, ChatsFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChatsClient<runtime.Types.Result.GetResult<Prisma.$ChatsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Chats that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatsFindFirstOrThrowArgs} args - Arguments to find a Chats
   * @example
   * // Get one Chats
   * const chats = await prisma.chats.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChatsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChatsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatsClient<runtime.Types.Result.GetResult<Prisma.$ChatsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Chats that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Chats
   * const chats = await prisma.chats.findMany()
   * 
   * // Get first 10 Chats
   * const chats = await prisma.chats.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chatsWithIdOnly = await prisma.chats.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChatsFindManyArgs>(args?: Prisma.SelectSubset<T, ChatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Chats.
   * @param {ChatsCreateArgs} args - Arguments to create a Chats.
   * @example
   * // Create one Chats
   * const Chats = await prisma.chats.create({
   *   data: {
   *     // ... data to create a Chats
   *   }
   * })
   * 
   */
  create<T extends ChatsCreateArgs>(args: Prisma.SelectSubset<T, ChatsCreateArgs<ExtArgs>>): Prisma.Prisma__ChatsClient<runtime.Types.Result.GetResult<Prisma.$ChatsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Chats.
   * @param {ChatsCreateManyArgs} args - Arguments to create many Chats.
   * @example
   * // Create many Chats
   * const chats = await prisma.chats.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChatsCreateManyArgs>(args?: Prisma.SelectSubset<T, ChatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Chats.
   * @param {ChatsDeleteArgs} args - Arguments to delete one Chats.
   * @example
   * // Delete one Chats
   * const Chats = await prisma.chats.delete({
   *   where: {
   *     // ... filter to delete one Chats
   *   }
   * })
   * 
   */
  delete<T extends ChatsDeleteArgs>(args: Prisma.SelectSubset<T, ChatsDeleteArgs<ExtArgs>>): Prisma.Prisma__ChatsClient<runtime.Types.Result.GetResult<Prisma.$ChatsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Chats.
   * @param {ChatsUpdateArgs} args - Arguments to update one Chats.
   * @example
   * // Update one Chats
   * const chats = await prisma.chats.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChatsUpdateArgs>(args: Prisma.SelectSubset<T, ChatsUpdateArgs<ExtArgs>>): Prisma.Prisma__ChatsClient<runtime.Types.Result.GetResult<Prisma.$ChatsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Chats.
   * @param {ChatsDeleteManyArgs} args - Arguments to filter Chats to delete.
   * @example
   * // Delete a few Chats
   * const { count } = await prisma.chats.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChatsDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Chats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Chats
   * const chats = await prisma.chats.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChatsUpdateManyArgs>(args: Prisma.SelectSubset<T, ChatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Chats.
   * @param {ChatsUpsertArgs} args - Arguments to update or create a Chats.
   * @example
   * // Update or create a Chats
   * const chats = await prisma.chats.upsert({
   *   create: {
   *     // ... data to create a Chats
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Chats we want to update
   *   }
   * })
   */
  upsert<T extends ChatsUpsertArgs>(args: Prisma.SelectSubset<T, ChatsUpsertArgs<ExtArgs>>): Prisma.Prisma__ChatsClient<runtime.Types.Result.GetResult<Prisma.$ChatsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Chats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatsCountArgs} args - Arguments to filter Chats to count.
   * @example
   * // Count the number of Chats
   * const count = await prisma.chats.count({
   *   where: {
   *     // ... the filter for the Chats we want to count
   *   }
   * })
  **/
  count<T extends ChatsCountArgs>(
    args?: Prisma.Subset<T, ChatsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChatsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Chats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChatsAggregateArgs>(args: Prisma.Subset<T, ChatsAggregateArgs>): Prisma.PrismaPromise<GetChatsAggregateType<T>>

  /**
   * Group by Chats.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChatsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChatsGroupByArgs['orderBy'] }
      : { orderBy?: ChatsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Chats model
 */
readonly fields: ChatsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Chats.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChatsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Users<T extends Prisma.UsersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UsersDefaultArgs<ExtArgs>>): Prisma.Prisma__UsersClient<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Chats model
 */
export interface ChatsFieldRefs {
  readonly id: Prisma.FieldRef<"Chats", 'Int'>
  readonly message: Prisma.FieldRef<"Chats", 'String'>
  readonly userId: Prisma.FieldRef<"Chats", 'Int'>
  readonly roomId: Prisma.FieldRef<"Chats", 'String'>
  readonly deletedBy: Prisma.FieldRef<"Chats", 'Int'>
  readonly isDeleted: Prisma.FieldRef<"Chats", 'Boolean'>
  readonly deletedAt: Prisma.FieldRef<"Chats", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Chats", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Chats", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Chats findUnique
 */
export type ChatsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chats
   */
  select?: Prisma.ChatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chats
   */
  omit?: Prisma.ChatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatsInclude<ExtArgs> | null
  /**
   * Filter, which Chats to fetch.
   */
  where: Prisma.ChatsWhereUniqueInput
}

/**
 * Chats findUniqueOrThrow
 */
export type ChatsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chats
   */
  select?: Prisma.ChatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chats
   */
  omit?: Prisma.ChatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatsInclude<ExtArgs> | null
  /**
   * Filter, which Chats to fetch.
   */
  where: Prisma.ChatsWhereUniqueInput
}

/**
 * Chats findFirst
 */
export type ChatsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chats
   */
  select?: Prisma.ChatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chats
   */
  omit?: Prisma.ChatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatsInclude<ExtArgs> | null
  /**
   * Filter, which Chats to fetch.
   */
  where?: Prisma.ChatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chats to fetch.
   */
  orderBy?: Prisma.ChatsOrderByWithRelationInput | Prisma.ChatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Chats.
   */
  cursor?: Prisma.ChatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Chats.
   */
  distinct?: Prisma.ChatsScalarFieldEnum | Prisma.ChatsScalarFieldEnum[]
}

/**
 * Chats findFirstOrThrow
 */
export type ChatsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chats
   */
  select?: Prisma.ChatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chats
   */
  omit?: Prisma.ChatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatsInclude<ExtArgs> | null
  /**
   * Filter, which Chats to fetch.
   */
  where?: Prisma.ChatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chats to fetch.
   */
  orderBy?: Prisma.ChatsOrderByWithRelationInput | Prisma.ChatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Chats.
   */
  cursor?: Prisma.ChatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chats.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Chats.
   */
  distinct?: Prisma.ChatsScalarFieldEnum | Prisma.ChatsScalarFieldEnum[]
}

/**
 * Chats findMany
 */
export type ChatsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chats
   */
  select?: Prisma.ChatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chats
   */
  omit?: Prisma.ChatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatsInclude<ExtArgs> | null
  /**
   * Filter, which Chats to fetch.
   */
  where?: Prisma.ChatsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chats to fetch.
   */
  orderBy?: Prisma.ChatsOrderByWithRelationInput | Prisma.ChatsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Chats.
   */
  cursor?: Prisma.ChatsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chats from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chats.
   */
  skip?: number
  distinct?: Prisma.ChatsScalarFieldEnum | Prisma.ChatsScalarFieldEnum[]
}

/**
 * Chats create
 */
export type ChatsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chats
   */
  select?: Prisma.ChatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chats
   */
  omit?: Prisma.ChatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatsInclude<ExtArgs> | null
  /**
   * The data needed to create a Chats.
   */
  data: Prisma.XOR<Prisma.ChatsCreateInput, Prisma.ChatsUncheckedCreateInput>
}

/**
 * Chats createMany
 */
export type ChatsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Chats.
   */
  data: Prisma.ChatsCreateManyInput | Prisma.ChatsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Chats update
 */
export type ChatsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chats
   */
  select?: Prisma.ChatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chats
   */
  omit?: Prisma.ChatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatsInclude<ExtArgs> | null
  /**
   * The data needed to update a Chats.
   */
  data: Prisma.XOR<Prisma.ChatsUpdateInput, Prisma.ChatsUncheckedUpdateInput>
  /**
   * Choose, which Chats to update.
   */
  where: Prisma.ChatsWhereUniqueInput
}

/**
 * Chats updateMany
 */
export type ChatsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Chats.
   */
  data: Prisma.XOR<Prisma.ChatsUpdateManyMutationInput, Prisma.ChatsUncheckedUpdateManyInput>
  /**
   * Filter which Chats to update
   */
  where?: Prisma.ChatsWhereInput
  /**
   * Limit how many Chats to update.
   */
  limit?: number
}

/**
 * Chats upsert
 */
export type ChatsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chats
   */
  select?: Prisma.ChatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chats
   */
  omit?: Prisma.ChatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatsInclude<ExtArgs> | null
  /**
   * The filter to search for the Chats to update in case it exists.
   */
  where: Prisma.ChatsWhereUniqueInput
  /**
   * In case the Chats found by the `where` argument doesn't exist, create a new Chats with this data.
   */
  create: Prisma.XOR<Prisma.ChatsCreateInput, Prisma.ChatsUncheckedCreateInput>
  /**
   * In case the Chats was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChatsUpdateInput, Prisma.ChatsUncheckedUpdateInput>
}

/**
 * Chats delete
 */
export type ChatsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chats
   */
  select?: Prisma.ChatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chats
   */
  omit?: Prisma.ChatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatsInclude<ExtArgs> | null
  /**
   * Filter which Chats to delete.
   */
  where: Prisma.ChatsWhereUniqueInput
}

/**
 * Chats deleteMany
 */
export type ChatsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Chats to delete
   */
  where?: Prisma.ChatsWhereInput
  /**
   * Limit how many Chats to delete.
   */
  limit?: number
}

/**
 * Chats without action
 */
export type ChatsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chats
   */
  select?: Prisma.ChatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chats
   */
  omit?: Prisma.ChatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatsInclude<ExtArgs> | null
}
