
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Users` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Users
 * 
 */
export type UsersModel = runtime.Types.Result.DefaultSelection<Prisma.$UsersPayload>

export type AggregateUsers = {
  _count: UsersCountAggregateOutputType | null
  _avg: UsersAvgAggregateOutputType | null
  _sum: UsersSumAggregateOutputType | null
  _min: UsersMinAggregateOutputType | null
  _max: UsersMaxAggregateOutputType | null
}

export type UsersAvgAggregateOutputType = {
  id: number | null
  roleId: number | null
  deletedBy: number | null
}

export type UsersSumAggregateOutputType = {
  id: number | null
  roleId: number | null
  deletedBy: number | null
}

export type UsersMinAggregateOutputType = {
  id: number | null
  email: string | null
  fullName: string | null
  avatar: string | null
  password: string | null
  facebookId: string | null
  googleId: string | null
  roleId: number | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UsersMaxAggregateOutputType = {
  id: number | null
  email: string | null
  fullName: string | null
  avatar: string | null
  password: string | null
  facebookId: string | null
  googleId: string | null
  roleId: number | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type UsersCountAggregateOutputType = {
  id: number
  email: number
  fullName: number
  avatar: number
  password: number
  facebookId: number
  googleId: number
  roleId: number
  deletedBy: number
  isDeleted: number
  deletedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type UsersAvgAggregateInputType = {
  id?: true
  roleId?: true
  deletedBy?: true
}

export type UsersSumAggregateInputType = {
  id?: true
  roleId?: true
  deletedBy?: true
}

export type UsersMinAggregateInputType = {
  id?: true
  email?: true
  fullName?: true
  avatar?: true
  password?: true
  facebookId?: true
  googleId?: true
  roleId?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type UsersMaxAggregateInputType = {
  id?: true
  email?: true
  fullName?: true
  avatar?: true
  password?: true
  facebookId?: true
  googleId?: true
  roleId?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type UsersCountAggregateInputType = {
  id?: true
  email?: true
  fullName?: true
  avatar?: true
  password?: true
  facebookId?: true
  googleId?: true
  roleId?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type UsersAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Users to aggregate.
   */
  where?: Prisma.UsersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UsersOrderByWithRelationInput | Prisma.UsersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UsersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Users
  **/
  _count?: true | UsersCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UsersAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UsersSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UsersMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UsersMaxAggregateInputType
}

export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
      [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUsers[P]>
    : Prisma.GetScalarType<T[P], AggregateUsers[P]>
}




export type UsersGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UsersWhereInput
  orderBy?: Prisma.UsersOrderByWithAggregationInput | Prisma.UsersOrderByWithAggregationInput[]
  by: Prisma.UsersScalarFieldEnum[] | Prisma.UsersScalarFieldEnum
  having?: Prisma.UsersScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UsersCountAggregateInputType | true
  _avg?: UsersAvgAggregateInputType
  _sum?: UsersSumAggregateInputType
  _min?: UsersMinAggregateInputType
  _max?: UsersMaxAggregateInputType
}

export type UsersGroupByOutputType = {
  id: number
  email: string
  fullName: string | null
  avatar: string | null
  password: string | null
  facebookId: string | null
  googleId: string | null
  roleId: number
  deletedBy: number
  isDeleted: boolean
  deletedAt: Date | null
  createdAt: Date
  updatedAt: Date
  _count: UsersCountAggregateOutputType | null
  _avg: UsersAvgAggregateOutputType | null
  _sum: UsersSumAggregateOutputType | null
  _min: UsersMinAggregateOutputType | null
  _max: UsersMaxAggregateOutputType | null
}

type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UsersGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UsersGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UsersGroupByOutputType[P]>
      }
    >
  >



export type UsersWhereInput = {
  AND?: Prisma.UsersWhereInput | Prisma.UsersWhereInput[]
  OR?: Prisma.UsersWhereInput[]
  NOT?: Prisma.UsersWhereInput | Prisma.UsersWhereInput[]
  id?: Prisma.IntFilter<"Users"> | number
  email?: Prisma.StringFilter<"Users"> | string
  fullName?: Prisma.StringNullableFilter<"Users"> | string | null
  avatar?: Prisma.StringNullableFilter<"Users"> | string | null
  password?: Prisma.StringNullableFilter<"Users"> | string | null
  facebookId?: Prisma.StringNullableFilter<"Users"> | string | null
  googleId?: Prisma.StringNullableFilter<"Users"> | string | null
  roleId?: Prisma.IntFilter<"Users"> | number
  deletedBy?: Prisma.IntFilter<"Users"> | number
  isDeleted?: Prisma.BoolFilter<"Users"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"Users"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Users"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Users"> | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersListRelationFilter
  ChatGroups?: Prisma.ChatGroupsListRelationFilter
  ChatMessages?: Prisma.ChatMessagesListRelationFilter
  Chats?: Prisma.ChatsListRelationFilter
  Roles?: Prisma.XOR<Prisma.RolesScalarRelationFilter, Prisma.RolesWhereInput>
}

export type UsersOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  fullName?: Prisma.SortOrderInput | Prisma.SortOrder
  avatar?: Prisma.SortOrderInput | Prisma.SortOrder
  password?: Prisma.SortOrderInput | Prisma.SortOrder
  facebookId?: Prisma.SortOrderInput | Prisma.SortOrder
  googleId?: Prisma.SortOrderInput | Prisma.SortOrder
  roleId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  ChatGroupMembers?: Prisma.ChatGroupMembersOrderByRelationAggregateInput
  ChatGroups?: Prisma.ChatGroupsOrderByRelationAggregateInput
  ChatMessages?: Prisma.ChatMessagesOrderByRelationAggregateInput
  Chats?: Prisma.ChatsOrderByRelationAggregateInput
  Roles?: Prisma.RolesOrderByWithRelationInput
  _relevance?: Prisma.UsersOrderByRelevanceInput
}

export type UsersWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  email?: string
  facebookId?: string
  googleId?: string
  AND?: Prisma.UsersWhereInput | Prisma.UsersWhereInput[]
  OR?: Prisma.UsersWhereInput[]
  NOT?: Prisma.UsersWhereInput | Prisma.UsersWhereInput[]
  fullName?: Prisma.StringNullableFilter<"Users"> | string | null
  avatar?: Prisma.StringNullableFilter<"Users"> | string | null
  password?: Prisma.StringNullableFilter<"Users"> | string | null
  roleId?: Prisma.IntFilter<"Users"> | number
  deletedBy?: Prisma.IntFilter<"Users"> | number
  isDeleted?: Prisma.BoolFilter<"Users"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"Users"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Users"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Users"> | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersListRelationFilter
  ChatGroups?: Prisma.ChatGroupsListRelationFilter
  ChatMessages?: Prisma.ChatMessagesListRelationFilter
  Chats?: Prisma.ChatsListRelationFilter
  Roles?: Prisma.XOR<Prisma.RolesScalarRelationFilter, Prisma.RolesWhereInput>
}, "id" | "email" | "facebookId" | "googleId">

export type UsersOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  fullName?: Prisma.SortOrderInput | Prisma.SortOrder
  avatar?: Prisma.SortOrderInput | Prisma.SortOrder
  password?: Prisma.SortOrderInput | Prisma.SortOrder
  facebookId?: Prisma.SortOrderInput | Prisma.SortOrder
  googleId?: Prisma.SortOrderInput | Prisma.SortOrder
  roleId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.UsersCountOrderByAggregateInput
  _avg?: Prisma.UsersAvgOrderByAggregateInput
  _max?: Prisma.UsersMaxOrderByAggregateInput
  _min?: Prisma.UsersMinOrderByAggregateInput
  _sum?: Prisma.UsersSumOrderByAggregateInput
}

export type UsersScalarWhereWithAggregatesInput = {
  AND?: Prisma.UsersScalarWhereWithAggregatesInput | Prisma.UsersScalarWhereWithAggregatesInput[]
  OR?: Prisma.UsersScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UsersScalarWhereWithAggregatesInput | Prisma.UsersScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Users"> | number
  email?: Prisma.StringWithAggregatesFilter<"Users"> | string
  fullName?: Prisma.StringNullableWithAggregatesFilter<"Users"> | string | null
  avatar?: Prisma.StringNullableWithAggregatesFilter<"Users"> | string | null
  password?: Prisma.StringNullableWithAggregatesFilter<"Users"> | string | null
  facebookId?: Prisma.StringNullableWithAggregatesFilter<"Users"> | string | null
  googleId?: Prisma.StringNullableWithAggregatesFilter<"Users"> | string | null
  roleId?: Prisma.IntWithAggregatesFilter<"Users"> | number
  deletedBy?: Prisma.IntWithAggregatesFilter<"Users"> | number
  isDeleted?: Prisma.BoolWithAggregatesFilter<"Users"> | boolean
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Users"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Users"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Users"> | Date | string
}

export type UsersCreateInput = {
  email: string
  fullName?: string | null
  avatar?: string | null
  password?: string | null
  facebookId?: string | null
  googleId?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersCreateNestedManyWithoutUsersInput
  ChatGroups?: Prisma.ChatGroupsCreateNestedManyWithoutUsersInput
  ChatMessages?: Prisma.ChatMessagesCreateNestedManyWithoutUsersInput
  Chats?: Prisma.ChatsCreateNestedManyWithoutUsersInput
  Roles?: Prisma.RolesCreateNestedOneWithoutUsersInput
}

export type UsersUncheckedCreateInput = {
  id?: number
  email: string
  fullName?: string | null
  avatar?: string | null
  password?: string | null
  facebookId?: string | null
  googleId?: string | null
  roleId?: number
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedCreateNestedManyWithoutUsersInput
  ChatGroups?: Prisma.ChatGroupsUncheckedCreateNestedManyWithoutUsersInput
  ChatMessages?: Prisma.ChatMessagesUncheckedCreateNestedManyWithoutUsersInput
  Chats?: Prisma.ChatsUncheckedCreateNestedManyWithoutUsersInput
}

export type UsersUpdateInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  facebookId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  googleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUpdateManyWithoutUsersNestedInput
  ChatGroups?: Prisma.ChatGroupsUpdateManyWithoutUsersNestedInput
  ChatMessages?: Prisma.ChatMessagesUpdateManyWithoutUsersNestedInput
  Chats?: Prisma.ChatsUpdateManyWithoutUsersNestedInput
  Roles?: Prisma.RolesUpdateOneRequiredWithoutUsersNestedInput
}

export type UsersUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  facebookId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  googleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  roleId?: Prisma.IntFieldUpdateOperationsInput | number
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedUpdateManyWithoutUsersNestedInput
  ChatGroups?: Prisma.ChatGroupsUncheckedUpdateManyWithoutUsersNestedInput
  ChatMessages?: Prisma.ChatMessagesUncheckedUpdateManyWithoutUsersNestedInput
  Chats?: Prisma.ChatsUncheckedUpdateManyWithoutUsersNestedInput
}

export type UsersCreateManyInput = {
  id?: number
  email: string
  fullName?: string | null
  avatar?: string | null
  password?: string | null
  facebookId?: string | null
  googleId?: string | null
  roleId?: number
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UsersUpdateManyMutationInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  facebookId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  googleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UsersUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  facebookId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  googleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  roleId?: Prisma.IntFieldUpdateOperationsInput | number
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type UsersNullableScalarRelationFilter = {
  is?: Prisma.UsersWhereInput | null
  isNot?: Prisma.UsersWhereInput | null
}

export type UsersScalarRelationFilter = {
  is?: Prisma.UsersWhereInput
  isNot?: Prisma.UsersWhereInput
}

export type UsersListRelationFilter = {
  every?: Prisma.UsersWhereInput
  some?: Prisma.UsersWhereInput
  none?: Prisma.UsersWhereInput
}

export type UsersOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type UsersOrderByRelevanceInput = {
  fields: Prisma.UsersOrderByRelevanceFieldEnum | Prisma.UsersOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type UsersCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
  password?: Prisma.SortOrder
  facebookId?: Prisma.SortOrder
  googleId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UsersAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type UsersMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
  password?: Prisma.SortOrder
  facebookId?: Prisma.SortOrder
  googleId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UsersMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  email?: Prisma.SortOrder
  fullName?: Prisma.SortOrder
  avatar?: Prisma.SortOrder
  password?: Prisma.SortOrder
  facebookId?: Prisma.SortOrder
  googleId?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type UsersSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type UsersCreateNestedOneWithoutChatGroupMembersInput = {
  create?: Prisma.XOR<Prisma.UsersCreateWithoutChatGroupMembersInput, Prisma.UsersUncheckedCreateWithoutChatGroupMembersInput>
  connectOrCreate?: Prisma.UsersCreateOrConnectWithoutChatGroupMembersInput
  connect?: Prisma.UsersWhereUniqueInput
}

export type UsersUpdateOneWithoutChatGroupMembersNestedInput = {
  create?: Prisma.XOR<Prisma.UsersCreateWithoutChatGroupMembersInput, Prisma.UsersUncheckedCreateWithoutChatGroupMembersInput>
  connectOrCreate?: Prisma.UsersCreateOrConnectWithoutChatGroupMembersInput
  upsert?: Prisma.UsersUpsertWithoutChatGroupMembersInput
  disconnect?: Prisma.UsersWhereInput | boolean
  delete?: Prisma.UsersWhereInput | boolean
  connect?: Prisma.UsersWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UsersUpdateToOneWithWhereWithoutChatGroupMembersInput, Prisma.UsersUpdateWithoutChatGroupMembersInput>, Prisma.UsersUncheckedUpdateWithoutChatGroupMembersInput>
}

export type UsersCreateNestedOneWithoutChatGroupsInput = {
  create?: Prisma.XOR<Prisma.UsersCreateWithoutChatGroupsInput, Prisma.UsersUncheckedCreateWithoutChatGroupsInput>
  connectOrCreate?: Prisma.UsersCreateOrConnectWithoutChatGroupsInput
  connect?: Prisma.UsersWhereUniqueInput
}

export type UsersUpdateOneWithoutChatGroupsNestedInput = {
  create?: Prisma.XOR<Prisma.UsersCreateWithoutChatGroupsInput, Prisma.UsersUncheckedCreateWithoutChatGroupsInput>
  connectOrCreate?: Prisma.UsersCreateOrConnectWithoutChatGroupsInput
  upsert?: Prisma.UsersUpsertWithoutChatGroupsInput
  disconnect?: Prisma.UsersWhereInput | boolean
  delete?: Prisma.UsersWhereInput | boolean
  connect?: Prisma.UsersWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UsersUpdateToOneWithWhereWithoutChatGroupsInput, Prisma.UsersUpdateWithoutChatGroupsInput>, Prisma.UsersUncheckedUpdateWithoutChatGroupsInput>
}

export type UsersCreateNestedOneWithoutChatMessagesInput = {
  create?: Prisma.XOR<Prisma.UsersCreateWithoutChatMessagesInput, Prisma.UsersUncheckedCreateWithoutChatMessagesInput>
  connectOrCreate?: Prisma.UsersCreateOrConnectWithoutChatMessagesInput
  connect?: Prisma.UsersWhereUniqueInput
}

export type UsersUpdateOneRequiredWithoutChatMessagesNestedInput = {
  create?: Prisma.XOR<Prisma.UsersCreateWithoutChatMessagesInput, Prisma.UsersUncheckedCreateWithoutChatMessagesInput>
  connectOrCreate?: Prisma.UsersCreateOrConnectWithoutChatMessagesInput
  upsert?: Prisma.UsersUpsertWithoutChatMessagesInput
  connect?: Prisma.UsersWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UsersUpdateToOneWithWhereWithoutChatMessagesInput, Prisma.UsersUpdateWithoutChatMessagesInput>, Prisma.UsersUncheckedUpdateWithoutChatMessagesInput>
}

export type UsersCreateNestedOneWithoutChatsInput = {
  create?: Prisma.XOR<Prisma.UsersCreateWithoutChatsInput, Prisma.UsersUncheckedCreateWithoutChatsInput>
  connectOrCreate?: Prisma.UsersCreateOrConnectWithoutChatsInput
  connect?: Prisma.UsersWhereUniqueInput
}

export type UsersUpdateOneRequiredWithoutChatsNestedInput = {
  create?: Prisma.XOR<Prisma.UsersCreateWithoutChatsInput, Prisma.UsersUncheckedCreateWithoutChatsInput>
  connectOrCreate?: Prisma.UsersCreateOrConnectWithoutChatsInput
  upsert?: Prisma.UsersUpsertWithoutChatsInput
  connect?: Prisma.UsersWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.UsersUpdateToOneWithWhereWithoutChatsInput, Prisma.UsersUpdateWithoutChatsInput>, Prisma.UsersUncheckedUpdateWithoutChatsInput>
}

export type UsersCreateNestedManyWithoutRolesInput = {
  create?: Prisma.XOR<Prisma.UsersCreateWithoutRolesInput, Prisma.UsersUncheckedCreateWithoutRolesInput> | Prisma.UsersCreateWithoutRolesInput[] | Prisma.UsersUncheckedCreateWithoutRolesInput[]
  connectOrCreate?: Prisma.UsersCreateOrConnectWithoutRolesInput | Prisma.UsersCreateOrConnectWithoutRolesInput[]
  createMany?: Prisma.UsersCreateManyRolesInputEnvelope
  connect?: Prisma.UsersWhereUniqueInput | Prisma.UsersWhereUniqueInput[]
}

export type UsersUncheckedCreateNestedManyWithoutRolesInput = {
  create?: Prisma.XOR<Prisma.UsersCreateWithoutRolesInput, Prisma.UsersUncheckedCreateWithoutRolesInput> | Prisma.UsersCreateWithoutRolesInput[] | Prisma.UsersUncheckedCreateWithoutRolesInput[]
  connectOrCreate?: Prisma.UsersCreateOrConnectWithoutRolesInput | Prisma.UsersCreateOrConnectWithoutRolesInput[]
  createMany?: Prisma.UsersCreateManyRolesInputEnvelope
  connect?: Prisma.UsersWhereUniqueInput | Prisma.UsersWhereUniqueInput[]
}

export type UsersUpdateManyWithoutRolesNestedInput = {
  create?: Prisma.XOR<Prisma.UsersCreateWithoutRolesInput, Prisma.UsersUncheckedCreateWithoutRolesInput> | Prisma.UsersCreateWithoutRolesInput[] | Prisma.UsersUncheckedCreateWithoutRolesInput[]
  connectOrCreate?: Prisma.UsersCreateOrConnectWithoutRolesInput | Prisma.UsersCreateOrConnectWithoutRolesInput[]
  upsert?: Prisma.UsersUpsertWithWhereUniqueWithoutRolesInput | Prisma.UsersUpsertWithWhereUniqueWithoutRolesInput[]
  createMany?: Prisma.UsersCreateManyRolesInputEnvelope
  set?: Prisma.UsersWhereUniqueInput | Prisma.UsersWhereUniqueInput[]
  disconnect?: Prisma.UsersWhereUniqueInput | Prisma.UsersWhereUniqueInput[]
  delete?: Prisma.UsersWhereUniqueInput | Prisma.UsersWhereUniqueInput[]
  connect?: Prisma.UsersWhereUniqueInput | Prisma.UsersWhereUniqueInput[]
  update?: Prisma.UsersUpdateWithWhereUniqueWithoutRolesInput | Prisma.UsersUpdateWithWhereUniqueWithoutRolesInput[]
  updateMany?: Prisma.UsersUpdateManyWithWhereWithoutRolesInput | Prisma.UsersUpdateManyWithWhereWithoutRolesInput[]
  deleteMany?: Prisma.UsersScalarWhereInput | Prisma.UsersScalarWhereInput[]
}

export type UsersUncheckedUpdateManyWithoutRolesNestedInput = {
  create?: Prisma.XOR<Prisma.UsersCreateWithoutRolesInput, Prisma.UsersUncheckedCreateWithoutRolesInput> | Prisma.UsersCreateWithoutRolesInput[] | Prisma.UsersUncheckedCreateWithoutRolesInput[]
  connectOrCreate?: Prisma.UsersCreateOrConnectWithoutRolesInput | Prisma.UsersCreateOrConnectWithoutRolesInput[]
  upsert?: Prisma.UsersUpsertWithWhereUniqueWithoutRolesInput | Prisma.UsersUpsertWithWhereUniqueWithoutRolesInput[]
  createMany?: Prisma.UsersCreateManyRolesInputEnvelope
  set?: Prisma.UsersWhereUniqueInput | Prisma.UsersWhereUniqueInput[]
  disconnect?: Prisma.UsersWhereUniqueInput | Prisma.UsersWhereUniqueInput[]
  delete?: Prisma.UsersWhereUniqueInput | Prisma.UsersWhereUniqueInput[]
  connect?: Prisma.UsersWhereUniqueInput | Prisma.UsersWhereUniqueInput[]
  update?: Prisma.UsersUpdateWithWhereUniqueWithoutRolesInput | Prisma.UsersUpdateWithWhereUniqueWithoutRolesInput[]
  updateMany?: Prisma.UsersUpdateManyWithWhereWithoutRolesInput | Prisma.UsersUpdateManyWithWhereWithoutRolesInput[]
  deleteMany?: Prisma.UsersScalarWhereInput | Prisma.UsersScalarWhereInput[]
}

export type UsersCreateWithoutChatGroupMembersInput = {
  email: string
  fullName?: string | null
  avatar?: string | null
  password?: string | null
  facebookId?: string | null
  googleId?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroups?: Prisma.ChatGroupsCreateNestedManyWithoutUsersInput
  ChatMessages?: Prisma.ChatMessagesCreateNestedManyWithoutUsersInput
  Chats?: Prisma.ChatsCreateNestedManyWithoutUsersInput
  Roles?: Prisma.RolesCreateNestedOneWithoutUsersInput
}

export type UsersUncheckedCreateWithoutChatGroupMembersInput = {
  id?: number
  email: string
  fullName?: string | null
  avatar?: string | null
  password?: string | null
  facebookId?: string | null
  googleId?: string | null
  roleId?: number
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroups?: Prisma.ChatGroupsUncheckedCreateNestedManyWithoutUsersInput
  ChatMessages?: Prisma.ChatMessagesUncheckedCreateNestedManyWithoutUsersInput
  Chats?: Prisma.ChatsUncheckedCreateNestedManyWithoutUsersInput
}

export type UsersCreateOrConnectWithoutChatGroupMembersInput = {
  where: Prisma.UsersWhereUniqueInput
  create: Prisma.XOR<Prisma.UsersCreateWithoutChatGroupMembersInput, Prisma.UsersUncheckedCreateWithoutChatGroupMembersInput>
}

export type UsersUpsertWithoutChatGroupMembersInput = {
  update: Prisma.XOR<Prisma.UsersUpdateWithoutChatGroupMembersInput, Prisma.UsersUncheckedUpdateWithoutChatGroupMembersInput>
  create: Prisma.XOR<Prisma.UsersCreateWithoutChatGroupMembersInput, Prisma.UsersUncheckedCreateWithoutChatGroupMembersInput>
  where?: Prisma.UsersWhereInput
}

export type UsersUpdateToOneWithWhereWithoutChatGroupMembersInput = {
  where?: Prisma.UsersWhereInput
  data: Prisma.XOR<Prisma.UsersUpdateWithoutChatGroupMembersInput, Prisma.UsersUncheckedUpdateWithoutChatGroupMembersInput>
}

export type UsersUpdateWithoutChatGroupMembersInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  facebookId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  googleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroups?: Prisma.ChatGroupsUpdateManyWithoutUsersNestedInput
  ChatMessages?: Prisma.ChatMessagesUpdateManyWithoutUsersNestedInput
  Chats?: Prisma.ChatsUpdateManyWithoutUsersNestedInput
  Roles?: Prisma.RolesUpdateOneRequiredWithoutUsersNestedInput
}

export type UsersUncheckedUpdateWithoutChatGroupMembersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  facebookId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  googleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  roleId?: Prisma.IntFieldUpdateOperationsInput | number
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroups?: Prisma.ChatGroupsUncheckedUpdateManyWithoutUsersNestedInput
  ChatMessages?: Prisma.ChatMessagesUncheckedUpdateManyWithoutUsersNestedInput
  Chats?: Prisma.ChatsUncheckedUpdateManyWithoutUsersNestedInput
}

export type UsersCreateWithoutChatGroupsInput = {
  email: string
  fullName?: string | null
  avatar?: string | null
  password?: string | null
  facebookId?: string | null
  googleId?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersCreateNestedManyWithoutUsersInput
  ChatMessages?: Prisma.ChatMessagesCreateNestedManyWithoutUsersInput
  Chats?: Prisma.ChatsCreateNestedManyWithoutUsersInput
  Roles?: Prisma.RolesCreateNestedOneWithoutUsersInput
}

export type UsersUncheckedCreateWithoutChatGroupsInput = {
  id?: number
  email: string
  fullName?: string | null
  avatar?: string | null
  password?: string | null
  facebookId?: string | null
  googleId?: string | null
  roleId?: number
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedCreateNestedManyWithoutUsersInput
  ChatMessages?: Prisma.ChatMessagesUncheckedCreateNestedManyWithoutUsersInput
  Chats?: Prisma.ChatsUncheckedCreateNestedManyWithoutUsersInput
}

export type UsersCreateOrConnectWithoutChatGroupsInput = {
  where: Prisma.UsersWhereUniqueInput
  create: Prisma.XOR<Prisma.UsersCreateWithoutChatGroupsInput, Prisma.UsersUncheckedCreateWithoutChatGroupsInput>
}

export type UsersUpsertWithoutChatGroupsInput = {
  update: Prisma.XOR<Prisma.UsersUpdateWithoutChatGroupsInput, Prisma.UsersUncheckedUpdateWithoutChatGroupsInput>
  create: Prisma.XOR<Prisma.UsersCreateWithoutChatGroupsInput, Prisma.UsersUncheckedCreateWithoutChatGroupsInput>
  where?: Prisma.UsersWhereInput
}

export type UsersUpdateToOneWithWhereWithoutChatGroupsInput = {
  where?: Prisma.UsersWhereInput
  data: Prisma.XOR<Prisma.UsersUpdateWithoutChatGroupsInput, Prisma.UsersUncheckedUpdateWithoutChatGroupsInput>
}

export type UsersUpdateWithoutChatGroupsInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  facebookId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  googleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUpdateManyWithoutUsersNestedInput
  ChatMessages?: Prisma.ChatMessagesUpdateManyWithoutUsersNestedInput
  Chats?: Prisma.ChatsUpdateManyWithoutUsersNestedInput
  Roles?: Prisma.RolesUpdateOneRequiredWithoutUsersNestedInput
}

export type UsersUncheckedUpdateWithoutChatGroupsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  facebookId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  googleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  roleId?: Prisma.IntFieldUpdateOperationsInput | number
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedUpdateManyWithoutUsersNestedInput
  ChatMessages?: Prisma.ChatMessagesUncheckedUpdateManyWithoutUsersNestedInput
  Chats?: Prisma.ChatsUncheckedUpdateManyWithoutUsersNestedInput
}

export type UsersCreateWithoutChatMessagesInput = {
  email: string
  fullName?: string | null
  avatar?: string | null
  password?: string | null
  facebookId?: string | null
  googleId?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersCreateNestedManyWithoutUsersInput
  ChatGroups?: Prisma.ChatGroupsCreateNestedManyWithoutUsersInput
  Chats?: Prisma.ChatsCreateNestedManyWithoutUsersInput
  Roles?: Prisma.RolesCreateNestedOneWithoutUsersInput
}

export type UsersUncheckedCreateWithoutChatMessagesInput = {
  id?: number
  email: string
  fullName?: string | null
  avatar?: string | null
  password?: string | null
  facebookId?: string | null
  googleId?: string | null
  roleId?: number
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedCreateNestedManyWithoutUsersInput
  ChatGroups?: Prisma.ChatGroupsUncheckedCreateNestedManyWithoutUsersInput
  Chats?: Prisma.ChatsUncheckedCreateNestedManyWithoutUsersInput
}

export type UsersCreateOrConnectWithoutChatMessagesInput = {
  where: Prisma.UsersWhereUniqueInput
  create: Prisma.XOR<Prisma.UsersCreateWithoutChatMessagesInput, Prisma.UsersUncheckedCreateWithoutChatMessagesInput>
}

export type UsersUpsertWithoutChatMessagesInput = {
  update: Prisma.XOR<Prisma.UsersUpdateWithoutChatMessagesInput, Prisma.UsersUncheckedUpdateWithoutChatMessagesInput>
  create: Prisma.XOR<Prisma.UsersCreateWithoutChatMessagesInput, Prisma.UsersUncheckedCreateWithoutChatMessagesInput>
  where?: Prisma.UsersWhereInput
}

export type UsersUpdateToOneWithWhereWithoutChatMessagesInput = {
  where?: Prisma.UsersWhereInput
  data: Prisma.XOR<Prisma.UsersUpdateWithoutChatMessagesInput, Prisma.UsersUncheckedUpdateWithoutChatMessagesInput>
}

export type UsersUpdateWithoutChatMessagesInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  facebookId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  googleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUpdateManyWithoutUsersNestedInput
  ChatGroups?: Prisma.ChatGroupsUpdateManyWithoutUsersNestedInput
  Chats?: Prisma.ChatsUpdateManyWithoutUsersNestedInput
  Roles?: Prisma.RolesUpdateOneRequiredWithoutUsersNestedInput
}

export type UsersUncheckedUpdateWithoutChatMessagesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  facebookId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  googleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  roleId?: Prisma.IntFieldUpdateOperationsInput | number
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedUpdateManyWithoutUsersNestedInput
  ChatGroups?: Prisma.ChatGroupsUncheckedUpdateManyWithoutUsersNestedInput
  Chats?: Prisma.ChatsUncheckedUpdateManyWithoutUsersNestedInput
}

export type UsersCreateWithoutChatsInput = {
  email: string
  fullName?: string | null
  avatar?: string | null
  password?: string | null
  facebookId?: string | null
  googleId?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersCreateNestedManyWithoutUsersInput
  ChatGroups?: Prisma.ChatGroupsCreateNestedManyWithoutUsersInput
  ChatMessages?: Prisma.ChatMessagesCreateNestedManyWithoutUsersInput
  Roles?: Prisma.RolesCreateNestedOneWithoutUsersInput
}

export type UsersUncheckedCreateWithoutChatsInput = {
  id?: number
  email: string
  fullName?: string | null
  avatar?: string | null
  password?: string | null
  facebookId?: string | null
  googleId?: string | null
  roleId?: number
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedCreateNestedManyWithoutUsersInput
  ChatGroups?: Prisma.ChatGroupsUncheckedCreateNestedManyWithoutUsersInput
  ChatMessages?: Prisma.ChatMessagesUncheckedCreateNestedManyWithoutUsersInput
}

export type UsersCreateOrConnectWithoutChatsInput = {
  where: Prisma.UsersWhereUniqueInput
  create: Prisma.XOR<Prisma.UsersCreateWithoutChatsInput, Prisma.UsersUncheckedCreateWithoutChatsInput>
}

export type UsersUpsertWithoutChatsInput = {
  update: Prisma.XOR<Prisma.UsersUpdateWithoutChatsInput, Prisma.UsersUncheckedUpdateWithoutChatsInput>
  create: Prisma.XOR<Prisma.UsersCreateWithoutChatsInput, Prisma.UsersUncheckedCreateWithoutChatsInput>
  where?: Prisma.UsersWhereInput
}

export type UsersUpdateToOneWithWhereWithoutChatsInput = {
  where?: Prisma.UsersWhereInput
  data: Prisma.XOR<Prisma.UsersUpdateWithoutChatsInput, Prisma.UsersUncheckedUpdateWithoutChatsInput>
}

export type UsersUpdateWithoutChatsInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  facebookId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  googleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUpdateManyWithoutUsersNestedInput
  ChatGroups?: Prisma.ChatGroupsUpdateManyWithoutUsersNestedInput
  ChatMessages?: Prisma.ChatMessagesUpdateManyWithoutUsersNestedInput
  Roles?: Prisma.RolesUpdateOneRequiredWithoutUsersNestedInput
}

export type UsersUncheckedUpdateWithoutChatsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  facebookId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  googleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  roleId?: Prisma.IntFieldUpdateOperationsInput | number
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedUpdateManyWithoutUsersNestedInput
  ChatGroups?: Prisma.ChatGroupsUncheckedUpdateManyWithoutUsersNestedInput
  ChatMessages?: Prisma.ChatMessagesUncheckedUpdateManyWithoutUsersNestedInput
}

export type UsersCreateWithoutRolesInput = {
  email: string
  fullName?: string | null
  avatar?: string | null
  password?: string | null
  facebookId?: string | null
  googleId?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersCreateNestedManyWithoutUsersInput
  ChatGroups?: Prisma.ChatGroupsCreateNestedManyWithoutUsersInput
  ChatMessages?: Prisma.ChatMessagesCreateNestedManyWithoutUsersInput
  Chats?: Prisma.ChatsCreateNestedManyWithoutUsersInput
}

export type UsersUncheckedCreateWithoutRolesInput = {
  id?: number
  email: string
  fullName?: string | null
  avatar?: string | null
  password?: string | null
  facebookId?: string | null
  googleId?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedCreateNestedManyWithoutUsersInput
  ChatGroups?: Prisma.ChatGroupsUncheckedCreateNestedManyWithoutUsersInput
  ChatMessages?: Prisma.ChatMessagesUncheckedCreateNestedManyWithoutUsersInput
  Chats?: Prisma.ChatsUncheckedCreateNestedManyWithoutUsersInput
}

export type UsersCreateOrConnectWithoutRolesInput = {
  where: Prisma.UsersWhereUniqueInput
  create: Prisma.XOR<Prisma.UsersCreateWithoutRolesInput, Prisma.UsersUncheckedCreateWithoutRolesInput>
}

export type UsersCreateManyRolesInputEnvelope = {
  data: Prisma.UsersCreateManyRolesInput | Prisma.UsersCreateManyRolesInput[]
  skipDuplicates?: boolean
}

export type UsersUpsertWithWhereUniqueWithoutRolesInput = {
  where: Prisma.UsersWhereUniqueInput
  update: Prisma.XOR<Prisma.UsersUpdateWithoutRolesInput, Prisma.UsersUncheckedUpdateWithoutRolesInput>
  create: Prisma.XOR<Prisma.UsersCreateWithoutRolesInput, Prisma.UsersUncheckedCreateWithoutRolesInput>
}

export type UsersUpdateWithWhereUniqueWithoutRolesInput = {
  where: Prisma.UsersWhereUniqueInput
  data: Prisma.XOR<Prisma.UsersUpdateWithoutRolesInput, Prisma.UsersUncheckedUpdateWithoutRolesInput>
}

export type UsersUpdateManyWithWhereWithoutRolesInput = {
  where: Prisma.UsersScalarWhereInput
  data: Prisma.XOR<Prisma.UsersUpdateManyMutationInput, Prisma.UsersUncheckedUpdateManyWithoutRolesInput>
}

export type UsersScalarWhereInput = {
  AND?: Prisma.UsersScalarWhereInput | Prisma.UsersScalarWhereInput[]
  OR?: Prisma.UsersScalarWhereInput[]
  NOT?: Prisma.UsersScalarWhereInput | Prisma.UsersScalarWhereInput[]
  id?: Prisma.IntFilter<"Users"> | number
  email?: Prisma.StringFilter<"Users"> | string
  fullName?: Prisma.StringNullableFilter<"Users"> | string | null
  avatar?: Prisma.StringNullableFilter<"Users"> | string | null
  password?: Prisma.StringNullableFilter<"Users"> | string | null
  facebookId?: Prisma.StringNullableFilter<"Users"> | string | null
  googleId?: Prisma.StringNullableFilter<"Users"> | string | null
  roleId?: Prisma.IntFilter<"Users"> | number
  deletedBy?: Prisma.IntFilter<"Users"> | number
  isDeleted?: Prisma.BoolFilter<"Users"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"Users"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Users"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Users"> | Date | string
}

export type UsersCreateManyRolesInput = {
  id?: number
  email: string
  fullName?: string | null
  avatar?: string | null
  password?: string | null
  facebookId?: string | null
  googleId?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type UsersUpdateWithoutRolesInput = {
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  facebookId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  googleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUpdateManyWithoutUsersNestedInput
  ChatGroups?: Prisma.ChatGroupsUpdateManyWithoutUsersNestedInput
  ChatMessages?: Prisma.ChatMessagesUpdateManyWithoutUsersNestedInput
  Chats?: Prisma.ChatsUpdateManyWithoutUsersNestedInput
}

export type UsersUncheckedUpdateWithoutRolesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  facebookId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  googleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedUpdateManyWithoutUsersNestedInput
  ChatGroups?: Prisma.ChatGroupsUncheckedUpdateManyWithoutUsersNestedInput
  ChatMessages?: Prisma.ChatMessagesUncheckedUpdateManyWithoutUsersNestedInput
  Chats?: Prisma.ChatsUncheckedUpdateManyWithoutUsersNestedInput
}

export type UsersUncheckedUpdateManyWithoutRolesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  email?: Prisma.StringFieldUpdateOperationsInput | string
  fullName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  avatar?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  password?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  facebookId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  googleId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type UsersCountOutputType
 */

export type UsersCountOutputType = {
  ChatGroupMembers: number
  ChatGroups: number
  ChatMessages: number
  Chats: number
}

export type UsersCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ChatGroupMembers?: boolean | UsersCountOutputTypeCountChatGroupMembersArgs
  ChatGroups?: boolean | UsersCountOutputTypeCountChatGroupsArgs
  ChatMessages?: boolean | UsersCountOutputTypeCountChatMessagesArgs
  Chats?: boolean | UsersCountOutputTypeCountChatsArgs
}

/**
 * UsersCountOutputType without action
 */
export type UsersCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UsersCountOutputType
   */
  select?: Prisma.UsersCountOutputTypeSelect<ExtArgs> | null
}

/**
 * UsersCountOutputType without action
 */
export type UsersCountOutputTypeCountChatGroupMembersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatGroupMembersWhereInput
}

/**
 * UsersCountOutputType without action
 */
export type UsersCountOutputTypeCountChatGroupsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatGroupsWhereInput
}

/**
 * UsersCountOutputType without action
 */
export type UsersCountOutputTypeCountChatMessagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatMessagesWhereInput
}

/**
 * UsersCountOutputType without action
 */
export type UsersCountOutputTypeCountChatsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatsWhereInput
}


export type UsersSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  email?: boolean
  fullName?: boolean
  avatar?: boolean
  password?: boolean
  facebookId?: boolean
  googleId?: boolean
  roleId?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  ChatGroupMembers?: boolean | Prisma.Users$ChatGroupMembersArgs<ExtArgs>
  ChatGroups?: boolean | Prisma.Users$ChatGroupsArgs<ExtArgs>
  ChatMessages?: boolean | Prisma.Users$ChatMessagesArgs<ExtArgs>
  Chats?: boolean | Prisma.Users$ChatsArgs<ExtArgs>
  Roles?: boolean | Prisma.RolesDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.UsersCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["users"]>



export type UsersSelectScalar = {
  id?: boolean
  email?: boolean
  fullName?: boolean
  avatar?: boolean
  password?: boolean
  facebookId?: boolean
  googleId?: boolean
  roleId?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type UsersOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "email" | "fullName" | "avatar" | "password" | "facebookId" | "googleId" | "roleId" | "deletedBy" | "isDeleted" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["users"]>
export type UsersInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ChatGroupMembers?: boolean | Prisma.Users$ChatGroupMembersArgs<ExtArgs>
  ChatGroups?: boolean | Prisma.Users$ChatGroupsArgs<ExtArgs>
  ChatMessages?: boolean | Prisma.Users$ChatMessagesArgs<ExtArgs>
  Chats?: boolean | Prisma.Users$ChatsArgs<ExtArgs>
  Roles?: boolean | Prisma.RolesDefaultArgs<ExtArgs>
  _count?: boolean | Prisma.UsersCountOutputTypeDefaultArgs<ExtArgs>
}

export type $UsersPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Users"
  objects: {
    ChatGroupMembers: Prisma.$ChatGroupMembersPayload<ExtArgs>[]
    ChatGroups: Prisma.$ChatGroupsPayload<ExtArgs>[]
    ChatMessages: Prisma.$ChatMessagesPayload<ExtArgs>[]
    Chats: Prisma.$ChatsPayload<ExtArgs>[]
    Roles: Prisma.$RolesPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    email: string
    fullName: string | null
    avatar: string | null
    password: string | null
    facebookId: string | null
    googleId: string | null
    roleId: number
    deletedBy: number
    isDeleted: boolean
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["users"]>
  composites: {}
}

export type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UsersPayload, S>

export type UsersCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UsersCountAggregateInputType | true
  }

export interface UsersDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
  /**
   * Find zero or one Users that matches the filter.
   * @param {UsersFindUniqueArgs} args - Arguments to find a Users
   * @example
   * // Get one Users
   * const users = await prisma.users.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UsersFindUniqueArgs>(args: Prisma.SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UsersClient<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Users that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
   * @example
   * // Get one Users
   * const users = await prisma.users.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UsersClient<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Users that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsersFindFirstArgs} args - Arguments to find a Users
   * @example
   * // Get one Users
   * const users = await prisma.users.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UsersFindFirstArgs>(args?: Prisma.SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma.Prisma__UsersClient<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Users that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
   * @example
   * // Get one Users
   * const users = await prisma.users.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UsersClient<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Users that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.users.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.users.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UsersFindManyArgs>(args?: Prisma.SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Users.
   * @param {UsersCreateArgs} args - Arguments to create a Users.
   * @example
   * // Create one Users
   * const Users = await prisma.users.create({
   *   data: {
   *     // ... data to create a Users
   *   }
   * })
   * 
   */
  create<T extends UsersCreateArgs>(args: Prisma.SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma.Prisma__UsersClient<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Users.
   * @param {UsersCreateManyArgs} args - Arguments to create many Users.
   * @example
   * // Create many Users
   * const users = await prisma.users.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UsersCreateManyArgs>(args?: Prisma.SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Users.
   * @param {UsersDeleteArgs} args - Arguments to delete one Users.
   * @example
   * // Delete one Users
   * const Users = await prisma.users.delete({
   *   where: {
   *     // ... filter to delete one Users
   *   }
   * })
   * 
   */
  delete<T extends UsersDeleteArgs>(args: Prisma.SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma.Prisma__UsersClient<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Users.
   * @param {UsersUpdateArgs} args - Arguments to update one Users.
   * @example
   * // Update one Users
   * const users = await prisma.users.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UsersUpdateArgs>(args: Prisma.SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma.Prisma__UsersClient<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Users.
   * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.users.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UsersDeleteManyArgs>(args?: Prisma.SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const users = await prisma.users.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UsersUpdateManyArgs>(args: Prisma.SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Users.
   * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
   * @example
   * // Update or create a Users
   * const users = await prisma.users.upsert({
   *   create: {
   *     // ... data to create a Users
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Users we want to update
   *   }
   * })
   */
  upsert<T extends UsersUpsertArgs>(args: Prisma.SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma.Prisma__UsersClient<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsersCountArgs} args - Arguments to filter Users to count.
   * @example
   * // Count the number of Users
   * const count = await prisma.users.count({
   *   where: {
   *     // ... the filter for the Users we want to count
   *   }
   * })
  **/
  count<T extends UsersCountArgs>(
    args?: Prisma.Subset<T, UsersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UsersCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UsersAggregateArgs>(args: Prisma.Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

  /**
   * Group by Users.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UsersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UsersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UsersGroupByArgs['orderBy'] }
      : { orderBy?: UsersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Users model
 */
readonly fields: UsersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Users.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UsersClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  ChatGroupMembers<T extends Prisma.Users$ChatGroupMembersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Users$ChatGroupMembersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatGroupMembersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  ChatGroups<T extends Prisma.Users$ChatGroupsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Users$ChatGroupsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatGroupsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  ChatMessages<T extends Prisma.Users$ChatMessagesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Users$ChatMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Chats<T extends Prisma.Users$ChatsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Users$ChatsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Roles<T extends Prisma.RolesDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RolesDefaultArgs<ExtArgs>>): Prisma.Prisma__RolesClient<runtime.Types.Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Users model
 */
export interface UsersFieldRefs {
  readonly id: Prisma.FieldRef<"Users", 'Int'>
  readonly email: Prisma.FieldRef<"Users", 'String'>
  readonly fullName: Prisma.FieldRef<"Users", 'String'>
  readonly avatar: Prisma.FieldRef<"Users", 'String'>
  readonly password: Prisma.FieldRef<"Users", 'String'>
  readonly facebookId: Prisma.FieldRef<"Users", 'String'>
  readonly googleId: Prisma.FieldRef<"Users", 'String'>
  readonly roleId: Prisma.FieldRef<"Users", 'Int'>
  readonly deletedBy: Prisma.FieldRef<"Users", 'Int'>
  readonly isDeleted: Prisma.FieldRef<"Users", 'Boolean'>
  readonly deletedAt: Prisma.FieldRef<"Users", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Users", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Users", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Users findUnique
 */
export type UsersFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Users
   */
  select?: Prisma.UsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Users
   */
  omit?: Prisma.UsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersInclude<ExtArgs> | null
  /**
   * Filter, which Users to fetch.
   */
  where: Prisma.UsersWhereUniqueInput
}

/**
 * Users findUniqueOrThrow
 */
export type UsersFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Users
   */
  select?: Prisma.UsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Users
   */
  omit?: Prisma.UsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersInclude<ExtArgs> | null
  /**
   * Filter, which Users to fetch.
   */
  where: Prisma.UsersWhereUniqueInput
}

/**
 * Users findFirst
 */
export type UsersFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Users
   */
  select?: Prisma.UsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Users
   */
  omit?: Prisma.UsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersInclude<ExtArgs> | null
  /**
   * Filter, which Users to fetch.
   */
  where?: Prisma.UsersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UsersOrderByWithRelationInput | Prisma.UsersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Users.
   */
  cursor?: Prisma.UsersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Users.
   */
  distinct?: Prisma.UsersScalarFieldEnum | Prisma.UsersScalarFieldEnum[]
}

/**
 * Users findFirstOrThrow
 */
export type UsersFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Users
   */
  select?: Prisma.UsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Users
   */
  omit?: Prisma.UsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersInclude<ExtArgs> | null
  /**
   * Filter, which Users to fetch.
   */
  where?: Prisma.UsersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UsersOrderByWithRelationInput | Prisma.UsersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Users.
   */
  cursor?: Prisma.UsersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Users.
   */
  distinct?: Prisma.UsersScalarFieldEnum | Prisma.UsersScalarFieldEnum[]
}

/**
 * Users findMany
 */
export type UsersFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Users
   */
  select?: Prisma.UsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Users
   */
  omit?: Prisma.UsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersInclude<ExtArgs> | null
  /**
   * Filter, which Users to fetch.
   */
  where?: Prisma.UsersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Users to fetch.
   */
  orderBy?: Prisma.UsersOrderByWithRelationInput | Prisma.UsersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Users.
   */
  cursor?: Prisma.UsersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Users from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Users.
   */
  skip?: number
  distinct?: Prisma.UsersScalarFieldEnum | Prisma.UsersScalarFieldEnum[]
}

/**
 * Users create
 */
export type UsersCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Users
   */
  select?: Prisma.UsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Users
   */
  omit?: Prisma.UsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersInclude<ExtArgs> | null
  /**
   * The data needed to create a Users.
   */
  data: Prisma.XOR<Prisma.UsersCreateInput, Prisma.UsersUncheckedCreateInput>
}

/**
 * Users createMany
 */
export type UsersCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Users.
   */
  data: Prisma.UsersCreateManyInput | Prisma.UsersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Users update
 */
export type UsersUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Users
   */
  select?: Prisma.UsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Users
   */
  omit?: Prisma.UsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersInclude<ExtArgs> | null
  /**
   * The data needed to update a Users.
   */
  data: Prisma.XOR<Prisma.UsersUpdateInput, Prisma.UsersUncheckedUpdateInput>
  /**
   * Choose, which Users to update.
   */
  where: Prisma.UsersWhereUniqueInput
}

/**
 * Users updateMany
 */
export type UsersUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Users.
   */
  data: Prisma.XOR<Prisma.UsersUpdateManyMutationInput, Prisma.UsersUncheckedUpdateManyInput>
  /**
   * Filter which Users to update
   */
  where?: Prisma.UsersWhereInput
  /**
   * Limit how many Users to update.
   */
  limit?: number
}

/**
 * Users upsert
 */
export type UsersUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Users
   */
  select?: Prisma.UsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Users
   */
  omit?: Prisma.UsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersInclude<ExtArgs> | null
  /**
   * The filter to search for the Users to update in case it exists.
   */
  where: Prisma.UsersWhereUniqueInput
  /**
   * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
   */
  create: Prisma.XOR<Prisma.UsersCreateInput, Prisma.UsersUncheckedCreateInput>
  /**
   * In case the Users was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UsersUpdateInput, Prisma.UsersUncheckedUpdateInput>
}

/**
 * Users delete
 */
export type UsersDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Users
   */
  select?: Prisma.UsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Users
   */
  omit?: Prisma.UsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersInclude<ExtArgs> | null
  /**
   * Filter which Users to delete.
   */
  where: Prisma.UsersWhereUniqueInput
}

/**
 * Users deleteMany
 */
export type UsersDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Users to delete
   */
  where?: Prisma.UsersWhereInput
  /**
   * Limit how many Users to delete.
   */
  limit?: number
}

/**
 * Users.ChatGroupMembers
 */
export type Users$ChatGroupMembersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroupMembers
   */
  select?: Prisma.ChatGroupMembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroupMembers
   */
  omit?: Prisma.ChatGroupMembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupMembersInclude<ExtArgs> | null
  where?: Prisma.ChatGroupMembersWhereInput
  orderBy?: Prisma.ChatGroupMembersOrderByWithRelationInput | Prisma.ChatGroupMembersOrderByWithRelationInput[]
  cursor?: Prisma.ChatGroupMembersWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChatGroupMembersScalarFieldEnum | Prisma.ChatGroupMembersScalarFieldEnum[]
}

/**
 * Users.ChatGroups
 */
export type Users$ChatGroupsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroups
   */
  select?: Prisma.ChatGroupsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroups
   */
  omit?: Prisma.ChatGroupsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupsInclude<ExtArgs> | null
  where?: Prisma.ChatGroupsWhereInput
  orderBy?: Prisma.ChatGroupsOrderByWithRelationInput | Prisma.ChatGroupsOrderByWithRelationInput[]
  cursor?: Prisma.ChatGroupsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChatGroupsScalarFieldEnum | Prisma.ChatGroupsScalarFieldEnum[]
}

/**
 * Users.ChatMessages
 */
export type Users$ChatMessagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessages
   */
  select?: Prisma.ChatMessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessages
   */
  omit?: Prisma.ChatMessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessagesInclude<ExtArgs> | null
  where?: Prisma.ChatMessagesWhereInput
  orderBy?: Prisma.ChatMessagesOrderByWithRelationInput | Prisma.ChatMessagesOrderByWithRelationInput[]
  cursor?: Prisma.ChatMessagesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChatMessagesScalarFieldEnum | Prisma.ChatMessagesScalarFieldEnum[]
}

/**
 * Users.Chats
 */
export type Users$ChatsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chats
   */
  select?: Prisma.ChatsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chats
   */
  omit?: Prisma.ChatsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatsInclude<ExtArgs> | null
  where?: Prisma.ChatsWhereInput
  orderBy?: Prisma.ChatsOrderByWithRelationInput | Prisma.ChatsOrderByWithRelationInput[]
  cursor?: Prisma.ChatsWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChatsScalarFieldEnum | Prisma.ChatsScalarFieldEnum[]
}

/**
 * Users without action
 */
export type UsersDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Users
   */
  select?: Prisma.UsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Users
   */
  omit?: Prisma.UsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersInclude<ExtArgs> | null
}
