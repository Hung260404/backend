
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ChatMessages` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ChatMessages
 * 
 */
export type ChatMessagesModel = runtime.Types.Result.DefaultSelection<Prisma.$ChatMessagesPayload>

export type AggregateChatMessages = {
  _count: ChatMessagesCountAggregateOutputType | null
  _avg: ChatMessagesAvgAggregateOutputType | null
  _sum: ChatMessagesSumAggregateOutputType | null
  _min: ChatMessagesMinAggregateOutputType | null
  _max: ChatMessagesMaxAggregateOutputType | null
}

export type ChatMessagesAvgAggregateOutputType = {
  id: number | null
  chatGroupId: number | null
  userIdSender: number | null
  deletedBy: number | null
}

export type ChatMessagesSumAggregateOutputType = {
  id: number | null
  chatGroupId: number | null
  userIdSender: number | null
  deletedBy: number | null
}

export type ChatMessagesMinAggregateOutputType = {
  id: number | null
  chatGroupId: number | null
  userIdSender: number | null
  messageText: string | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ChatMessagesMaxAggregateOutputType = {
  id: number | null
  chatGroupId: number | null
  userIdSender: number | null
  messageText: string | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ChatMessagesCountAggregateOutputType = {
  id: number
  chatGroupId: number
  userIdSender: number
  messageText: number
  deletedBy: number
  isDeleted: number
  deletedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ChatMessagesAvgAggregateInputType = {
  id?: true
  chatGroupId?: true
  userIdSender?: true
  deletedBy?: true
}

export type ChatMessagesSumAggregateInputType = {
  id?: true
  chatGroupId?: true
  userIdSender?: true
  deletedBy?: true
}

export type ChatMessagesMinAggregateInputType = {
  id?: true
  chatGroupId?: true
  userIdSender?: true
  messageText?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ChatMessagesMaxAggregateInputType = {
  id?: true
  chatGroupId?: true
  userIdSender?: true
  messageText?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ChatMessagesCountAggregateInputType = {
  id?: true
  chatGroupId?: true
  userIdSender?: true
  messageText?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ChatMessagesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatMessages to aggregate.
   */
  where?: Prisma.ChatMessagesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatMessages to fetch.
   */
  orderBy?: Prisma.ChatMessagesOrderByWithRelationInput | Prisma.ChatMessagesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChatMessagesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ChatMessages
  **/
  _count?: true | ChatMessagesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ChatMessagesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ChatMessagesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChatMessagesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChatMessagesMaxAggregateInputType
}

export type GetChatMessagesAggregateType<T extends ChatMessagesAggregateArgs> = {
      [P in keyof T & keyof AggregateChatMessages]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChatMessages[P]>
    : Prisma.GetScalarType<T[P], AggregateChatMessages[P]>
}




export type ChatMessagesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatMessagesWhereInput
  orderBy?: Prisma.ChatMessagesOrderByWithAggregationInput | Prisma.ChatMessagesOrderByWithAggregationInput[]
  by: Prisma.ChatMessagesScalarFieldEnum[] | Prisma.ChatMessagesScalarFieldEnum
  having?: Prisma.ChatMessagesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChatMessagesCountAggregateInputType | true
  _avg?: ChatMessagesAvgAggregateInputType
  _sum?: ChatMessagesSumAggregateInputType
  _min?: ChatMessagesMinAggregateInputType
  _max?: ChatMessagesMaxAggregateInputType
}

export type ChatMessagesGroupByOutputType = {
  id: number
  chatGroupId: number
  userIdSender: number
  messageText: string | null
  deletedBy: number
  isDeleted: boolean
  deletedAt: Date | null
  createdAt: Date
  updatedAt: Date
  _count: ChatMessagesCountAggregateOutputType | null
  _avg: ChatMessagesAvgAggregateOutputType | null
  _sum: ChatMessagesSumAggregateOutputType | null
  _min: ChatMessagesMinAggregateOutputType | null
  _max: ChatMessagesMaxAggregateOutputType | null
}

type GetChatMessagesGroupByPayload<T extends ChatMessagesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChatMessagesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChatMessagesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChatMessagesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChatMessagesGroupByOutputType[P]>
      }
    >
  >



export type ChatMessagesWhereInput = {
  AND?: Prisma.ChatMessagesWhereInput | Prisma.ChatMessagesWhereInput[]
  OR?: Prisma.ChatMessagesWhereInput[]
  NOT?: Prisma.ChatMessagesWhereInput | Prisma.ChatMessagesWhereInput[]
  id?: Prisma.IntFilter<"ChatMessages"> | number
  chatGroupId?: Prisma.IntFilter<"ChatMessages"> | number
  userIdSender?: Prisma.IntFilter<"ChatMessages"> | number
  messageText?: Prisma.StringNullableFilter<"ChatMessages"> | string | null
  deletedBy?: Prisma.IntFilter<"ChatMessages"> | number
  isDeleted?: Prisma.BoolFilter<"ChatMessages"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"ChatMessages"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"ChatMessages"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChatMessages"> | Date | string
  ChatGroups?: Prisma.XOR<Prisma.ChatGroupsScalarRelationFilter, Prisma.ChatGroupsWhereInput>
  Users?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.UsersWhereInput>
}

export type ChatMessagesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  chatGroupId?: Prisma.SortOrder
  userIdSender?: Prisma.SortOrder
  messageText?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  ChatGroups?: Prisma.ChatGroupsOrderByWithRelationInput
  Users?: Prisma.UsersOrderByWithRelationInput
  _relevance?: Prisma.ChatMessagesOrderByRelevanceInput
}

export type ChatMessagesWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.ChatMessagesWhereInput | Prisma.ChatMessagesWhereInput[]
  OR?: Prisma.ChatMessagesWhereInput[]
  NOT?: Prisma.ChatMessagesWhereInput | Prisma.ChatMessagesWhereInput[]
  chatGroupId?: Prisma.IntFilter<"ChatMessages"> | number
  userIdSender?: Prisma.IntFilter<"ChatMessages"> | number
  messageText?: Prisma.StringNullableFilter<"ChatMessages"> | string | null
  deletedBy?: Prisma.IntFilter<"ChatMessages"> | number
  isDeleted?: Prisma.BoolFilter<"ChatMessages"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"ChatMessages"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"ChatMessages"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChatMessages"> | Date | string
  ChatGroups?: Prisma.XOR<Prisma.ChatGroupsScalarRelationFilter, Prisma.ChatGroupsWhereInput>
  Users?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.UsersWhereInput>
}, "id">

export type ChatMessagesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  chatGroupId?: Prisma.SortOrder
  userIdSender?: Prisma.SortOrder
  messageText?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ChatMessagesCountOrderByAggregateInput
  _avg?: Prisma.ChatMessagesAvgOrderByAggregateInput
  _max?: Prisma.ChatMessagesMaxOrderByAggregateInput
  _min?: Prisma.ChatMessagesMinOrderByAggregateInput
  _sum?: Prisma.ChatMessagesSumOrderByAggregateInput
}

export type ChatMessagesScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChatMessagesScalarWhereWithAggregatesInput | Prisma.ChatMessagesScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChatMessagesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChatMessagesScalarWhereWithAggregatesInput | Prisma.ChatMessagesScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ChatMessages"> | number
  chatGroupId?: Prisma.IntWithAggregatesFilter<"ChatMessages"> | number
  userIdSender?: Prisma.IntWithAggregatesFilter<"ChatMessages"> | number
  messageText?: Prisma.StringNullableWithAggregatesFilter<"ChatMessages"> | string | null
  deletedBy?: Prisma.IntWithAggregatesFilter<"ChatMessages"> | number
  isDeleted?: Prisma.BoolWithAggregatesFilter<"ChatMessages"> | boolean
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"ChatMessages"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ChatMessages"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ChatMessages"> | Date | string
}

export type ChatMessagesCreateInput = {
  messageText?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroups: Prisma.ChatGroupsCreateNestedOneWithoutChatMessagesInput
  Users: Prisma.UsersCreateNestedOneWithoutChatMessagesInput
}

export type ChatMessagesUncheckedCreateInput = {
  id?: number
  chatGroupId: number
  userIdSender: number
  messageText?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatMessagesUpdateInput = {
  messageText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroups?: Prisma.ChatGroupsUpdateOneRequiredWithoutChatMessagesNestedInput
  Users?: Prisma.UsersUpdateOneRequiredWithoutChatMessagesNestedInput
}

export type ChatMessagesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  chatGroupId?: Prisma.IntFieldUpdateOperationsInput | number
  userIdSender?: Prisma.IntFieldUpdateOperationsInput | number
  messageText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatMessagesCreateManyInput = {
  id?: number
  chatGroupId: number
  userIdSender: number
  messageText?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatMessagesUpdateManyMutationInput = {
  messageText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatMessagesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  chatGroupId?: Prisma.IntFieldUpdateOperationsInput | number
  userIdSender?: Prisma.IntFieldUpdateOperationsInput | number
  messageText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatMessagesListRelationFilter = {
  every?: Prisma.ChatMessagesWhereInput
  some?: Prisma.ChatMessagesWhereInput
  none?: Prisma.ChatMessagesWhereInput
}

export type ChatMessagesOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ChatMessagesOrderByRelevanceInput = {
  fields: Prisma.ChatMessagesOrderByRelevanceFieldEnum | Prisma.ChatMessagesOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ChatMessagesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatGroupId?: Prisma.SortOrder
  userIdSender?: Prisma.SortOrder
  messageText?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChatMessagesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatGroupId?: Prisma.SortOrder
  userIdSender?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type ChatMessagesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatGroupId?: Prisma.SortOrder
  userIdSender?: Prisma.SortOrder
  messageText?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChatMessagesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatGroupId?: Prisma.SortOrder
  userIdSender?: Prisma.SortOrder
  messageText?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChatMessagesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  chatGroupId?: Prisma.SortOrder
  userIdSender?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type ChatMessagesCreateNestedManyWithoutChatGroupsInput = {
  create?: Prisma.XOR<Prisma.ChatMessagesCreateWithoutChatGroupsInput, Prisma.ChatMessagesUncheckedCreateWithoutChatGroupsInput> | Prisma.ChatMessagesCreateWithoutChatGroupsInput[] | Prisma.ChatMessagesUncheckedCreateWithoutChatGroupsInput[]
  connectOrCreate?: Prisma.ChatMessagesCreateOrConnectWithoutChatGroupsInput | Prisma.ChatMessagesCreateOrConnectWithoutChatGroupsInput[]
  createMany?: Prisma.ChatMessagesCreateManyChatGroupsInputEnvelope
  connect?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
}

export type ChatMessagesUncheckedCreateNestedManyWithoutChatGroupsInput = {
  create?: Prisma.XOR<Prisma.ChatMessagesCreateWithoutChatGroupsInput, Prisma.ChatMessagesUncheckedCreateWithoutChatGroupsInput> | Prisma.ChatMessagesCreateWithoutChatGroupsInput[] | Prisma.ChatMessagesUncheckedCreateWithoutChatGroupsInput[]
  connectOrCreate?: Prisma.ChatMessagesCreateOrConnectWithoutChatGroupsInput | Prisma.ChatMessagesCreateOrConnectWithoutChatGroupsInput[]
  createMany?: Prisma.ChatMessagesCreateManyChatGroupsInputEnvelope
  connect?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
}

export type ChatMessagesUpdateManyWithoutChatGroupsNestedInput = {
  create?: Prisma.XOR<Prisma.ChatMessagesCreateWithoutChatGroupsInput, Prisma.ChatMessagesUncheckedCreateWithoutChatGroupsInput> | Prisma.ChatMessagesCreateWithoutChatGroupsInput[] | Prisma.ChatMessagesUncheckedCreateWithoutChatGroupsInput[]
  connectOrCreate?: Prisma.ChatMessagesCreateOrConnectWithoutChatGroupsInput | Prisma.ChatMessagesCreateOrConnectWithoutChatGroupsInput[]
  upsert?: Prisma.ChatMessagesUpsertWithWhereUniqueWithoutChatGroupsInput | Prisma.ChatMessagesUpsertWithWhereUniqueWithoutChatGroupsInput[]
  createMany?: Prisma.ChatMessagesCreateManyChatGroupsInputEnvelope
  set?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  disconnect?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  delete?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  connect?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  update?: Prisma.ChatMessagesUpdateWithWhereUniqueWithoutChatGroupsInput | Prisma.ChatMessagesUpdateWithWhereUniqueWithoutChatGroupsInput[]
  updateMany?: Prisma.ChatMessagesUpdateManyWithWhereWithoutChatGroupsInput | Prisma.ChatMessagesUpdateManyWithWhereWithoutChatGroupsInput[]
  deleteMany?: Prisma.ChatMessagesScalarWhereInput | Prisma.ChatMessagesScalarWhereInput[]
}

export type ChatMessagesUncheckedUpdateManyWithoutChatGroupsNestedInput = {
  create?: Prisma.XOR<Prisma.ChatMessagesCreateWithoutChatGroupsInput, Prisma.ChatMessagesUncheckedCreateWithoutChatGroupsInput> | Prisma.ChatMessagesCreateWithoutChatGroupsInput[] | Prisma.ChatMessagesUncheckedCreateWithoutChatGroupsInput[]
  connectOrCreate?: Prisma.ChatMessagesCreateOrConnectWithoutChatGroupsInput | Prisma.ChatMessagesCreateOrConnectWithoutChatGroupsInput[]
  upsert?: Prisma.ChatMessagesUpsertWithWhereUniqueWithoutChatGroupsInput | Prisma.ChatMessagesUpsertWithWhereUniqueWithoutChatGroupsInput[]
  createMany?: Prisma.ChatMessagesCreateManyChatGroupsInputEnvelope
  set?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  disconnect?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  delete?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  connect?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  update?: Prisma.ChatMessagesUpdateWithWhereUniqueWithoutChatGroupsInput | Prisma.ChatMessagesUpdateWithWhereUniqueWithoutChatGroupsInput[]
  updateMany?: Prisma.ChatMessagesUpdateManyWithWhereWithoutChatGroupsInput | Prisma.ChatMessagesUpdateManyWithWhereWithoutChatGroupsInput[]
  deleteMany?: Prisma.ChatMessagesScalarWhereInput | Prisma.ChatMessagesScalarWhereInput[]
}

export type ChatMessagesCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.ChatMessagesCreateWithoutUsersInput, Prisma.ChatMessagesUncheckedCreateWithoutUsersInput> | Prisma.ChatMessagesCreateWithoutUsersInput[] | Prisma.ChatMessagesUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatMessagesCreateOrConnectWithoutUsersInput | Prisma.ChatMessagesCreateOrConnectWithoutUsersInput[]
  createMany?: Prisma.ChatMessagesCreateManyUsersInputEnvelope
  connect?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
}

export type ChatMessagesUncheckedCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.ChatMessagesCreateWithoutUsersInput, Prisma.ChatMessagesUncheckedCreateWithoutUsersInput> | Prisma.ChatMessagesCreateWithoutUsersInput[] | Prisma.ChatMessagesUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatMessagesCreateOrConnectWithoutUsersInput | Prisma.ChatMessagesCreateOrConnectWithoutUsersInput[]
  createMany?: Prisma.ChatMessagesCreateManyUsersInputEnvelope
  connect?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
}

export type ChatMessagesUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.ChatMessagesCreateWithoutUsersInput, Prisma.ChatMessagesUncheckedCreateWithoutUsersInput> | Prisma.ChatMessagesCreateWithoutUsersInput[] | Prisma.ChatMessagesUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatMessagesCreateOrConnectWithoutUsersInput | Prisma.ChatMessagesCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.ChatMessagesUpsertWithWhereUniqueWithoutUsersInput | Prisma.ChatMessagesUpsertWithWhereUniqueWithoutUsersInput[]
  createMany?: Prisma.ChatMessagesCreateManyUsersInputEnvelope
  set?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  disconnect?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  delete?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  connect?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  update?: Prisma.ChatMessagesUpdateWithWhereUniqueWithoutUsersInput | Prisma.ChatMessagesUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.ChatMessagesUpdateManyWithWhereWithoutUsersInput | Prisma.ChatMessagesUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.ChatMessagesScalarWhereInput | Prisma.ChatMessagesScalarWhereInput[]
}

export type ChatMessagesUncheckedUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.ChatMessagesCreateWithoutUsersInput, Prisma.ChatMessagesUncheckedCreateWithoutUsersInput> | Prisma.ChatMessagesCreateWithoutUsersInput[] | Prisma.ChatMessagesUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatMessagesCreateOrConnectWithoutUsersInput | Prisma.ChatMessagesCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.ChatMessagesUpsertWithWhereUniqueWithoutUsersInput | Prisma.ChatMessagesUpsertWithWhereUniqueWithoutUsersInput[]
  createMany?: Prisma.ChatMessagesCreateManyUsersInputEnvelope
  set?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  disconnect?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  delete?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  connect?: Prisma.ChatMessagesWhereUniqueInput | Prisma.ChatMessagesWhereUniqueInput[]
  update?: Prisma.ChatMessagesUpdateWithWhereUniqueWithoutUsersInput | Prisma.ChatMessagesUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.ChatMessagesUpdateManyWithWhereWithoutUsersInput | Prisma.ChatMessagesUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.ChatMessagesScalarWhereInput | Prisma.ChatMessagesScalarWhereInput[]
}

export type ChatMessagesCreateWithoutChatGroupsInput = {
  messageText?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Users: Prisma.UsersCreateNestedOneWithoutChatMessagesInput
}

export type ChatMessagesUncheckedCreateWithoutChatGroupsInput = {
  id?: number
  userIdSender: number
  messageText?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatMessagesCreateOrConnectWithoutChatGroupsInput = {
  where: Prisma.ChatMessagesWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatMessagesCreateWithoutChatGroupsInput, Prisma.ChatMessagesUncheckedCreateWithoutChatGroupsInput>
}

export type ChatMessagesCreateManyChatGroupsInputEnvelope = {
  data: Prisma.ChatMessagesCreateManyChatGroupsInput | Prisma.ChatMessagesCreateManyChatGroupsInput[]
  skipDuplicates?: boolean
}

export type ChatMessagesUpsertWithWhereUniqueWithoutChatGroupsInput = {
  where: Prisma.ChatMessagesWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatMessagesUpdateWithoutChatGroupsInput, Prisma.ChatMessagesUncheckedUpdateWithoutChatGroupsInput>
  create: Prisma.XOR<Prisma.ChatMessagesCreateWithoutChatGroupsInput, Prisma.ChatMessagesUncheckedCreateWithoutChatGroupsInput>
}

export type ChatMessagesUpdateWithWhereUniqueWithoutChatGroupsInput = {
  where: Prisma.ChatMessagesWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatMessagesUpdateWithoutChatGroupsInput, Prisma.ChatMessagesUncheckedUpdateWithoutChatGroupsInput>
}

export type ChatMessagesUpdateManyWithWhereWithoutChatGroupsInput = {
  where: Prisma.ChatMessagesScalarWhereInput
  data: Prisma.XOR<Prisma.ChatMessagesUpdateManyMutationInput, Prisma.ChatMessagesUncheckedUpdateManyWithoutChatGroupsInput>
}

export type ChatMessagesScalarWhereInput = {
  AND?: Prisma.ChatMessagesScalarWhereInput | Prisma.ChatMessagesScalarWhereInput[]
  OR?: Prisma.ChatMessagesScalarWhereInput[]
  NOT?: Prisma.ChatMessagesScalarWhereInput | Prisma.ChatMessagesScalarWhereInput[]
  id?: Prisma.IntFilter<"ChatMessages"> | number
  chatGroupId?: Prisma.IntFilter<"ChatMessages"> | number
  userIdSender?: Prisma.IntFilter<"ChatMessages"> | number
  messageText?: Prisma.StringNullableFilter<"ChatMessages"> | string | null
  deletedBy?: Prisma.IntFilter<"ChatMessages"> | number
  isDeleted?: Prisma.BoolFilter<"ChatMessages"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"ChatMessages"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"ChatMessages"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChatMessages"> | Date | string
}

export type ChatMessagesCreateWithoutUsersInput = {
  messageText?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroups: Prisma.ChatGroupsCreateNestedOneWithoutChatMessagesInput
}

export type ChatMessagesUncheckedCreateWithoutUsersInput = {
  id?: number
  chatGroupId: number
  messageText?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatMessagesCreateOrConnectWithoutUsersInput = {
  where: Prisma.ChatMessagesWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatMessagesCreateWithoutUsersInput, Prisma.ChatMessagesUncheckedCreateWithoutUsersInput>
}

export type ChatMessagesCreateManyUsersInputEnvelope = {
  data: Prisma.ChatMessagesCreateManyUsersInput | Prisma.ChatMessagesCreateManyUsersInput[]
  skipDuplicates?: boolean
}

export type ChatMessagesUpsertWithWhereUniqueWithoutUsersInput = {
  where: Prisma.ChatMessagesWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatMessagesUpdateWithoutUsersInput, Prisma.ChatMessagesUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.ChatMessagesCreateWithoutUsersInput, Prisma.ChatMessagesUncheckedCreateWithoutUsersInput>
}

export type ChatMessagesUpdateWithWhereUniqueWithoutUsersInput = {
  where: Prisma.ChatMessagesWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatMessagesUpdateWithoutUsersInput, Prisma.ChatMessagesUncheckedUpdateWithoutUsersInput>
}

export type ChatMessagesUpdateManyWithWhereWithoutUsersInput = {
  where: Prisma.ChatMessagesScalarWhereInput
  data: Prisma.XOR<Prisma.ChatMessagesUpdateManyMutationInput, Prisma.ChatMessagesUncheckedUpdateManyWithoutUsersInput>
}

export type ChatMessagesCreateManyChatGroupsInput = {
  id?: number
  userIdSender: number
  messageText?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatMessagesUpdateWithoutChatGroupsInput = {
  messageText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Users?: Prisma.UsersUpdateOneRequiredWithoutChatMessagesNestedInput
}

export type ChatMessagesUncheckedUpdateWithoutChatGroupsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userIdSender?: Prisma.IntFieldUpdateOperationsInput | number
  messageText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatMessagesUncheckedUpdateManyWithoutChatGroupsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userIdSender?: Prisma.IntFieldUpdateOperationsInput | number
  messageText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatMessagesCreateManyUsersInput = {
  id?: number
  chatGroupId: number
  messageText?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatMessagesUpdateWithoutUsersInput = {
  messageText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroups?: Prisma.ChatGroupsUpdateOneRequiredWithoutChatMessagesNestedInput
}

export type ChatMessagesUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  chatGroupId?: Prisma.IntFieldUpdateOperationsInput | number
  messageText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatMessagesUncheckedUpdateManyWithoutUsersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  chatGroupId?: Prisma.IntFieldUpdateOperationsInput | number
  messageText?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ChatMessagesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  chatGroupId?: boolean
  userIdSender?: boolean
  messageText?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  ChatGroups?: boolean | Prisma.ChatGroupsDefaultArgs<ExtArgs>
  Users?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chatMessages"]>



export type ChatMessagesSelectScalar = {
  id?: boolean
  chatGroupId?: boolean
  userIdSender?: boolean
  messageText?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ChatMessagesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "chatGroupId" | "userIdSender" | "messageText" | "deletedBy" | "isDeleted" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["chatMessages"]>
export type ChatMessagesInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ChatGroups?: boolean | Prisma.ChatGroupsDefaultArgs<ExtArgs>
  Users?: boolean | Prisma.UsersDefaultArgs<ExtArgs>
}

export type $ChatMessagesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ChatMessages"
  objects: {
    ChatGroups: Prisma.$ChatGroupsPayload<ExtArgs>
    Users: Prisma.$UsersPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    chatGroupId: number
    userIdSender: number
    messageText: string | null
    deletedBy: number
    isDeleted: boolean
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["chatMessages"]>
  composites: {}
}

export type ChatMessagesGetPayload<S extends boolean | null | undefined | ChatMessagesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChatMessagesPayload, S>

export type ChatMessagesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChatMessagesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChatMessagesCountAggregateInputType | true
  }

export interface ChatMessagesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessages'], meta: { name: 'ChatMessages' } }
  /**
   * Find zero or one ChatMessages that matches the filter.
   * @param {ChatMessagesFindUniqueArgs} args - Arguments to find a ChatMessages
   * @example
   * // Get one ChatMessages
   * const chatMessages = await prisma.chatMessages.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChatMessagesFindUniqueArgs>(args: Prisma.SelectSubset<T, ChatMessagesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChatMessagesClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ChatMessages that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChatMessagesFindUniqueOrThrowArgs} args - Arguments to find a ChatMessages
   * @example
   * // Get one ChatMessages
   * const chatMessages = await prisma.chatMessages.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChatMessagesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChatMessagesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatMessagesClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatMessages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessagesFindFirstArgs} args - Arguments to find a ChatMessages
   * @example
   * // Get one ChatMessages
   * const chatMessages = await prisma.chatMessages.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChatMessagesFindFirstArgs>(args?: Prisma.SelectSubset<T, ChatMessagesFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChatMessagesClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatMessages that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessagesFindFirstOrThrowArgs} args - Arguments to find a ChatMessages
   * @example
   * // Get one ChatMessages
   * const chatMessages = await prisma.chatMessages.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChatMessagesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChatMessagesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatMessagesClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ChatMessages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessagesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChatMessages
   * const chatMessages = await prisma.chatMessages.findMany()
   * 
   * // Get first 10 ChatMessages
   * const chatMessages = await prisma.chatMessages.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chatMessagesWithIdOnly = await prisma.chatMessages.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChatMessagesFindManyArgs>(args?: Prisma.SelectSubset<T, ChatMessagesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ChatMessages.
   * @param {ChatMessagesCreateArgs} args - Arguments to create a ChatMessages.
   * @example
   * // Create one ChatMessages
   * const ChatMessages = await prisma.chatMessages.create({
   *   data: {
   *     // ... data to create a ChatMessages
   *   }
   * })
   * 
   */
  create<T extends ChatMessagesCreateArgs>(args: Prisma.SelectSubset<T, ChatMessagesCreateArgs<ExtArgs>>): Prisma.Prisma__ChatMessagesClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ChatMessages.
   * @param {ChatMessagesCreateManyArgs} args - Arguments to create many ChatMessages.
   * @example
   * // Create many ChatMessages
   * const chatMessages = await prisma.chatMessages.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChatMessagesCreateManyArgs>(args?: Prisma.SelectSubset<T, ChatMessagesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a ChatMessages.
   * @param {ChatMessagesDeleteArgs} args - Arguments to delete one ChatMessages.
   * @example
   * // Delete one ChatMessages
   * const ChatMessages = await prisma.chatMessages.delete({
   *   where: {
   *     // ... filter to delete one ChatMessages
   *   }
   * })
   * 
   */
  delete<T extends ChatMessagesDeleteArgs>(args: Prisma.SelectSubset<T, ChatMessagesDeleteArgs<ExtArgs>>): Prisma.Prisma__ChatMessagesClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ChatMessages.
   * @param {ChatMessagesUpdateArgs} args - Arguments to update one ChatMessages.
   * @example
   * // Update one ChatMessages
   * const chatMessages = await prisma.chatMessages.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChatMessagesUpdateArgs>(args: Prisma.SelectSubset<T, ChatMessagesUpdateArgs<ExtArgs>>): Prisma.Prisma__ChatMessagesClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ChatMessages.
   * @param {ChatMessagesDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
   * @example
   * // Delete a few ChatMessages
   * const { count } = await prisma.chatMessages.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChatMessagesDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChatMessagesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessagesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChatMessages
   * const chatMessages = await prisma.chatMessages.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChatMessagesUpdateManyArgs>(args: Prisma.SelectSubset<T, ChatMessagesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one ChatMessages.
   * @param {ChatMessagesUpsertArgs} args - Arguments to update or create a ChatMessages.
   * @example
   * // Update or create a ChatMessages
   * const chatMessages = await prisma.chatMessages.upsert({
   *   create: {
   *     // ... data to create a ChatMessages
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ChatMessages we want to update
   *   }
   * })
   */
  upsert<T extends ChatMessagesUpsertArgs>(args: Prisma.SelectSubset<T, ChatMessagesUpsertArgs<ExtArgs>>): Prisma.Prisma__ChatMessagesClient<runtime.Types.Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ChatMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessagesCountArgs} args - Arguments to filter ChatMessages to count.
   * @example
   * // Count the number of ChatMessages
   * const count = await prisma.chatMessages.count({
   *   where: {
   *     // ... the filter for the ChatMessages we want to count
   *   }
   * })
  **/
  count<T extends ChatMessagesCountArgs>(
    args?: Prisma.Subset<T, ChatMessagesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChatMessagesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ChatMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChatMessagesAggregateArgs>(args: Prisma.Subset<T, ChatMessagesAggregateArgs>): Prisma.PrismaPromise<GetChatMessagesAggregateType<T>>

  /**
   * Group by ChatMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatMessagesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChatMessagesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChatMessagesGroupByArgs['orderBy'] }
      : { orderBy?: ChatMessagesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChatMessagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ChatMessages model
 */
readonly fields: ChatMessagesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ChatMessages.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChatMessagesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  ChatGroups<T extends Prisma.ChatGroupsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatGroupsDefaultArgs<ExtArgs>>): Prisma.Prisma__ChatGroupsClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Users<T extends Prisma.UsersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UsersDefaultArgs<ExtArgs>>): Prisma.Prisma__UsersClient<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ChatMessages model
 */
export interface ChatMessagesFieldRefs {
  readonly id: Prisma.FieldRef<"ChatMessages", 'Int'>
  readonly chatGroupId: Prisma.FieldRef<"ChatMessages", 'Int'>
  readonly userIdSender: Prisma.FieldRef<"ChatMessages", 'Int'>
  readonly messageText: Prisma.FieldRef<"ChatMessages", 'String'>
  readonly deletedBy: Prisma.FieldRef<"ChatMessages", 'Int'>
  readonly isDeleted: Prisma.FieldRef<"ChatMessages", 'Boolean'>
  readonly deletedAt: Prisma.FieldRef<"ChatMessages", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"ChatMessages", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ChatMessages", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ChatMessages findUnique
 */
export type ChatMessagesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessages
   */
  select?: Prisma.ChatMessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessages
   */
  omit?: Prisma.ChatMessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessagesInclude<ExtArgs> | null
  /**
   * Filter, which ChatMessages to fetch.
   */
  where: Prisma.ChatMessagesWhereUniqueInput
}

/**
 * ChatMessages findUniqueOrThrow
 */
export type ChatMessagesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessages
   */
  select?: Prisma.ChatMessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessages
   */
  omit?: Prisma.ChatMessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessagesInclude<ExtArgs> | null
  /**
   * Filter, which ChatMessages to fetch.
   */
  where: Prisma.ChatMessagesWhereUniqueInput
}

/**
 * ChatMessages findFirst
 */
export type ChatMessagesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessages
   */
  select?: Prisma.ChatMessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessages
   */
  omit?: Prisma.ChatMessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessagesInclude<ExtArgs> | null
  /**
   * Filter, which ChatMessages to fetch.
   */
  where?: Prisma.ChatMessagesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatMessages to fetch.
   */
  orderBy?: Prisma.ChatMessagesOrderByWithRelationInput | Prisma.ChatMessagesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatMessages.
   */
  cursor?: Prisma.ChatMessagesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatMessages.
   */
  distinct?: Prisma.ChatMessagesScalarFieldEnum | Prisma.ChatMessagesScalarFieldEnum[]
}

/**
 * ChatMessages findFirstOrThrow
 */
export type ChatMessagesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessages
   */
  select?: Prisma.ChatMessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessages
   */
  omit?: Prisma.ChatMessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessagesInclude<ExtArgs> | null
  /**
   * Filter, which ChatMessages to fetch.
   */
  where?: Prisma.ChatMessagesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatMessages to fetch.
   */
  orderBy?: Prisma.ChatMessagesOrderByWithRelationInput | Prisma.ChatMessagesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatMessages.
   */
  cursor?: Prisma.ChatMessagesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatMessages.
   */
  distinct?: Prisma.ChatMessagesScalarFieldEnum | Prisma.ChatMessagesScalarFieldEnum[]
}

/**
 * ChatMessages findMany
 */
export type ChatMessagesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessages
   */
  select?: Prisma.ChatMessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessages
   */
  omit?: Prisma.ChatMessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessagesInclude<ExtArgs> | null
  /**
   * Filter, which ChatMessages to fetch.
   */
  where?: Prisma.ChatMessagesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatMessages to fetch.
   */
  orderBy?: Prisma.ChatMessagesOrderByWithRelationInput | Prisma.ChatMessagesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ChatMessages.
   */
  cursor?: Prisma.ChatMessagesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatMessages.
   */
  skip?: number
  distinct?: Prisma.ChatMessagesScalarFieldEnum | Prisma.ChatMessagesScalarFieldEnum[]
}

/**
 * ChatMessages create
 */
export type ChatMessagesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessages
   */
  select?: Prisma.ChatMessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessages
   */
  omit?: Prisma.ChatMessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessagesInclude<ExtArgs> | null
  /**
   * The data needed to create a ChatMessages.
   */
  data: Prisma.XOR<Prisma.ChatMessagesCreateInput, Prisma.ChatMessagesUncheckedCreateInput>
}

/**
 * ChatMessages createMany
 */
export type ChatMessagesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ChatMessages.
   */
  data: Prisma.ChatMessagesCreateManyInput | Prisma.ChatMessagesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ChatMessages update
 */
export type ChatMessagesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessages
   */
  select?: Prisma.ChatMessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessages
   */
  omit?: Prisma.ChatMessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessagesInclude<ExtArgs> | null
  /**
   * The data needed to update a ChatMessages.
   */
  data: Prisma.XOR<Prisma.ChatMessagesUpdateInput, Prisma.ChatMessagesUncheckedUpdateInput>
  /**
   * Choose, which ChatMessages to update.
   */
  where: Prisma.ChatMessagesWhereUniqueInput
}

/**
 * ChatMessages updateMany
 */
export type ChatMessagesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ChatMessages.
   */
  data: Prisma.XOR<Prisma.ChatMessagesUpdateManyMutationInput, Prisma.ChatMessagesUncheckedUpdateManyInput>
  /**
   * Filter which ChatMessages to update
   */
  where?: Prisma.ChatMessagesWhereInput
  /**
   * Limit how many ChatMessages to update.
   */
  limit?: number
}

/**
 * ChatMessages upsert
 */
export type ChatMessagesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessages
   */
  select?: Prisma.ChatMessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessages
   */
  omit?: Prisma.ChatMessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessagesInclude<ExtArgs> | null
  /**
   * The filter to search for the ChatMessages to update in case it exists.
   */
  where: Prisma.ChatMessagesWhereUniqueInput
  /**
   * In case the ChatMessages found by the `where` argument doesn't exist, create a new ChatMessages with this data.
   */
  create: Prisma.XOR<Prisma.ChatMessagesCreateInput, Prisma.ChatMessagesUncheckedCreateInput>
  /**
   * In case the ChatMessages was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChatMessagesUpdateInput, Prisma.ChatMessagesUncheckedUpdateInput>
}

/**
 * ChatMessages delete
 */
export type ChatMessagesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessages
   */
  select?: Prisma.ChatMessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessages
   */
  omit?: Prisma.ChatMessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessagesInclude<ExtArgs> | null
  /**
   * Filter which ChatMessages to delete.
   */
  where: Prisma.ChatMessagesWhereUniqueInput
}

/**
 * ChatMessages deleteMany
 */
export type ChatMessagesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatMessages to delete
   */
  where?: Prisma.ChatMessagesWhereInput
  /**
   * Limit how many ChatMessages to delete.
   */
  limit?: number
}

/**
 * ChatMessages without action
 */
export type ChatMessagesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessages
   */
  select?: Prisma.ChatMessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessages
   */
  omit?: Prisma.ChatMessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessagesInclude<ExtArgs> | null
}
