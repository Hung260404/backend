
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `RolePermission` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model RolePermission
 * 
 */
export type RolePermissionModel = runtime.Types.Result.DefaultSelection<Prisma.$RolePermissionPayload>

export type AggregateRolePermission = {
  _count: RolePermissionCountAggregateOutputType | null
  _avg: RolePermissionAvgAggregateOutputType | null
  _sum: RolePermissionSumAggregateOutputType | null
  _min: RolePermissionMinAggregateOutputType | null
  _max: RolePermissionMaxAggregateOutputType | null
}

export type RolePermissionAvgAggregateOutputType = {
  id: number | null
  roleId: number | null
  permissionId: number | null
  deletedBy: number | null
}

export type RolePermissionSumAggregateOutputType = {
  id: number | null
  roleId: number | null
  permissionId: number | null
  deletedBy: number | null
}

export type RolePermissionMinAggregateOutputType = {
  id: number | null
  roleId: number | null
  permissionId: number | null
  isActive: boolean | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type RolePermissionMaxAggregateOutputType = {
  id: number | null
  roleId: number | null
  permissionId: number | null
  isActive: boolean | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type RolePermissionCountAggregateOutputType = {
  id: number
  roleId: number
  permissionId: number
  isActive: number
  deletedBy: number
  isDeleted: number
  deletedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type RolePermissionAvgAggregateInputType = {
  id?: true
  roleId?: true
  permissionId?: true
  deletedBy?: true
}

export type RolePermissionSumAggregateInputType = {
  id?: true
  roleId?: true
  permissionId?: true
  deletedBy?: true
}

export type RolePermissionMinAggregateInputType = {
  id?: true
  roleId?: true
  permissionId?: true
  isActive?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type RolePermissionMaxAggregateInputType = {
  id?: true
  roleId?: true
  permissionId?: true
  isActive?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type RolePermissionCountAggregateInputType = {
  id?: true
  roleId?: true
  permissionId?: true
  isActive?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type RolePermissionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RolePermission to aggregate.
   */
  where?: Prisma.RolePermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RolePermissions to fetch.
   */
  orderBy?: Prisma.RolePermissionOrderByWithRelationInput | Prisma.RolePermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.RolePermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RolePermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RolePermissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned RolePermissions
  **/
  _count?: true | RolePermissionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: RolePermissionAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: RolePermissionSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: RolePermissionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: RolePermissionMaxAggregateInputType
}

export type GetRolePermissionAggregateType<T extends RolePermissionAggregateArgs> = {
      [P in keyof T & keyof AggregateRolePermission]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateRolePermission[P]>
    : Prisma.GetScalarType<T[P], AggregateRolePermission[P]>
}




export type RolePermissionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.RolePermissionWhereInput
  orderBy?: Prisma.RolePermissionOrderByWithAggregationInput | Prisma.RolePermissionOrderByWithAggregationInput[]
  by: Prisma.RolePermissionScalarFieldEnum[] | Prisma.RolePermissionScalarFieldEnum
  having?: Prisma.RolePermissionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: RolePermissionCountAggregateInputType | true
  _avg?: RolePermissionAvgAggregateInputType
  _sum?: RolePermissionSumAggregateInputType
  _min?: RolePermissionMinAggregateInputType
  _max?: RolePermissionMaxAggregateInputType
}

export type RolePermissionGroupByOutputType = {
  id: number
  roleId: number
  permissionId: number
  isActive: boolean | null
  deletedBy: number
  isDeleted: boolean
  deletedAt: Date | null
  createdAt: Date
  updatedAt: Date
  _count: RolePermissionCountAggregateOutputType | null
  _avg: RolePermissionAvgAggregateOutputType | null
  _sum: RolePermissionSumAggregateOutputType | null
  _min: RolePermissionMinAggregateOutputType | null
  _max: RolePermissionMaxAggregateOutputType | null
}

type GetRolePermissionGroupByPayload<T extends RolePermissionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<RolePermissionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof RolePermissionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
      }
    >
  >



export type RolePermissionWhereInput = {
  AND?: Prisma.RolePermissionWhereInput | Prisma.RolePermissionWhereInput[]
  OR?: Prisma.RolePermissionWhereInput[]
  NOT?: Prisma.RolePermissionWhereInput | Prisma.RolePermissionWhereInput[]
  id?: Prisma.IntFilter<"RolePermission"> | number
  roleId?: Prisma.IntFilter<"RolePermission"> | number
  permissionId?: Prisma.IntFilter<"RolePermission"> | number
  isActive?: Prisma.BoolNullableFilter<"RolePermission"> | boolean | null
  deletedBy?: Prisma.IntFilter<"RolePermission"> | number
  isDeleted?: Prisma.BoolFilter<"RolePermission"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"RolePermission"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"RolePermission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"RolePermission"> | Date | string
  Roles?: Prisma.XOR<Prisma.RolesScalarRelationFilter, Prisma.RolesWhereInput>
  Permissions?: Prisma.XOR<Prisma.PermissionsScalarRelationFilter, Prisma.PermissionsWhereInput>
}

export type RolePermissionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  permissionId?: Prisma.SortOrder
  isActive?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  Roles?: Prisma.RolesOrderByWithRelationInput
  Permissions?: Prisma.PermissionsOrderByWithRelationInput
}

export type RolePermissionWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.RolePermissionWhereInput | Prisma.RolePermissionWhereInput[]
  OR?: Prisma.RolePermissionWhereInput[]
  NOT?: Prisma.RolePermissionWhereInput | Prisma.RolePermissionWhereInput[]
  roleId?: Prisma.IntFilter<"RolePermission"> | number
  permissionId?: Prisma.IntFilter<"RolePermission"> | number
  isActive?: Prisma.BoolNullableFilter<"RolePermission"> | boolean | null
  deletedBy?: Prisma.IntFilter<"RolePermission"> | number
  isDeleted?: Prisma.BoolFilter<"RolePermission"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"RolePermission"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"RolePermission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"RolePermission"> | Date | string
  Roles?: Prisma.XOR<Prisma.RolesScalarRelationFilter, Prisma.RolesWhereInput>
  Permissions?: Prisma.XOR<Prisma.PermissionsScalarRelationFilter, Prisma.PermissionsWhereInput>
}, "id">

export type RolePermissionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  permissionId?: Prisma.SortOrder
  isActive?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.RolePermissionCountOrderByAggregateInput
  _avg?: Prisma.RolePermissionAvgOrderByAggregateInput
  _max?: Prisma.RolePermissionMaxOrderByAggregateInput
  _min?: Prisma.RolePermissionMinOrderByAggregateInput
  _sum?: Prisma.RolePermissionSumOrderByAggregateInput
}

export type RolePermissionScalarWhereWithAggregatesInput = {
  AND?: Prisma.RolePermissionScalarWhereWithAggregatesInput | Prisma.RolePermissionScalarWhereWithAggregatesInput[]
  OR?: Prisma.RolePermissionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.RolePermissionScalarWhereWithAggregatesInput | Prisma.RolePermissionScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"RolePermission"> | number
  roleId?: Prisma.IntWithAggregatesFilter<"RolePermission"> | number
  permissionId?: Prisma.IntWithAggregatesFilter<"RolePermission"> | number
  isActive?: Prisma.BoolNullableWithAggregatesFilter<"RolePermission"> | boolean | null
  deletedBy?: Prisma.IntWithAggregatesFilter<"RolePermission"> | number
  isDeleted?: Prisma.BoolWithAggregatesFilter<"RolePermission"> | boolean
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"RolePermission"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"RolePermission"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"RolePermission"> | Date | string
}

export type RolePermissionCreateInput = {
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Roles: Prisma.RolesCreateNestedOneWithoutRolePermissionInput
  Permissions: Prisma.PermissionsCreateNestedOneWithoutRolePermissionInput
}

export type RolePermissionUncheckedCreateInput = {
  id?: number
  roleId: number
  permissionId: number
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RolePermissionUpdateInput = {
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Roles?: Prisma.RolesUpdateOneRequiredWithoutRolePermissionNestedInput
  Permissions?: Prisma.PermissionsUpdateOneRequiredWithoutRolePermissionNestedInput
}

export type RolePermissionUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  roleId?: Prisma.IntFieldUpdateOperationsInput | number
  permissionId?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RolePermissionCreateManyInput = {
  id?: number
  roleId: number
  permissionId: number
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RolePermissionUpdateManyMutationInput = {
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RolePermissionUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  roleId?: Prisma.IntFieldUpdateOperationsInput | number
  permissionId?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RolePermissionListRelationFilter = {
  every?: Prisma.RolePermissionWhereInput
  some?: Prisma.RolePermissionWhereInput
  none?: Prisma.RolePermissionWhereInput
}

export type RolePermissionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type RolePermissionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  permissionId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RolePermissionAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  permissionId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type RolePermissionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  permissionId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RolePermissionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  permissionId?: Prisma.SortOrder
  isActive?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type RolePermissionSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  roleId?: Prisma.SortOrder
  permissionId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type RolePermissionCreateNestedManyWithoutPermissionsInput = {
  create?: Prisma.XOR<Prisma.RolePermissionCreateWithoutPermissionsInput, Prisma.RolePermissionUncheckedCreateWithoutPermissionsInput> | Prisma.RolePermissionCreateWithoutPermissionsInput[] | Prisma.RolePermissionUncheckedCreateWithoutPermissionsInput[]
  connectOrCreate?: Prisma.RolePermissionCreateOrConnectWithoutPermissionsInput | Prisma.RolePermissionCreateOrConnectWithoutPermissionsInput[]
  createMany?: Prisma.RolePermissionCreateManyPermissionsInputEnvelope
  connect?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
}

export type RolePermissionUncheckedCreateNestedManyWithoutPermissionsInput = {
  create?: Prisma.XOR<Prisma.RolePermissionCreateWithoutPermissionsInput, Prisma.RolePermissionUncheckedCreateWithoutPermissionsInput> | Prisma.RolePermissionCreateWithoutPermissionsInput[] | Prisma.RolePermissionUncheckedCreateWithoutPermissionsInput[]
  connectOrCreate?: Prisma.RolePermissionCreateOrConnectWithoutPermissionsInput | Prisma.RolePermissionCreateOrConnectWithoutPermissionsInput[]
  createMany?: Prisma.RolePermissionCreateManyPermissionsInputEnvelope
  connect?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
}

export type RolePermissionUpdateManyWithoutPermissionsNestedInput = {
  create?: Prisma.XOR<Prisma.RolePermissionCreateWithoutPermissionsInput, Prisma.RolePermissionUncheckedCreateWithoutPermissionsInput> | Prisma.RolePermissionCreateWithoutPermissionsInput[] | Prisma.RolePermissionUncheckedCreateWithoutPermissionsInput[]
  connectOrCreate?: Prisma.RolePermissionCreateOrConnectWithoutPermissionsInput | Prisma.RolePermissionCreateOrConnectWithoutPermissionsInput[]
  upsert?: Prisma.RolePermissionUpsertWithWhereUniqueWithoutPermissionsInput | Prisma.RolePermissionUpsertWithWhereUniqueWithoutPermissionsInput[]
  createMany?: Prisma.RolePermissionCreateManyPermissionsInputEnvelope
  set?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  disconnect?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  delete?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  connect?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  update?: Prisma.RolePermissionUpdateWithWhereUniqueWithoutPermissionsInput | Prisma.RolePermissionUpdateWithWhereUniqueWithoutPermissionsInput[]
  updateMany?: Prisma.RolePermissionUpdateManyWithWhereWithoutPermissionsInput | Prisma.RolePermissionUpdateManyWithWhereWithoutPermissionsInput[]
  deleteMany?: Prisma.RolePermissionScalarWhereInput | Prisma.RolePermissionScalarWhereInput[]
}

export type RolePermissionUncheckedUpdateManyWithoutPermissionsNestedInput = {
  create?: Prisma.XOR<Prisma.RolePermissionCreateWithoutPermissionsInput, Prisma.RolePermissionUncheckedCreateWithoutPermissionsInput> | Prisma.RolePermissionCreateWithoutPermissionsInput[] | Prisma.RolePermissionUncheckedCreateWithoutPermissionsInput[]
  connectOrCreate?: Prisma.RolePermissionCreateOrConnectWithoutPermissionsInput | Prisma.RolePermissionCreateOrConnectWithoutPermissionsInput[]
  upsert?: Prisma.RolePermissionUpsertWithWhereUniqueWithoutPermissionsInput | Prisma.RolePermissionUpsertWithWhereUniqueWithoutPermissionsInput[]
  createMany?: Prisma.RolePermissionCreateManyPermissionsInputEnvelope
  set?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  disconnect?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  delete?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  connect?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  update?: Prisma.RolePermissionUpdateWithWhereUniqueWithoutPermissionsInput | Prisma.RolePermissionUpdateWithWhereUniqueWithoutPermissionsInput[]
  updateMany?: Prisma.RolePermissionUpdateManyWithWhereWithoutPermissionsInput | Prisma.RolePermissionUpdateManyWithWhereWithoutPermissionsInput[]
  deleteMany?: Prisma.RolePermissionScalarWhereInput | Prisma.RolePermissionScalarWhereInput[]
}

export type NullableBoolFieldUpdateOperationsInput = {
  set?: boolean | null
}

export type RolePermissionCreateNestedManyWithoutRolesInput = {
  create?: Prisma.XOR<Prisma.RolePermissionCreateWithoutRolesInput, Prisma.RolePermissionUncheckedCreateWithoutRolesInput> | Prisma.RolePermissionCreateWithoutRolesInput[] | Prisma.RolePermissionUncheckedCreateWithoutRolesInput[]
  connectOrCreate?: Prisma.RolePermissionCreateOrConnectWithoutRolesInput | Prisma.RolePermissionCreateOrConnectWithoutRolesInput[]
  createMany?: Prisma.RolePermissionCreateManyRolesInputEnvelope
  connect?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
}

export type RolePermissionUncheckedCreateNestedManyWithoutRolesInput = {
  create?: Prisma.XOR<Prisma.RolePermissionCreateWithoutRolesInput, Prisma.RolePermissionUncheckedCreateWithoutRolesInput> | Prisma.RolePermissionCreateWithoutRolesInput[] | Prisma.RolePermissionUncheckedCreateWithoutRolesInput[]
  connectOrCreate?: Prisma.RolePermissionCreateOrConnectWithoutRolesInput | Prisma.RolePermissionCreateOrConnectWithoutRolesInput[]
  createMany?: Prisma.RolePermissionCreateManyRolesInputEnvelope
  connect?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
}

export type RolePermissionUpdateManyWithoutRolesNestedInput = {
  create?: Prisma.XOR<Prisma.RolePermissionCreateWithoutRolesInput, Prisma.RolePermissionUncheckedCreateWithoutRolesInput> | Prisma.RolePermissionCreateWithoutRolesInput[] | Prisma.RolePermissionUncheckedCreateWithoutRolesInput[]
  connectOrCreate?: Prisma.RolePermissionCreateOrConnectWithoutRolesInput | Prisma.RolePermissionCreateOrConnectWithoutRolesInput[]
  upsert?: Prisma.RolePermissionUpsertWithWhereUniqueWithoutRolesInput | Prisma.RolePermissionUpsertWithWhereUniqueWithoutRolesInput[]
  createMany?: Prisma.RolePermissionCreateManyRolesInputEnvelope
  set?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  disconnect?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  delete?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  connect?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  update?: Prisma.RolePermissionUpdateWithWhereUniqueWithoutRolesInput | Prisma.RolePermissionUpdateWithWhereUniqueWithoutRolesInput[]
  updateMany?: Prisma.RolePermissionUpdateManyWithWhereWithoutRolesInput | Prisma.RolePermissionUpdateManyWithWhereWithoutRolesInput[]
  deleteMany?: Prisma.RolePermissionScalarWhereInput | Prisma.RolePermissionScalarWhereInput[]
}

export type RolePermissionUncheckedUpdateManyWithoutRolesNestedInput = {
  create?: Prisma.XOR<Prisma.RolePermissionCreateWithoutRolesInput, Prisma.RolePermissionUncheckedCreateWithoutRolesInput> | Prisma.RolePermissionCreateWithoutRolesInput[] | Prisma.RolePermissionUncheckedCreateWithoutRolesInput[]
  connectOrCreate?: Prisma.RolePermissionCreateOrConnectWithoutRolesInput | Prisma.RolePermissionCreateOrConnectWithoutRolesInput[]
  upsert?: Prisma.RolePermissionUpsertWithWhereUniqueWithoutRolesInput | Prisma.RolePermissionUpsertWithWhereUniqueWithoutRolesInput[]
  createMany?: Prisma.RolePermissionCreateManyRolesInputEnvelope
  set?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  disconnect?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  delete?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  connect?: Prisma.RolePermissionWhereUniqueInput | Prisma.RolePermissionWhereUniqueInput[]
  update?: Prisma.RolePermissionUpdateWithWhereUniqueWithoutRolesInput | Prisma.RolePermissionUpdateWithWhereUniqueWithoutRolesInput[]
  updateMany?: Prisma.RolePermissionUpdateManyWithWhereWithoutRolesInput | Prisma.RolePermissionUpdateManyWithWhereWithoutRolesInput[]
  deleteMany?: Prisma.RolePermissionScalarWhereInput | Prisma.RolePermissionScalarWhereInput[]
}

export type RolePermissionCreateWithoutPermissionsInput = {
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Roles: Prisma.RolesCreateNestedOneWithoutRolePermissionInput
}

export type RolePermissionUncheckedCreateWithoutPermissionsInput = {
  id?: number
  roleId: number
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RolePermissionCreateOrConnectWithoutPermissionsInput = {
  where: Prisma.RolePermissionWhereUniqueInput
  create: Prisma.XOR<Prisma.RolePermissionCreateWithoutPermissionsInput, Prisma.RolePermissionUncheckedCreateWithoutPermissionsInput>
}

export type RolePermissionCreateManyPermissionsInputEnvelope = {
  data: Prisma.RolePermissionCreateManyPermissionsInput | Prisma.RolePermissionCreateManyPermissionsInput[]
  skipDuplicates?: boolean
}

export type RolePermissionUpsertWithWhereUniqueWithoutPermissionsInput = {
  where: Prisma.RolePermissionWhereUniqueInput
  update: Prisma.XOR<Prisma.RolePermissionUpdateWithoutPermissionsInput, Prisma.RolePermissionUncheckedUpdateWithoutPermissionsInput>
  create: Prisma.XOR<Prisma.RolePermissionCreateWithoutPermissionsInput, Prisma.RolePermissionUncheckedCreateWithoutPermissionsInput>
}

export type RolePermissionUpdateWithWhereUniqueWithoutPermissionsInput = {
  where: Prisma.RolePermissionWhereUniqueInput
  data: Prisma.XOR<Prisma.RolePermissionUpdateWithoutPermissionsInput, Prisma.RolePermissionUncheckedUpdateWithoutPermissionsInput>
}

export type RolePermissionUpdateManyWithWhereWithoutPermissionsInput = {
  where: Prisma.RolePermissionScalarWhereInput
  data: Prisma.XOR<Prisma.RolePermissionUpdateManyMutationInput, Prisma.RolePermissionUncheckedUpdateManyWithoutPermissionsInput>
}

export type RolePermissionScalarWhereInput = {
  AND?: Prisma.RolePermissionScalarWhereInput | Prisma.RolePermissionScalarWhereInput[]
  OR?: Prisma.RolePermissionScalarWhereInput[]
  NOT?: Prisma.RolePermissionScalarWhereInput | Prisma.RolePermissionScalarWhereInput[]
  id?: Prisma.IntFilter<"RolePermission"> | number
  roleId?: Prisma.IntFilter<"RolePermission"> | number
  permissionId?: Prisma.IntFilter<"RolePermission"> | number
  isActive?: Prisma.BoolNullableFilter<"RolePermission"> | boolean | null
  deletedBy?: Prisma.IntFilter<"RolePermission"> | number
  isDeleted?: Prisma.BoolFilter<"RolePermission"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"RolePermission"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"RolePermission"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"RolePermission"> | Date | string
}

export type RolePermissionCreateWithoutRolesInput = {
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Permissions: Prisma.PermissionsCreateNestedOneWithoutRolePermissionInput
}

export type RolePermissionUncheckedCreateWithoutRolesInput = {
  id?: number
  permissionId: number
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RolePermissionCreateOrConnectWithoutRolesInput = {
  where: Prisma.RolePermissionWhereUniqueInput
  create: Prisma.XOR<Prisma.RolePermissionCreateWithoutRolesInput, Prisma.RolePermissionUncheckedCreateWithoutRolesInput>
}

export type RolePermissionCreateManyRolesInputEnvelope = {
  data: Prisma.RolePermissionCreateManyRolesInput | Prisma.RolePermissionCreateManyRolesInput[]
  skipDuplicates?: boolean
}

export type RolePermissionUpsertWithWhereUniqueWithoutRolesInput = {
  where: Prisma.RolePermissionWhereUniqueInput
  update: Prisma.XOR<Prisma.RolePermissionUpdateWithoutRolesInput, Prisma.RolePermissionUncheckedUpdateWithoutRolesInput>
  create: Prisma.XOR<Prisma.RolePermissionCreateWithoutRolesInput, Prisma.RolePermissionUncheckedCreateWithoutRolesInput>
}

export type RolePermissionUpdateWithWhereUniqueWithoutRolesInput = {
  where: Prisma.RolePermissionWhereUniqueInput
  data: Prisma.XOR<Prisma.RolePermissionUpdateWithoutRolesInput, Prisma.RolePermissionUncheckedUpdateWithoutRolesInput>
}

export type RolePermissionUpdateManyWithWhereWithoutRolesInput = {
  where: Prisma.RolePermissionScalarWhereInput
  data: Prisma.XOR<Prisma.RolePermissionUpdateManyMutationInput, Prisma.RolePermissionUncheckedUpdateManyWithoutRolesInput>
}

export type RolePermissionCreateManyPermissionsInput = {
  id?: number
  roleId: number
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RolePermissionUpdateWithoutPermissionsInput = {
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Roles?: Prisma.RolesUpdateOneRequiredWithoutRolePermissionNestedInput
}

export type RolePermissionUncheckedUpdateWithoutPermissionsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  roleId?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RolePermissionUncheckedUpdateManyWithoutPermissionsInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  roleId?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RolePermissionCreateManyRolesInput = {
  id?: number
  permissionId: number
  isActive?: boolean | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type RolePermissionUpdateWithoutRolesInput = {
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Permissions?: Prisma.PermissionsUpdateOneRequiredWithoutRolePermissionNestedInput
}

export type RolePermissionUncheckedUpdateWithoutRolesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  permissionId?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type RolePermissionUncheckedUpdateManyWithoutRolesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  permissionId?: Prisma.IntFieldUpdateOperationsInput | number
  isActive?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type RolePermissionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  roleId?: boolean
  permissionId?: boolean
  isActive?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  Roles?: boolean | Prisma.RolesDefaultArgs<ExtArgs>
  Permissions?: boolean | Prisma.PermissionsDefaultArgs<ExtArgs>
}, ExtArgs["result"]["rolePermission"]>



export type RolePermissionSelectScalar = {
  id?: boolean
  roleId?: boolean
  permissionId?: boolean
  isActive?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type RolePermissionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "roleId" | "permissionId" | "isActive" | "deletedBy" | "isDeleted" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["rolePermission"]>
export type RolePermissionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Roles?: boolean | Prisma.RolesDefaultArgs<ExtArgs>
  Permissions?: boolean | Prisma.PermissionsDefaultArgs<ExtArgs>
}

export type $RolePermissionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "RolePermission"
  objects: {
    Roles: Prisma.$RolesPayload<ExtArgs>
    Permissions: Prisma.$PermissionsPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    roleId: number
    permissionId: number
    isActive: boolean | null
    deletedBy: number
    isDeleted: boolean
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["rolePermission"]>
  composites: {}
}

export type RolePermissionGetPayload<S extends boolean | null | undefined | RolePermissionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$RolePermissionPayload, S>

export type RolePermissionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<RolePermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: RolePermissionCountAggregateInputType | true
  }

export interface RolePermissionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RolePermission'], meta: { name: 'RolePermission' } }
  /**
   * Find zero or one RolePermission that matches the filter.
   * @param {RolePermissionFindUniqueArgs} args - Arguments to find a RolePermission
   * @example
   * // Get one RolePermission
   * const rolePermission = await prisma.rolePermission.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends RolePermissionFindUniqueArgs>(args: Prisma.SelectSubset<T, RolePermissionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__RolePermissionClient<runtime.Types.Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one RolePermission that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {RolePermissionFindUniqueOrThrowArgs} args - Arguments to find a RolePermission
   * @example
   * // Get one RolePermission
   * const rolePermission = await prisma.rolePermission.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends RolePermissionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, RolePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__RolePermissionClient<runtime.Types.Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RolePermission that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolePermissionFindFirstArgs} args - Arguments to find a RolePermission
   * @example
   * // Get one RolePermission
   * const rolePermission = await prisma.rolePermission.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends RolePermissionFindFirstArgs>(args?: Prisma.SelectSubset<T, RolePermissionFindFirstArgs<ExtArgs>>): Prisma.Prisma__RolePermissionClient<runtime.Types.Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first RolePermission that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolePermissionFindFirstOrThrowArgs} args - Arguments to find a RolePermission
   * @example
   * // Get one RolePermission
   * const rolePermission = await prisma.rolePermission.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends RolePermissionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, RolePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__RolePermissionClient<runtime.Types.Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more RolePermissions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all RolePermissions
   * const rolePermissions = await prisma.rolePermission.findMany()
   * 
   * // Get first 10 RolePermissions
   * const rolePermissions = await prisma.rolePermission.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const rolePermissionWithIdOnly = await prisma.rolePermission.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends RolePermissionFindManyArgs>(args?: Prisma.SelectSubset<T, RolePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a RolePermission.
   * @param {RolePermissionCreateArgs} args - Arguments to create a RolePermission.
   * @example
   * // Create one RolePermission
   * const RolePermission = await prisma.rolePermission.create({
   *   data: {
   *     // ... data to create a RolePermission
   *   }
   * })
   * 
   */
  create<T extends RolePermissionCreateArgs>(args: Prisma.SelectSubset<T, RolePermissionCreateArgs<ExtArgs>>): Prisma.Prisma__RolePermissionClient<runtime.Types.Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many RolePermissions.
   * @param {RolePermissionCreateManyArgs} args - Arguments to create many RolePermissions.
   * @example
   * // Create many RolePermissions
   * const rolePermission = await prisma.rolePermission.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends RolePermissionCreateManyArgs>(args?: Prisma.SelectSubset<T, RolePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a RolePermission.
   * @param {RolePermissionDeleteArgs} args - Arguments to delete one RolePermission.
   * @example
   * // Delete one RolePermission
   * const RolePermission = await prisma.rolePermission.delete({
   *   where: {
   *     // ... filter to delete one RolePermission
   *   }
   * })
   * 
   */
  delete<T extends RolePermissionDeleteArgs>(args: Prisma.SelectSubset<T, RolePermissionDeleteArgs<ExtArgs>>): Prisma.Prisma__RolePermissionClient<runtime.Types.Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one RolePermission.
   * @param {RolePermissionUpdateArgs} args - Arguments to update one RolePermission.
   * @example
   * // Update one RolePermission
   * const rolePermission = await prisma.rolePermission.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends RolePermissionUpdateArgs>(args: Prisma.SelectSubset<T, RolePermissionUpdateArgs<ExtArgs>>): Prisma.Prisma__RolePermissionClient<runtime.Types.Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more RolePermissions.
   * @param {RolePermissionDeleteManyArgs} args - Arguments to filter RolePermissions to delete.
   * @example
   * // Delete a few RolePermissions
   * const { count } = await prisma.rolePermission.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends RolePermissionDeleteManyArgs>(args?: Prisma.SelectSubset<T, RolePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more RolePermissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolePermissionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many RolePermissions
   * const rolePermission = await prisma.rolePermission.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends RolePermissionUpdateManyArgs>(args: Prisma.SelectSubset<T, RolePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one RolePermission.
   * @param {RolePermissionUpsertArgs} args - Arguments to update or create a RolePermission.
   * @example
   * // Update or create a RolePermission
   * const rolePermission = await prisma.rolePermission.upsert({
   *   create: {
   *     // ... data to create a RolePermission
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the RolePermission we want to update
   *   }
   * })
   */
  upsert<T extends RolePermissionUpsertArgs>(args: Prisma.SelectSubset<T, RolePermissionUpsertArgs<ExtArgs>>): Prisma.Prisma__RolePermissionClient<runtime.Types.Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of RolePermissions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolePermissionCountArgs} args - Arguments to filter RolePermissions to count.
   * @example
   * // Count the number of RolePermissions
   * const count = await prisma.rolePermission.count({
   *   where: {
   *     // ... the filter for the RolePermissions we want to count
   *   }
   * })
  **/
  count<T extends RolePermissionCountArgs>(
    args?: Prisma.Subset<T, RolePermissionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], RolePermissionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a RolePermission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends RolePermissionAggregateArgs>(args: Prisma.Subset<T, RolePermissionAggregateArgs>): Prisma.PrismaPromise<GetRolePermissionAggregateType<T>>

  /**
   * Group by RolePermission.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {RolePermissionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends RolePermissionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: RolePermissionGroupByArgs['orderBy'] }
      : { orderBy?: RolePermissionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, RolePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the RolePermission model
 */
readonly fields: RolePermissionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for RolePermission.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__RolePermissionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Roles<T extends Prisma.RolesDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RolesDefaultArgs<ExtArgs>>): Prisma.Prisma__RolesClient<runtime.Types.Result.GetResult<Prisma.$RolesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  Permissions<T extends Prisma.PermissionsDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PermissionsDefaultArgs<ExtArgs>>): Prisma.Prisma__PermissionsClient<runtime.Types.Result.GetResult<Prisma.$PermissionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the RolePermission model
 */
export interface RolePermissionFieldRefs {
  readonly id: Prisma.FieldRef<"RolePermission", 'Int'>
  readonly roleId: Prisma.FieldRef<"RolePermission", 'Int'>
  readonly permissionId: Prisma.FieldRef<"RolePermission", 'Int'>
  readonly isActive: Prisma.FieldRef<"RolePermission", 'Boolean'>
  readonly deletedBy: Prisma.FieldRef<"RolePermission", 'Int'>
  readonly isDeleted: Prisma.FieldRef<"RolePermission", 'Boolean'>
  readonly deletedAt: Prisma.FieldRef<"RolePermission", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"RolePermission", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"RolePermission", 'DateTime'>
}
    

// Custom InputTypes
/**
 * RolePermission findUnique
 */
export type RolePermissionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RolePermission
   */
  select?: Prisma.RolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RolePermission
   */
  omit?: Prisma.RolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePermissionInclude<ExtArgs> | null
  /**
   * Filter, which RolePermission to fetch.
   */
  where: Prisma.RolePermissionWhereUniqueInput
}

/**
 * RolePermission findUniqueOrThrow
 */
export type RolePermissionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RolePermission
   */
  select?: Prisma.RolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RolePermission
   */
  omit?: Prisma.RolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePermissionInclude<ExtArgs> | null
  /**
   * Filter, which RolePermission to fetch.
   */
  where: Prisma.RolePermissionWhereUniqueInput
}

/**
 * RolePermission findFirst
 */
export type RolePermissionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RolePermission
   */
  select?: Prisma.RolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RolePermission
   */
  omit?: Prisma.RolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePermissionInclude<ExtArgs> | null
  /**
   * Filter, which RolePermission to fetch.
   */
  where?: Prisma.RolePermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RolePermissions to fetch.
   */
  orderBy?: Prisma.RolePermissionOrderByWithRelationInput | Prisma.RolePermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RolePermissions.
   */
  cursor?: Prisma.RolePermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RolePermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RolePermissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RolePermissions.
   */
  distinct?: Prisma.RolePermissionScalarFieldEnum | Prisma.RolePermissionScalarFieldEnum[]
}

/**
 * RolePermission findFirstOrThrow
 */
export type RolePermissionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RolePermission
   */
  select?: Prisma.RolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RolePermission
   */
  omit?: Prisma.RolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePermissionInclude<ExtArgs> | null
  /**
   * Filter, which RolePermission to fetch.
   */
  where?: Prisma.RolePermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RolePermissions to fetch.
   */
  orderBy?: Prisma.RolePermissionOrderByWithRelationInput | Prisma.RolePermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for RolePermissions.
   */
  cursor?: Prisma.RolePermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RolePermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RolePermissions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of RolePermissions.
   */
  distinct?: Prisma.RolePermissionScalarFieldEnum | Prisma.RolePermissionScalarFieldEnum[]
}

/**
 * RolePermission findMany
 */
export type RolePermissionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RolePermission
   */
  select?: Prisma.RolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RolePermission
   */
  omit?: Prisma.RolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePermissionInclude<ExtArgs> | null
  /**
   * Filter, which RolePermissions to fetch.
   */
  where?: Prisma.RolePermissionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of RolePermissions to fetch.
   */
  orderBy?: Prisma.RolePermissionOrderByWithRelationInput | Prisma.RolePermissionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing RolePermissions.
   */
  cursor?: Prisma.RolePermissionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` RolePermissions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` RolePermissions.
   */
  skip?: number
  distinct?: Prisma.RolePermissionScalarFieldEnum | Prisma.RolePermissionScalarFieldEnum[]
}

/**
 * RolePermission create
 */
export type RolePermissionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RolePermission
   */
  select?: Prisma.RolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RolePermission
   */
  omit?: Prisma.RolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePermissionInclude<ExtArgs> | null
  /**
   * The data needed to create a RolePermission.
   */
  data: Prisma.XOR<Prisma.RolePermissionCreateInput, Prisma.RolePermissionUncheckedCreateInput>
}

/**
 * RolePermission createMany
 */
export type RolePermissionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many RolePermissions.
   */
  data: Prisma.RolePermissionCreateManyInput | Prisma.RolePermissionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * RolePermission update
 */
export type RolePermissionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RolePermission
   */
  select?: Prisma.RolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RolePermission
   */
  omit?: Prisma.RolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePermissionInclude<ExtArgs> | null
  /**
   * The data needed to update a RolePermission.
   */
  data: Prisma.XOR<Prisma.RolePermissionUpdateInput, Prisma.RolePermissionUncheckedUpdateInput>
  /**
   * Choose, which RolePermission to update.
   */
  where: Prisma.RolePermissionWhereUniqueInput
}

/**
 * RolePermission updateMany
 */
export type RolePermissionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update RolePermissions.
   */
  data: Prisma.XOR<Prisma.RolePermissionUpdateManyMutationInput, Prisma.RolePermissionUncheckedUpdateManyInput>
  /**
   * Filter which RolePermissions to update
   */
  where?: Prisma.RolePermissionWhereInput
  /**
   * Limit how many RolePermissions to update.
   */
  limit?: number
}

/**
 * RolePermission upsert
 */
export type RolePermissionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RolePermission
   */
  select?: Prisma.RolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RolePermission
   */
  omit?: Prisma.RolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePermissionInclude<ExtArgs> | null
  /**
   * The filter to search for the RolePermission to update in case it exists.
   */
  where: Prisma.RolePermissionWhereUniqueInput
  /**
   * In case the RolePermission found by the `where` argument doesn't exist, create a new RolePermission with this data.
   */
  create: Prisma.XOR<Prisma.RolePermissionCreateInput, Prisma.RolePermissionUncheckedCreateInput>
  /**
   * In case the RolePermission was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.RolePermissionUpdateInput, Prisma.RolePermissionUncheckedUpdateInput>
}

/**
 * RolePermission delete
 */
export type RolePermissionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RolePermission
   */
  select?: Prisma.RolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RolePermission
   */
  omit?: Prisma.RolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePermissionInclude<ExtArgs> | null
  /**
   * Filter which RolePermission to delete.
   */
  where: Prisma.RolePermissionWhereUniqueInput
}

/**
 * RolePermission deleteMany
 */
export type RolePermissionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which RolePermissions to delete
   */
  where?: Prisma.RolePermissionWhereInput
  /**
   * Limit how many RolePermissions to delete.
   */
  limit?: number
}

/**
 * RolePermission without action
 */
export type RolePermissionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the RolePermission
   */
  select?: Prisma.RolePermissionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the RolePermission
   */
  omit?: Prisma.RolePermissionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.RolePermissionInclude<ExtArgs> | null
}
