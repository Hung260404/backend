
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `TABLE_TEMPLATE` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model TABLE_TEMPLATE
 * 
 */
export type TABLE_TEMPLATEModel = runtime.Types.Result.DefaultSelection<Prisma.$TABLE_TEMPLATEPayload>

export type AggregateTABLE_TEMPLATE = {
  _count: TABLE_TEMPLATECountAggregateOutputType | null
  _avg: TABLE_TEMPLATEAvgAggregateOutputType | null
  _sum: TABLE_TEMPLATESumAggregateOutputType | null
  _min: TABLE_TEMPLATEMinAggregateOutputType | null
  _max: TABLE_TEMPLATEMaxAggregateOutputType | null
}

export type TABLE_TEMPLATEAvgAggregateOutputType = {
  id: number | null
  deletedBy: number | null
}

export type TABLE_TEMPLATESumAggregateOutputType = {
  id: number | null
  deletedBy: number | null
}

export type TABLE_TEMPLATEMinAggregateOutputType = {
  id: number | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TABLE_TEMPLATEMaxAggregateOutputType = {
  id: number | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TABLE_TEMPLATECountAggregateOutputType = {
  id: number
  deletedBy: number
  isDeleted: number
  deletedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TABLE_TEMPLATEAvgAggregateInputType = {
  id?: true
  deletedBy?: true
}

export type TABLE_TEMPLATESumAggregateInputType = {
  id?: true
  deletedBy?: true
}

export type TABLE_TEMPLATEMinAggregateInputType = {
  id?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type TABLE_TEMPLATEMaxAggregateInputType = {
  id?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type TABLE_TEMPLATECountAggregateInputType = {
  id?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TABLE_TEMPLATEAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TABLE_TEMPLATE to aggregate.
   */
  where?: Prisma.TABLE_TEMPLATEWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TABLE_TEMPLATES to fetch.
   */
  orderBy?: Prisma.TABLE_TEMPLATEOrderByWithRelationInput | Prisma.TABLE_TEMPLATEOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TABLE_TEMPLATEWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TABLE_TEMPLATES from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TABLE_TEMPLATES.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TABLE_TEMPLATES
  **/
  _count?: true | TABLE_TEMPLATECountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TABLE_TEMPLATEAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TABLE_TEMPLATESumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TABLE_TEMPLATEMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TABLE_TEMPLATEMaxAggregateInputType
}

export type GetTABLE_TEMPLATEAggregateType<T extends TABLE_TEMPLATEAggregateArgs> = {
      [P in keyof T & keyof AggregateTABLE_TEMPLATE]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTABLE_TEMPLATE[P]>
    : Prisma.GetScalarType<T[P], AggregateTABLE_TEMPLATE[P]>
}




export type TABLE_TEMPLATEGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TABLE_TEMPLATEWhereInput
  orderBy?: Prisma.TABLE_TEMPLATEOrderByWithAggregationInput | Prisma.TABLE_TEMPLATEOrderByWithAggregationInput[]
  by: Prisma.TABLE_TEMPLATEScalarFieldEnum[] | Prisma.TABLE_TEMPLATEScalarFieldEnum
  having?: Prisma.TABLE_TEMPLATEScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TABLE_TEMPLATECountAggregateInputType | true
  _avg?: TABLE_TEMPLATEAvgAggregateInputType
  _sum?: TABLE_TEMPLATESumAggregateInputType
  _min?: TABLE_TEMPLATEMinAggregateInputType
  _max?: TABLE_TEMPLATEMaxAggregateInputType
}

export type TABLE_TEMPLATEGroupByOutputType = {
  id: number
  deletedBy: number
  isDeleted: boolean
  deletedAt: Date | null
  createdAt: Date
  updatedAt: Date
  _count: TABLE_TEMPLATECountAggregateOutputType | null
  _avg: TABLE_TEMPLATEAvgAggregateOutputType | null
  _sum: TABLE_TEMPLATESumAggregateOutputType | null
  _min: TABLE_TEMPLATEMinAggregateOutputType | null
  _max: TABLE_TEMPLATEMaxAggregateOutputType | null
}

type GetTABLE_TEMPLATEGroupByPayload<T extends TABLE_TEMPLATEGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TABLE_TEMPLATEGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TABLE_TEMPLATEGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TABLE_TEMPLATEGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TABLE_TEMPLATEGroupByOutputType[P]>
      }
    >
  >



export type TABLE_TEMPLATEWhereInput = {
  AND?: Prisma.TABLE_TEMPLATEWhereInput | Prisma.TABLE_TEMPLATEWhereInput[]
  OR?: Prisma.TABLE_TEMPLATEWhereInput[]
  NOT?: Prisma.TABLE_TEMPLATEWhereInput | Prisma.TABLE_TEMPLATEWhereInput[]
  id?: Prisma.IntFilter<"TABLE_TEMPLATE"> | number
  deletedBy?: Prisma.IntFilter<"TABLE_TEMPLATE"> | number
  isDeleted?: Prisma.BoolFilter<"TABLE_TEMPLATE"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"TABLE_TEMPLATE"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"TABLE_TEMPLATE"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TABLE_TEMPLATE"> | Date | string
}

export type TABLE_TEMPLATEOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TABLE_TEMPLATEWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.TABLE_TEMPLATEWhereInput | Prisma.TABLE_TEMPLATEWhereInput[]
  OR?: Prisma.TABLE_TEMPLATEWhereInput[]
  NOT?: Prisma.TABLE_TEMPLATEWhereInput | Prisma.TABLE_TEMPLATEWhereInput[]
  deletedBy?: Prisma.IntFilter<"TABLE_TEMPLATE"> | number
  isDeleted?: Prisma.BoolFilter<"TABLE_TEMPLATE"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"TABLE_TEMPLATE"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"TABLE_TEMPLATE"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TABLE_TEMPLATE"> | Date | string
}, "id">

export type TABLE_TEMPLATEOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TABLE_TEMPLATECountOrderByAggregateInput
  _avg?: Prisma.TABLE_TEMPLATEAvgOrderByAggregateInput
  _max?: Prisma.TABLE_TEMPLATEMaxOrderByAggregateInput
  _min?: Prisma.TABLE_TEMPLATEMinOrderByAggregateInput
  _sum?: Prisma.TABLE_TEMPLATESumOrderByAggregateInput
}

export type TABLE_TEMPLATEScalarWhereWithAggregatesInput = {
  AND?: Prisma.TABLE_TEMPLATEScalarWhereWithAggregatesInput | Prisma.TABLE_TEMPLATEScalarWhereWithAggregatesInput[]
  OR?: Prisma.TABLE_TEMPLATEScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TABLE_TEMPLATEScalarWhereWithAggregatesInput | Prisma.TABLE_TEMPLATEScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"TABLE_TEMPLATE"> | number
  deletedBy?: Prisma.IntWithAggregatesFilter<"TABLE_TEMPLATE"> | number
  isDeleted?: Prisma.BoolWithAggregatesFilter<"TABLE_TEMPLATE"> | boolean
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"TABLE_TEMPLATE"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TABLE_TEMPLATE"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TABLE_TEMPLATE"> | Date | string
}

export type TABLE_TEMPLATECreateInput = {
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TABLE_TEMPLATEUncheckedCreateInput = {
  id?: number
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TABLE_TEMPLATEUpdateInput = {
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TABLE_TEMPLATEUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TABLE_TEMPLATECreateManyInput = {
  id?: number
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TABLE_TEMPLATEUpdateManyMutationInput = {
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TABLE_TEMPLATEUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TABLE_TEMPLATECountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TABLE_TEMPLATEAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type TABLE_TEMPLATEMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TABLE_TEMPLATEMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TABLE_TEMPLATESumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}



export type TABLE_TEMPLATESelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["tABLE_TEMPLATE"]>



export type TABLE_TEMPLATESelectScalar = {
  id?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TABLE_TEMPLATEOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "deletedBy" | "isDeleted" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["tABLE_TEMPLATE"]>

export type $TABLE_TEMPLATEPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TABLE_TEMPLATE"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    deletedBy: number
    isDeleted: boolean
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["tABLE_TEMPLATE"]>
  composites: {}
}

export type TABLE_TEMPLATEGetPayload<S extends boolean | null | undefined | TABLE_TEMPLATEDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TABLE_TEMPLATEPayload, S>

export type TABLE_TEMPLATECountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TABLE_TEMPLATEFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TABLE_TEMPLATECountAggregateInputType | true
  }

export interface TABLE_TEMPLATEDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TABLE_TEMPLATE'], meta: { name: 'TABLE_TEMPLATE' } }
  /**
   * Find zero or one TABLE_TEMPLATE that matches the filter.
   * @param {TABLE_TEMPLATEFindUniqueArgs} args - Arguments to find a TABLE_TEMPLATE
   * @example
   * // Get one TABLE_TEMPLATE
   * const tABLE_TEMPLATE = await prisma.tABLE_TEMPLATE.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TABLE_TEMPLATEFindUniqueArgs>(args: Prisma.SelectSubset<T, TABLE_TEMPLATEFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TABLE_TEMPLATEClient<runtime.Types.Result.GetResult<Prisma.$TABLE_TEMPLATEPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TABLE_TEMPLATE that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TABLE_TEMPLATEFindUniqueOrThrowArgs} args - Arguments to find a TABLE_TEMPLATE
   * @example
   * // Get one TABLE_TEMPLATE
   * const tABLE_TEMPLATE = await prisma.tABLE_TEMPLATE.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TABLE_TEMPLATEFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TABLE_TEMPLATEFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TABLE_TEMPLATEClient<runtime.Types.Result.GetResult<Prisma.$TABLE_TEMPLATEPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TABLE_TEMPLATE that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TABLE_TEMPLATEFindFirstArgs} args - Arguments to find a TABLE_TEMPLATE
   * @example
   * // Get one TABLE_TEMPLATE
   * const tABLE_TEMPLATE = await prisma.tABLE_TEMPLATE.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TABLE_TEMPLATEFindFirstArgs>(args?: Prisma.SelectSubset<T, TABLE_TEMPLATEFindFirstArgs<ExtArgs>>): Prisma.Prisma__TABLE_TEMPLATEClient<runtime.Types.Result.GetResult<Prisma.$TABLE_TEMPLATEPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TABLE_TEMPLATE that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TABLE_TEMPLATEFindFirstOrThrowArgs} args - Arguments to find a TABLE_TEMPLATE
   * @example
   * // Get one TABLE_TEMPLATE
   * const tABLE_TEMPLATE = await prisma.tABLE_TEMPLATE.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TABLE_TEMPLATEFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TABLE_TEMPLATEFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TABLE_TEMPLATEClient<runtime.Types.Result.GetResult<Prisma.$TABLE_TEMPLATEPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TABLE_TEMPLATES that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TABLE_TEMPLATEFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TABLE_TEMPLATES
   * const tABLE_TEMPLATES = await prisma.tABLE_TEMPLATE.findMany()
   * 
   * // Get first 10 TABLE_TEMPLATES
   * const tABLE_TEMPLATES = await prisma.tABLE_TEMPLATE.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const tABLE_TEMPLATEWithIdOnly = await prisma.tABLE_TEMPLATE.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TABLE_TEMPLATEFindManyArgs>(args?: Prisma.SelectSubset<T, TABLE_TEMPLATEFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TABLE_TEMPLATEPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TABLE_TEMPLATE.
   * @param {TABLE_TEMPLATECreateArgs} args - Arguments to create a TABLE_TEMPLATE.
   * @example
   * // Create one TABLE_TEMPLATE
   * const TABLE_TEMPLATE = await prisma.tABLE_TEMPLATE.create({
   *   data: {
   *     // ... data to create a TABLE_TEMPLATE
   *   }
   * })
   * 
   */
  create<T extends TABLE_TEMPLATECreateArgs>(args: Prisma.SelectSubset<T, TABLE_TEMPLATECreateArgs<ExtArgs>>): Prisma.Prisma__TABLE_TEMPLATEClient<runtime.Types.Result.GetResult<Prisma.$TABLE_TEMPLATEPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TABLE_TEMPLATES.
   * @param {TABLE_TEMPLATECreateManyArgs} args - Arguments to create many TABLE_TEMPLATES.
   * @example
   * // Create many TABLE_TEMPLATES
   * const tABLE_TEMPLATE = await prisma.tABLE_TEMPLATE.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TABLE_TEMPLATECreateManyArgs>(args?: Prisma.SelectSubset<T, TABLE_TEMPLATECreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a TABLE_TEMPLATE.
   * @param {TABLE_TEMPLATEDeleteArgs} args - Arguments to delete one TABLE_TEMPLATE.
   * @example
   * // Delete one TABLE_TEMPLATE
   * const TABLE_TEMPLATE = await prisma.tABLE_TEMPLATE.delete({
   *   where: {
   *     // ... filter to delete one TABLE_TEMPLATE
   *   }
   * })
   * 
   */
  delete<T extends TABLE_TEMPLATEDeleteArgs>(args: Prisma.SelectSubset<T, TABLE_TEMPLATEDeleteArgs<ExtArgs>>): Prisma.Prisma__TABLE_TEMPLATEClient<runtime.Types.Result.GetResult<Prisma.$TABLE_TEMPLATEPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TABLE_TEMPLATE.
   * @param {TABLE_TEMPLATEUpdateArgs} args - Arguments to update one TABLE_TEMPLATE.
   * @example
   * // Update one TABLE_TEMPLATE
   * const tABLE_TEMPLATE = await prisma.tABLE_TEMPLATE.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TABLE_TEMPLATEUpdateArgs>(args: Prisma.SelectSubset<T, TABLE_TEMPLATEUpdateArgs<ExtArgs>>): Prisma.Prisma__TABLE_TEMPLATEClient<runtime.Types.Result.GetResult<Prisma.$TABLE_TEMPLATEPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TABLE_TEMPLATES.
   * @param {TABLE_TEMPLATEDeleteManyArgs} args - Arguments to filter TABLE_TEMPLATES to delete.
   * @example
   * // Delete a few TABLE_TEMPLATES
   * const { count } = await prisma.tABLE_TEMPLATE.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TABLE_TEMPLATEDeleteManyArgs>(args?: Prisma.SelectSubset<T, TABLE_TEMPLATEDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TABLE_TEMPLATES.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TABLE_TEMPLATEUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TABLE_TEMPLATES
   * const tABLE_TEMPLATE = await prisma.tABLE_TEMPLATE.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TABLE_TEMPLATEUpdateManyArgs>(args: Prisma.SelectSubset<T, TABLE_TEMPLATEUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one TABLE_TEMPLATE.
   * @param {TABLE_TEMPLATEUpsertArgs} args - Arguments to update or create a TABLE_TEMPLATE.
   * @example
   * // Update or create a TABLE_TEMPLATE
   * const tABLE_TEMPLATE = await prisma.tABLE_TEMPLATE.upsert({
   *   create: {
   *     // ... data to create a TABLE_TEMPLATE
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TABLE_TEMPLATE we want to update
   *   }
   * })
   */
  upsert<T extends TABLE_TEMPLATEUpsertArgs>(args: Prisma.SelectSubset<T, TABLE_TEMPLATEUpsertArgs<ExtArgs>>): Prisma.Prisma__TABLE_TEMPLATEClient<runtime.Types.Result.GetResult<Prisma.$TABLE_TEMPLATEPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TABLE_TEMPLATES.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TABLE_TEMPLATECountArgs} args - Arguments to filter TABLE_TEMPLATES to count.
   * @example
   * // Count the number of TABLE_TEMPLATES
   * const count = await prisma.tABLE_TEMPLATE.count({
   *   where: {
   *     // ... the filter for the TABLE_TEMPLATES we want to count
   *   }
   * })
  **/
  count<T extends TABLE_TEMPLATECountArgs>(
    args?: Prisma.Subset<T, TABLE_TEMPLATECountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TABLE_TEMPLATECountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TABLE_TEMPLATE.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TABLE_TEMPLATEAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TABLE_TEMPLATEAggregateArgs>(args: Prisma.Subset<T, TABLE_TEMPLATEAggregateArgs>): Prisma.PrismaPromise<GetTABLE_TEMPLATEAggregateType<T>>

  /**
   * Group by TABLE_TEMPLATE.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TABLE_TEMPLATEGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TABLE_TEMPLATEGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TABLE_TEMPLATEGroupByArgs['orderBy'] }
      : { orderBy?: TABLE_TEMPLATEGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TABLE_TEMPLATEGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTABLE_TEMPLATEGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TABLE_TEMPLATE model
 */
readonly fields: TABLE_TEMPLATEFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TABLE_TEMPLATE.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TABLE_TEMPLATEClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TABLE_TEMPLATE model
 */
export interface TABLE_TEMPLATEFieldRefs {
  readonly id: Prisma.FieldRef<"TABLE_TEMPLATE", 'Int'>
  readonly deletedBy: Prisma.FieldRef<"TABLE_TEMPLATE", 'Int'>
  readonly isDeleted: Prisma.FieldRef<"TABLE_TEMPLATE", 'Boolean'>
  readonly deletedAt: Prisma.FieldRef<"TABLE_TEMPLATE", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"TABLE_TEMPLATE", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TABLE_TEMPLATE", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TABLE_TEMPLATE findUnique
 */
export type TABLE_TEMPLATEFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TABLE_TEMPLATE
   */
  select?: Prisma.TABLE_TEMPLATESelect<ExtArgs> | null
  /**
   * Omit specific fields from the TABLE_TEMPLATE
   */
  omit?: Prisma.TABLE_TEMPLATEOmit<ExtArgs> | null
  /**
   * Filter, which TABLE_TEMPLATE to fetch.
   */
  where: Prisma.TABLE_TEMPLATEWhereUniqueInput
}

/**
 * TABLE_TEMPLATE findUniqueOrThrow
 */
export type TABLE_TEMPLATEFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TABLE_TEMPLATE
   */
  select?: Prisma.TABLE_TEMPLATESelect<ExtArgs> | null
  /**
   * Omit specific fields from the TABLE_TEMPLATE
   */
  omit?: Prisma.TABLE_TEMPLATEOmit<ExtArgs> | null
  /**
   * Filter, which TABLE_TEMPLATE to fetch.
   */
  where: Prisma.TABLE_TEMPLATEWhereUniqueInput
}

/**
 * TABLE_TEMPLATE findFirst
 */
export type TABLE_TEMPLATEFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TABLE_TEMPLATE
   */
  select?: Prisma.TABLE_TEMPLATESelect<ExtArgs> | null
  /**
   * Omit specific fields from the TABLE_TEMPLATE
   */
  omit?: Prisma.TABLE_TEMPLATEOmit<ExtArgs> | null
  /**
   * Filter, which TABLE_TEMPLATE to fetch.
   */
  where?: Prisma.TABLE_TEMPLATEWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TABLE_TEMPLATES to fetch.
   */
  orderBy?: Prisma.TABLE_TEMPLATEOrderByWithRelationInput | Prisma.TABLE_TEMPLATEOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TABLE_TEMPLATES.
   */
  cursor?: Prisma.TABLE_TEMPLATEWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TABLE_TEMPLATES from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TABLE_TEMPLATES.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TABLE_TEMPLATES.
   */
  distinct?: Prisma.TABLE_TEMPLATEScalarFieldEnum | Prisma.TABLE_TEMPLATEScalarFieldEnum[]
}

/**
 * TABLE_TEMPLATE findFirstOrThrow
 */
export type TABLE_TEMPLATEFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TABLE_TEMPLATE
   */
  select?: Prisma.TABLE_TEMPLATESelect<ExtArgs> | null
  /**
   * Omit specific fields from the TABLE_TEMPLATE
   */
  omit?: Prisma.TABLE_TEMPLATEOmit<ExtArgs> | null
  /**
   * Filter, which TABLE_TEMPLATE to fetch.
   */
  where?: Prisma.TABLE_TEMPLATEWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TABLE_TEMPLATES to fetch.
   */
  orderBy?: Prisma.TABLE_TEMPLATEOrderByWithRelationInput | Prisma.TABLE_TEMPLATEOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TABLE_TEMPLATES.
   */
  cursor?: Prisma.TABLE_TEMPLATEWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TABLE_TEMPLATES from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TABLE_TEMPLATES.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TABLE_TEMPLATES.
   */
  distinct?: Prisma.TABLE_TEMPLATEScalarFieldEnum | Prisma.TABLE_TEMPLATEScalarFieldEnum[]
}

/**
 * TABLE_TEMPLATE findMany
 */
export type TABLE_TEMPLATEFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TABLE_TEMPLATE
   */
  select?: Prisma.TABLE_TEMPLATESelect<ExtArgs> | null
  /**
   * Omit specific fields from the TABLE_TEMPLATE
   */
  omit?: Prisma.TABLE_TEMPLATEOmit<ExtArgs> | null
  /**
   * Filter, which TABLE_TEMPLATES to fetch.
   */
  where?: Prisma.TABLE_TEMPLATEWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TABLE_TEMPLATES to fetch.
   */
  orderBy?: Prisma.TABLE_TEMPLATEOrderByWithRelationInput | Prisma.TABLE_TEMPLATEOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TABLE_TEMPLATES.
   */
  cursor?: Prisma.TABLE_TEMPLATEWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TABLE_TEMPLATES from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TABLE_TEMPLATES.
   */
  skip?: number
  distinct?: Prisma.TABLE_TEMPLATEScalarFieldEnum | Prisma.TABLE_TEMPLATEScalarFieldEnum[]
}

/**
 * TABLE_TEMPLATE create
 */
export type TABLE_TEMPLATECreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TABLE_TEMPLATE
   */
  select?: Prisma.TABLE_TEMPLATESelect<ExtArgs> | null
  /**
   * Omit specific fields from the TABLE_TEMPLATE
   */
  omit?: Prisma.TABLE_TEMPLATEOmit<ExtArgs> | null
  /**
   * The data needed to create a TABLE_TEMPLATE.
   */
  data?: Prisma.XOR<Prisma.TABLE_TEMPLATECreateInput, Prisma.TABLE_TEMPLATEUncheckedCreateInput>
}

/**
 * TABLE_TEMPLATE createMany
 */
export type TABLE_TEMPLATECreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TABLE_TEMPLATES.
   */
  data: Prisma.TABLE_TEMPLATECreateManyInput | Prisma.TABLE_TEMPLATECreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TABLE_TEMPLATE update
 */
export type TABLE_TEMPLATEUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TABLE_TEMPLATE
   */
  select?: Prisma.TABLE_TEMPLATESelect<ExtArgs> | null
  /**
   * Omit specific fields from the TABLE_TEMPLATE
   */
  omit?: Prisma.TABLE_TEMPLATEOmit<ExtArgs> | null
  /**
   * The data needed to update a TABLE_TEMPLATE.
   */
  data: Prisma.XOR<Prisma.TABLE_TEMPLATEUpdateInput, Prisma.TABLE_TEMPLATEUncheckedUpdateInput>
  /**
   * Choose, which TABLE_TEMPLATE to update.
   */
  where: Prisma.TABLE_TEMPLATEWhereUniqueInput
}

/**
 * TABLE_TEMPLATE updateMany
 */
export type TABLE_TEMPLATEUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TABLE_TEMPLATES.
   */
  data: Prisma.XOR<Prisma.TABLE_TEMPLATEUpdateManyMutationInput, Prisma.TABLE_TEMPLATEUncheckedUpdateManyInput>
  /**
   * Filter which TABLE_TEMPLATES to update
   */
  where?: Prisma.TABLE_TEMPLATEWhereInput
  /**
   * Limit how many TABLE_TEMPLATES to update.
   */
  limit?: number
}

/**
 * TABLE_TEMPLATE upsert
 */
export type TABLE_TEMPLATEUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TABLE_TEMPLATE
   */
  select?: Prisma.TABLE_TEMPLATESelect<ExtArgs> | null
  /**
   * Omit specific fields from the TABLE_TEMPLATE
   */
  omit?: Prisma.TABLE_TEMPLATEOmit<ExtArgs> | null
  /**
   * The filter to search for the TABLE_TEMPLATE to update in case it exists.
   */
  where: Prisma.TABLE_TEMPLATEWhereUniqueInput
  /**
   * In case the TABLE_TEMPLATE found by the `where` argument doesn't exist, create a new TABLE_TEMPLATE with this data.
   */
  create: Prisma.XOR<Prisma.TABLE_TEMPLATECreateInput, Prisma.TABLE_TEMPLATEUncheckedCreateInput>
  /**
   * In case the TABLE_TEMPLATE was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TABLE_TEMPLATEUpdateInput, Prisma.TABLE_TEMPLATEUncheckedUpdateInput>
}

/**
 * TABLE_TEMPLATE delete
 */
export type TABLE_TEMPLATEDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TABLE_TEMPLATE
   */
  select?: Prisma.TABLE_TEMPLATESelect<ExtArgs> | null
  /**
   * Omit specific fields from the TABLE_TEMPLATE
   */
  omit?: Prisma.TABLE_TEMPLATEOmit<ExtArgs> | null
  /**
   * Filter which TABLE_TEMPLATE to delete.
   */
  where: Prisma.TABLE_TEMPLATEWhereUniqueInput
}

/**
 * TABLE_TEMPLATE deleteMany
 */
export type TABLE_TEMPLATEDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TABLE_TEMPLATES to delete
   */
  where?: Prisma.TABLE_TEMPLATEWhereInput
  /**
   * Limit how many TABLE_TEMPLATES to delete.
   */
  limit?: number
}

/**
 * TABLE_TEMPLATE without action
 */
export type TABLE_TEMPLATEDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TABLE_TEMPLATE
   */
  select?: Prisma.TABLE_TEMPLATESelect<ExtArgs> | null
  /**
   * Omit specific fields from the TABLE_TEMPLATE
   */
  omit?: Prisma.TABLE_TEMPLATEOmit<ExtArgs> | null
}
