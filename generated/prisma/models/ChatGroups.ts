
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ChatGroups` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model ChatGroups
 * 
 */
export type ChatGroupsModel = runtime.Types.Result.DefaultSelection<Prisma.$ChatGroupsPayload>

export type AggregateChatGroups = {
  _count: ChatGroupsCountAggregateOutputType | null
  _avg: ChatGroupsAvgAggregateOutputType | null
  _sum: ChatGroupsSumAggregateOutputType | null
  _min: ChatGroupsMinAggregateOutputType | null
  _max: ChatGroupsMaxAggregateOutputType | null
}

export type ChatGroupsAvgAggregateOutputType = {
  id: number | null
  ownerId: number | null
  deletedBy: number | null
}

export type ChatGroupsSumAggregateOutputType = {
  id: number | null
  ownerId: number | null
  deletedBy: number | null
}

export type ChatGroupsMinAggregateOutputType = {
  id: number | null
  name: string | null
  ownerId: number | null
  keyForChatOne: string | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ChatGroupsMaxAggregateOutputType = {
  id: number | null
  name: string | null
  ownerId: number | null
  keyForChatOne: string | null
  deletedBy: number | null
  isDeleted: boolean | null
  deletedAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ChatGroupsCountAggregateOutputType = {
  id: number
  name: number
  ownerId: number
  keyForChatOne: number
  deletedBy: number
  isDeleted: number
  deletedAt: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ChatGroupsAvgAggregateInputType = {
  id?: true
  ownerId?: true
  deletedBy?: true
}

export type ChatGroupsSumAggregateInputType = {
  id?: true
  ownerId?: true
  deletedBy?: true
}

export type ChatGroupsMinAggregateInputType = {
  id?: true
  name?: true
  ownerId?: true
  keyForChatOne?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ChatGroupsMaxAggregateInputType = {
  id?: true
  name?: true
  ownerId?: true
  keyForChatOne?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
}

export type ChatGroupsCountAggregateInputType = {
  id?: true
  name?: true
  ownerId?: true
  keyForChatOne?: true
  deletedBy?: true
  isDeleted?: true
  deletedAt?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ChatGroupsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatGroups to aggregate.
   */
  where?: Prisma.ChatGroupsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatGroups to fetch.
   */
  orderBy?: Prisma.ChatGroupsOrderByWithRelationInput | Prisma.ChatGroupsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChatGroupsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatGroups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ChatGroups
  **/
  _count?: true | ChatGroupsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ChatGroupsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ChatGroupsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChatGroupsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChatGroupsMaxAggregateInputType
}

export type GetChatGroupsAggregateType<T extends ChatGroupsAggregateArgs> = {
      [P in keyof T & keyof AggregateChatGroups]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChatGroups[P]>
    : Prisma.GetScalarType<T[P], AggregateChatGroups[P]>
}




export type ChatGroupsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatGroupsWhereInput
  orderBy?: Prisma.ChatGroupsOrderByWithAggregationInput | Prisma.ChatGroupsOrderByWithAggregationInput[]
  by: Prisma.ChatGroupsScalarFieldEnum[] | Prisma.ChatGroupsScalarFieldEnum
  having?: Prisma.ChatGroupsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChatGroupsCountAggregateInputType | true
  _avg?: ChatGroupsAvgAggregateInputType
  _sum?: ChatGroupsSumAggregateInputType
  _min?: ChatGroupsMinAggregateInputType
  _max?: ChatGroupsMaxAggregateInputType
}

export type ChatGroupsGroupByOutputType = {
  id: number
  name: string | null
  ownerId: number | null
  keyForChatOne: string | null
  deletedBy: number
  isDeleted: boolean
  deletedAt: Date | null
  createdAt: Date
  updatedAt: Date
  _count: ChatGroupsCountAggregateOutputType | null
  _avg: ChatGroupsAvgAggregateOutputType | null
  _sum: ChatGroupsSumAggregateOutputType | null
  _min: ChatGroupsMinAggregateOutputType | null
  _max: ChatGroupsMaxAggregateOutputType | null
}

type GetChatGroupsGroupByPayload<T extends ChatGroupsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChatGroupsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChatGroupsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChatGroupsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChatGroupsGroupByOutputType[P]>
      }
    >
  >



export type ChatGroupsWhereInput = {
  AND?: Prisma.ChatGroupsWhereInput | Prisma.ChatGroupsWhereInput[]
  OR?: Prisma.ChatGroupsWhereInput[]
  NOT?: Prisma.ChatGroupsWhereInput | Prisma.ChatGroupsWhereInput[]
  id?: Prisma.IntFilter<"ChatGroups"> | number
  name?: Prisma.StringNullableFilter<"ChatGroups"> | string | null
  ownerId?: Prisma.IntNullableFilter<"ChatGroups"> | number | null
  keyForChatOne?: Prisma.StringNullableFilter<"ChatGroups"> | string | null
  deletedBy?: Prisma.IntFilter<"ChatGroups"> | number
  isDeleted?: Prisma.BoolFilter<"ChatGroups"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"ChatGroups"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"ChatGroups"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChatGroups"> | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersListRelationFilter
  Users?: Prisma.XOR<Prisma.UsersNullableScalarRelationFilter, Prisma.UsersWhereInput> | null
  ChatMessages?: Prisma.ChatMessagesListRelationFilter
}

export type ChatGroupsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  ownerId?: Prisma.SortOrderInput | Prisma.SortOrder
  keyForChatOne?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  ChatGroupMembers?: Prisma.ChatGroupMembersOrderByRelationAggregateInput
  Users?: Prisma.UsersOrderByWithRelationInput
  ChatMessages?: Prisma.ChatMessagesOrderByRelationAggregateInput
  _relevance?: Prisma.ChatGroupsOrderByRelevanceInput
}

export type ChatGroupsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  keyForChatOne?: string
  AND?: Prisma.ChatGroupsWhereInput | Prisma.ChatGroupsWhereInput[]
  OR?: Prisma.ChatGroupsWhereInput[]
  NOT?: Prisma.ChatGroupsWhereInput | Prisma.ChatGroupsWhereInput[]
  name?: Prisma.StringNullableFilter<"ChatGroups"> | string | null
  ownerId?: Prisma.IntNullableFilter<"ChatGroups"> | number | null
  deletedBy?: Prisma.IntFilter<"ChatGroups"> | number
  isDeleted?: Prisma.BoolFilter<"ChatGroups"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"ChatGroups"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"ChatGroups"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChatGroups"> | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersListRelationFilter
  Users?: Prisma.XOR<Prisma.UsersNullableScalarRelationFilter, Prisma.UsersWhereInput> | null
  ChatMessages?: Prisma.ChatMessagesListRelationFilter
}, "id" | "keyForChatOne">

export type ChatGroupsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrderInput | Prisma.SortOrder
  ownerId?: Prisma.SortOrderInput | Prisma.SortOrder
  keyForChatOne?: Prisma.SortOrderInput | Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ChatGroupsCountOrderByAggregateInput
  _avg?: Prisma.ChatGroupsAvgOrderByAggregateInput
  _max?: Prisma.ChatGroupsMaxOrderByAggregateInput
  _min?: Prisma.ChatGroupsMinOrderByAggregateInput
  _sum?: Prisma.ChatGroupsSumOrderByAggregateInput
}

export type ChatGroupsScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChatGroupsScalarWhereWithAggregatesInput | Prisma.ChatGroupsScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChatGroupsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChatGroupsScalarWhereWithAggregatesInput | Prisma.ChatGroupsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"ChatGroups"> | number
  name?: Prisma.StringNullableWithAggregatesFilter<"ChatGroups"> | string | null
  ownerId?: Prisma.IntNullableWithAggregatesFilter<"ChatGroups"> | number | null
  keyForChatOne?: Prisma.StringNullableWithAggregatesFilter<"ChatGroups"> | string | null
  deletedBy?: Prisma.IntWithAggregatesFilter<"ChatGroups"> | number
  isDeleted?: Prisma.BoolWithAggregatesFilter<"ChatGroups"> | boolean
  deletedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"ChatGroups"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ChatGroups"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ChatGroups"> | Date | string
}

export type ChatGroupsCreateInput = {
  name?: string | null
  keyForChatOne?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersCreateNestedManyWithoutChatGroupsInput
  Users?: Prisma.UsersCreateNestedOneWithoutChatGroupsInput
  ChatMessages?: Prisma.ChatMessagesCreateNestedManyWithoutChatGroupsInput
}

export type ChatGroupsUncheckedCreateInput = {
  id?: number
  name?: string | null
  ownerId?: number | null
  keyForChatOne?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedCreateNestedManyWithoutChatGroupsInput
  ChatMessages?: Prisma.ChatMessagesUncheckedCreateNestedManyWithoutChatGroupsInput
}

export type ChatGroupsUpdateInput = {
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  keyForChatOne?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUpdateManyWithoutChatGroupsNestedInput
  Users?: Prisma.UsersUpdateOneWithoutChatGroupsNestedInput
  ChatMessages?: Prisma.ChatMessagesUpdateManyWithoutChatGroupsNestedInput
}

export type ChatGroupsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  keyForChatOne?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedUpdateManyWithoutChatGroupsNestedInput
  ChatMessages?: Prisma.ChatMessagesUncheckedUpdateManyWithoutChatGroupsNestedInput
}

export type ChatGroupsCreateManyInput = {
  id?: number
  name?: string | null
  ownerId?: number | null
  keyForChatOne?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatGroupsUpdateManyMutationInput = {
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  keyForChatOne?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatGroupsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  keyForChatOne?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ChatGroupsNullableScalarRelationFilter = {
  is?: Prisma.ChatGroupsWhereInput | null
  isNot?: Prisma.ChatGroupsWhereInput | null
}

export type ChatGroupsOrderByRelevanceInput = {
  fields: Prisma.ChatGroupsOrderByRelevanceFieldEnum | Prisma.ChatGroupsOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ChatGroupsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  keyForChatOne?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChatGroupsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type ChatGroupsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  keyForChatOne?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChatGroupsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  keyForChatOne?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
  isDeleted?: Prisma.SortOrder
  deletedAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ChatGroupsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ownerId?: Prisma.SortOrder
  deletedBy?: Prisma.SortOrder
}

export type ChatGroupsScalarRelationFilter = {
  is?: Prisma.ChatGroupsWhereInput
  isNot?: Prisma.ChatGroupsWhereInput
}

export type ChatGroupsListRelationFilter = {
  every?: Prisma.ChatGroupsWhereInput
  some?: Prisma.ChatGroupsWhereInput
  none?: Prisma.ChatGroupsWhereInput
}

export type ChatGroupsOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ChatGroupsCreateNestedOneWithoutChatGroupMembersInput = {
  create?: Prisma.XOR<Prisma.ChatGroupsCreateWithoutChatGroupMembersInput, Prisma.ChatGroupsUncheckedCreateWithoutChatGroupMembersInput>
  connectOrCreate?: Prisma.ChatGroupsCreateOrConnectWithoutChatGroupMembersInput
  connect?: Prisma.ChatGroupsWhereUniqueInput
}

export type ChatGroupsUpdateOneWithoutChatGroupMembersNestedInput = {
  create?: Prisma.XOR<Prisma.ChatGroupsCreateWithoutChatGroupMembersInput, Prisma.ChatGroupsUncheckedCreateWithoutChatGroupMembersInput>
  connectOrCreate?: Prisma.ChatGroupsCreateOrConnectWithoutChatGroupMembersInput
  upsert?: Prisma.ChatGroupsUpsertWithoutChatGroupMembersInput
  disconnect?: Prisma.ChatGroupsWhereInput | boolean
  delete?: Prisma.ChatGroupsWhereInput | boolean
  connect?: Prisma.ChatGroupsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChatGroupsUpdateToOneWithWhereWithoutChatGroupMembersInput, Prisma.ChatGroupsUpdateWithoutChatGroupMembersInput>, Prisma.ChatGroupsUncheckedUpdateWithoutChatGroupMembersInput>
}

export type ChatGroupsCreateNestedOneWithoutChatMessagesInput = {
  create?: Prisma.XOR<Prisma.ChatGroupsCreateWithoutChatMessagesInput, Prisma.ChatGroupsUncheckedCreateWithoutChatMessagesInput>
  connectOrCreate?: Prisma.ChatGroupsCreateOrConnectWithoutChatMessagesInput
  connect?: Prisma.ChatGroupsWhereUniqueInput
}

export type ChatGroupsUpdateOneRequiredWithoutChatMessagesNestedInput = {
  create?: Prisma.XOR<Prisma.ChatGroupsCreateWithoutChatMessagesInput, Prisma.ChatGroupsUncheckedCreateWithoutChatMessagesInput>
  connectOrCreate?: Prisma.ChatGroupsCreateOrConnectWithoutChatMessagesInput
  upsert?: Prisma.ChatGroupsUpsertWithoutChatMessagesInput
  connect?: Prisma.ChatGroupsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChatGroupsUpdateToOneWithWhereWithoutChatMessagesInput, Prisma.ChatGroupsUpdateWithoutChatMessagesInput>, Prisma.ChatGroupsUncheckedUpdateWithoutChatMessagesInput>
}

export type ChatGroupsCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.ChatGroupsCreateWithoutUsersInput, Prisma.ChatGroupsUncheckedCreateWithoutUsersInput> | Prisma.ChatGroupsCreateWithoutUsersInput[] | Prisma.ChatGroupsUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatGroupsCreateOrConnectWithoutUsersInput | Prisma.ChatGroupsCreateOrConnectWithoutUsersInput[]
  createMany?: Prisma.ChatGroupsCreateManyUsersInputEnvelope
  connect?: Prisma.ChatGroupsWhereUniqueInput | Prisma.ChatGroupsWhereUniqueInput[]
}

export type ChatGroupsUncheckedCreateNestedManyWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.ChatGroupsCreateWithoutUsersInput, Prisma.ChatGroupsUncheckedCreateWithoutUsersInput> | Prisma.ChatGroupsCreateWithoutUsersInput[] | Prisma.ChatGroupsUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatGroupsCreateOrConnectWithoutUsersInput | Prisma.ChatGroupsCreateOrConnectWithoutUsersInput[]
  createMany?: Prisma.ChatGroupsCreateManyUsersInputEnvelope
  connect?: Prisma.ChatGroupsWhereUniqueInput | Prisma.ChatGroupsWhereUniqueInput[]
}

export type ChatGroupsUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.ChatGroupsCreateWithoutUsersInput, Prisma.ChatGroupsUncheckedCreateWithoutUsersInput> | Prisma.ChatGroupsCreateWithoutUsersInput[] | Prisma.ChatGroupsUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatGroupsCreateOrConnectWithoutUsersInput | Prisma.ChatGroupsCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.ChatGroupsUpsertWithWhereUniqueWithoutUsersInput | Prisma.ChatGroupsUpsertWithWhereUniqueWithoutUsersInput[]
  createMany?: Prisma.ChatGroupsCreateManyUsersInputEnvelope
  set?: Prisma.ChatGroupsWhereUniqueInput | Prisma.ChatGroupsWhereUniqueInput[]
  disconnect?: Prisma.ChatGroupsWhereUniqueInput | Prisma.ChatGroupsWhereUniqueInput[]
  delete?: Prisma.ChatGroupsWhereUniqueInput | Prisma.ChatGroupsWhereUniqueInput[]
  connect?: Prisma.ChatGroupsWhereUniqueInput | Prisma.ChatGroupsWhereUniqueInput[]
  update?: Prisma.ChatGroupsUpdateWithWhereUniqueWithoutUsersInput | Prisma.ChatGroupsUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.ChatGroupsUpdateManyWithWhereWithoutUsersInput | Prisma.ChatGroupsUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.ChatGroupsScalarWhereInput | Prisma.ChatGroupsScalarWhereInput[]
}

export type ChatGroupsUncheckedUpdateManyWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.ChatGroupsCreateWithoutUsersInput, Prisma.ChatGroupsUncheckedCreateWithoutUsersInput> | Prisma.ChatGroupsCreateWithoutUsersInput[] | Prisma.ChatGroupsUncheckedCreateWithoutUsersInput[]
  connectOrCreate?: Prisma.ChatGroupsCreateOrConnectWithoutUsersInput | Prisma.ChatGroupsCreateOrConnectWithoutUsersInput[]
  upsert?: Prisma.ChatGroupsUpsertWithWhereUniqueWithoutUsersInput | Prisma.ChatGroupsUpsertWithWhereUniqueWithoutUsersInput[]
  createMany?: Prisma.ChatGroupsCreateManyUsersInputEnvelope
  set?: Prisma.ChatGroupsWhereUniqueInput | Prisma.ChatGroupsWhereUniqueInput[]
  disconnect?: Prisma.ChatGroupsWhereUniqueInput | Prisma.ChatGroupsWhereUniqueInput[]
  delete?: Prisma.ChatGroupsWhereUniqueInput | Prisma.ChatGroupsWhereUniqueInput[]
  connect?: Prisma.ChatGroupsWhereUniqueInput | Prisma.ChatGroupsWhereUniqueInput[]
  update?: Prisma.ChatGroupsUpdateWithWhereUniqueWithoutUsersInput | Prisma.ChatGroupsUpdateWithWhereUniqueWithoutUsersInput[]
  updateMany?: Prisma.ChatGroupsUpdateManyWithWhereWithoutUsersInput | Prisma.ChatGroupsUpdateManyWithWhereWithoutUsersInput[]
  deleteMany?: Prisma.ChatGroupsScalarWhereInput | Prisma.ChatGroupsScalarWhereInput[]
}

export type ChatGroupsCreateWithoutChatGroupMembersInput = {
  name?: string | null
  keyForChatOne?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  Users?: Prisma.UsersCreateNestedOneWithoutChatGroupsInput
  ChatMessages?: Prisma.ChatMessagesCreateNestedManyWithoutChatGroupsInput
}

export type ChatGroupsUncheckedCreateWithoutChatGroupMembersInput = {
  id?: number
  name?: string | null
  ownerId?: number | null
  keyForChatOne?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatMessages?: Prisma.ChatMessagesUncheckedCreateNestedManyWithoutChatGroupsInput
}

export type ChatGroupsCreateOrConnectWithoutChatGroupMembersInput = {
  where: Prisma.ChatGroupsWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatGroupsCreateWithoutChatGroupMembersInput, Prisma.ChatGroupsUncheckedCreateWithoutChatGroupMembersInput>
}

export type ChatGroupsUpsertWithoutChatGroupMembersInput = {
  update: Prisma.XOR<Prisma.ChatGroupsUpdateWithoutChatGroupMembersInput, Prisma.ChatGroupsUncheckedUpdateWithoutChatGroupMembersInput>
  create: Prisma.XOR<Prisma.ChatGroupsCreateWithoutChatGroupMembersInput, Prisma.ChatGroupsUncheckedCreateWithoutChatGroupMembersInput>
  where?: Prisma.ChatGroupsWhereInput
}

export type ChatGroupsUpdateToOneWithWhereWithoutChatGroupMembersInput = {
  where?: Prisma.ChatGroupsWhereInput
  data: Prisma.XOR<Prisma.ChatGroupsUpdateWithoutChatGroupMembersInput, Prisma.ChatGroupsUncheckedUpdateWithoutChatGroupMembersInput>
}

export type ChatGroupsUpdateWithoutChatGroupMembersInput = {
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  keyForChatOne?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  Users?: Prisma.UsersUpdateOneWithoutChatGroupsNestedInput
  ChatMessages?: Prisma.ChatMessagesUpdateManyWithoutChatGroupsNestedInput
}

export type ChatGroupsUncheckedUpdateWithoutChatGroupMembersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  keyForChatOne?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatMessages?: Prisma.ChatMessagesUncheckedUpdateManyWithoutChatGroupsNestedInput
}

export type ChatGroupsCreateWithoutChatMessagesInput = {
  name?: string | null
  keyForChatOne?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersCreateNestedManyWithoutChatGroupsInput
  Users?: Prisma.UsersCreateNestedOneWithoutChatGroupsInput
}

export type ChatGroupsUncheckedCreateWithoutChatMessagesInput = {
  id?: number
  name?: string | null
  ownerId?: number | null
  keyForChatOne?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedCreateNestedManyWithoutChatGroupsInput
}

export type ChatGroupsCreateOrConnectWithoutChatMessagesInput = {
  where: Prisma.ChatGroupsWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatGroupsCreateWithoutChatMessagesInput, Prisma.ChatGroupsUncheckedCreateWithoutChatMessagesInput>
}

export type ChatGroupsUpsertWithoutChatMessagesInput = {
  update: Prisma.XOR<Prisma.ChatGroupsUpdateWithoutChatMessagesInput, Prisma.ChatGroupsUncheckedUpdateWithoutChatMessagesInput>
  create: Prisma.XOR<Prisma.ChatGroupsCreateWithoutChatMessagesInput, Prisma.ChatGroupsUncheckedCreateWithoutChatMessagesInput>
  where?: Prisma.ChatGroupsWhereInput
}

export type ChatGroupsUpdateToOneWithWhereWithoutChatMessagesInput = {
  where?: Prisma.ChatGroupsWhereInput
  data: Prisma.XOR<Prisma.ChatGroupsUpdateWithoutChatMessagesInput, Prisma.ChatGroupsUncheckedUpdateWithoutChatMessagesInput>
}

export type ChatGroupsUpdateWithoutChatMessagesInput = {
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  keyForChatOne?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUpdateManyWithoutChatGroupsNestedInput
  Users?: Prisma.UsersUpdateOneWithoutChatGroupsNestedInput
}

export type ChatGroupsUncheckedUpdateWithoutChatMessagesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  ownerId?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  keyForChatOne?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedUpdateManyWithoutChatGroupsNestedInput
}

export type ChatGroupsCreateWithoutUsersInput = {
  name?: string | null
  keyForChatOne?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersCreateNestedManyWithoutChatGroupsInput
  ChatMessages?: Prisma.ChatMessagesCreateNestedManyWithoutChatGroupsInput
}

export type ChatGroupsUncheckedCreateWithoutUsersInput = {
  id?: number
  name?: string | null
  keyForChatOne?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedCreateNestedManyWithoutChatGroupsInput
  ChatMessages?: Prisma.ChatMessagesUncheckedCreateNestedManyWithoutChatGroupsInput
}

export type ChatGroupsCreateOrConnectWithoutUsersInput = {
  where: Prisma.ChatGroupsWhereUniqueInput
  create: Prisma.XOR<Prisma.ChatGroupsCreateWithoutUsersInput, Prisma.ChatGroupsUncheckedCreateWithoutUsersInput>
}

export type ChatGroupsCreateManyUsersInputEnvelope = {
  data: Prisma.ChatGroupsCreateManyUsersInput | Prisma.ChatGroupsCreateManyUsersInput[]
  skipDuplicates?: boolean
}

export type ChatGroupsUpsertWithWhereUniqueWithoutUsersInput = {
  where: Prisma.ChatGroupsWhereUniqueInput
  update: Prisma.XOR<Prisma.ChatGroupsUpdateWithoutUsersInput, Prisma.ChatGroupsUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.ChatGroupsCreateWithoutUsersInput, Prisma.ChatGroupsUncheckedCreateWithoutUsersInput>
}

export type ChatGroupsUpdateWithWhereUniqueWithoutUsersInput = {
  where: Prisma.ChatGroupsWhereUniqueInput
  data: Prisma.XOR<Prisma.ChatGroupsUpdateWithoutUsersInput, Prisma.ChatGroupsUncheckedUpdateWithoutUsersInput>
}

export type ChatGroupsUpdateManyWithWhereWithoutUsersInput = {
  where: Prisma.ChatGroupsScalarWhereInput
  data: Prisma.XOR<Prisma.ChatGroupsUpdateManyMutationInput, Prisma.ChatGroupsUncheckedUpdateManyWithoutUsersInput>
}

export type ChatGroupsScalarWhereInput = {
  AND?: Prisma.ChatGroupsScalarWhereInput | Prisma.ChatGroupsScalarWhereInput[]
  OR?: Prisma.ChatGroupsScalarWhereInput[]
  NOT?: Prisma.ChatGroupsScalarWhereInput | Prisma.ChatGroupsScalarWhereInput[]
  id?: Prisma.IntFilter<"ChatGroups"> | number
  name?: Prisma.StringNullableFilter<"ChatGroups"> | string | null
  ownerId?: Prisma.IntNullableFilter<"ChatGroups"> | number | null
  keyForChatOne?: Prisma.StringNullableFilter<"ChatGroups"> | string | null
  deletedBy?: Prisma.IntFilter<"ChatGroups"> | number
  isDeleted?: Prisma.BoolFilter<"ChatGroups"> | boolean
  deletedAt?: Prisma.DateTimeNullableFilter<"ChatGroups"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"ChatGroups"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ChatGroups"> | Date | string
}

export type ChatGroupsCreateManyUsersInput = {
  id?: number
  name?: string | null
  keyForChatOne?: string | null
  deletedBy?: number
  isDeleted?: boolean
  deletedAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ChatGroupsUpdateWithoutUsersInput = {
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  keyForChatOne?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUpdateManyWithoutChatGroupsNestedInput
  ChatMessages?: Prisma.ChatMessagesUpdateManyWithoutChatGroupsNestedInput
}

export type ChatGroupsUncheckedUpdateWithoutUsersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  keyForChatOne?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  ChatGroupMembers?: Prisma.ChatGroupMembersUncheckedUpdateManyWithoutChatGroupsNestedInput
  ChatMessages?: Prisma.ChatMessagesUncheckedUpdateManyWithoutChatGroupsNestedInput
}

export type ChatGroupsUncheckedUpdateManyWithoutUsersInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  keyForChatOne?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  deletedBy?: Prisma.IntFieldUpdateOperationsInput | number
  isDeleted?: Prisma.BoolFieldUpdateOperationsInput | boolean
  deletedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ChatGroupsCountOutputType
 */

export type ChatGroupsCountOutputType = {
  ChatGroupMembers: number
  ChatMessages: number
}

export type ChatGroupsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ChatGroupMembers?: boolean | ChatGroupsCountOutputTypeCountChatGroupMembersArgs
  ChatMessages?: boolean | ChatGroupsCountOutputTypeCountChatMessagesArgs
}

/**
 * ChatGroupsCountOutputType without action
 */
export type ChatGroupsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroupsCountOutputType
   */
  select?: Prisma.ChatGroupsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ChatGroupsCountOutputType without action
 */
export type ChatGroupsCountOutputTypeCountChatGroupMembersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatGroupMembersWhereInput
}

/**
 * ChatGroupsCountOutputType without action
 */
export type ChatGroupsCountOutputTypeCountChatMessagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChatMessagesWhereInput
}


export type ChatGroupsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  ownerId?: boolean
  keyForChatOne?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  ChatGroupMembers?: boolean | Prisma.ChatGroups$ChatGroupMembersArgs<ExtArgs>
  Users?: boolean | Prisma.ChatGroups$UsersArgs<ExtArgs>
  ChatMessages?: boolean | Prisma.ChatGroups$ChatMessagesArgs<ExtArgs>
  _count?: boolean | Prisma.ChatGroupsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chatGroups"]>



export type ChatGroupsSelectScalar = {
  id?: boolean
  name?: boolean
  ownerId?: boolean
  keyForChatOne?: boolean
  deletedBy?: boolean
  isDeleted?: boolean
  deletedAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ChatGroupsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "ownerId" | "keyForChatOne" | "deletedBy" | "isDeleted" | "deletedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["chatGroups"]>
export type ChatGroupsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  ChatGroupMembers?: boolean | Prisma.ChatGroups$ChatGroupMembersArgs<ExtArgs>
  Users?: boolean | Prisma.ChatGroups$UsersArgs<ExtArgs>
  ChatMessages?: boolean | Prisma.ChatGroups$ChatMessagesArgs<ExtArgs>
  _count?: boolean | Prisma.ChatGroupsCountOutputTypeDefaultArgs<ExtArgs>
}

export type $ChatGroupsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ChatGroups"
  objects: {
    ChatGroupMembers: Prisma.$ChatGroupMembersPayload<ExtArgs>[]
    Users: Prisma.$UsersPayload<ExtArgs> | null
    ChatMessages: Prisma.$ChatMessagesPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string | null
    ownerId: number | null
    keyForChatOne: string | null
    deletedBy: number
    isDeleted: boolean
    deletedAt: Date | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["chatGroups"]>
  composites: {}
}

export type ChatGroupsGetPayload<S extends boolean | null | undefined | ChatGroupsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChatGroupsPayload, S>

export type ChatGroupsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChatGroupsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChatGroupsCountAggregateInputType | true
  }

export interface ChatGroupsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatGroups'], meta: { name: 'ChatGroups' } }
  /**
   * Find zero or one ChatGroups that matches the filter.
   * @param {ChatGroupsFindUniqueArgs} args - Arguments to find a ChatGroups
   * @example
   * // Get one ChatGroups
   * const chatGroups = await prisma.chatGroups.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChatGroupsFindUniqueArgs>(args: Prisma.SelectSubset<T, ChatGroupsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChatGroupsClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ChatGroups that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChatGroupsFindUniqueOrThrowArgs} args - Arguments to find a ChatGroups
   * @example
   * // Get one ChatGroups
   * const chatGroups = await prisma.chatGroups.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChatGroupsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChatGroupsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatGroupsClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatGroups that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupsFindFirstArgs} args - Arguments to find a ChatGroups
   * @example
   * // Get one ChatGroups
   * const chatGroups = await prisma.chatGroups.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChatGroupsFindFirstArgs>(args?: Prisma.SelectSubset<T, ChatGroupsFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChatGroupsClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ChatGroups that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupsFindFirstOrThrowArgs} args - Arguments to find a ChatGroups
   * @example
   * // Get one ChatGroups
   * const chatGroups = await prisma.chatGroups.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChatGroupsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChatGroupsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChatGroupsClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ChatGroups that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ChatGroups
   * const chatGroups = await prisma.chatGroups.findMany()
   * 
   * // Get first 10 ChatGroups
   * const chatGroups = await prisma.chatGroups.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chatGroupsWithIdOnly = await prisma.chatGroups.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChatGroupsFindManyArgs>(args?: Prisma.SelectSubset<T, ChatGroupsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatGroupsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ChatGroups.
   * @param {ChatGroupsCreateArgs} args - Arguments to create a ChatGroups.
   * @example
   * // Create one ChatGroups
   * const ChatGroups = await prisma.chatGroups.create({
   *   data: {
   *     // ... data to create a ChatGroups
   *   }
   * })
   * 
   */
  create<T extends ChatGroupsCreateArgs>(args: Prisma.SelectSubset<T, ChatGroupsCreateArgs<ExtArgs>>): Prisma.Prisma__ChatGroupsClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ChatGroups.
   * @param {ChatGroupsCreateManyArgs} args - Arguments to create many ChatGroups.
   * @example
   * // Create many ChatGroups
   * const chatGroups = await prisma.chatGroups.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChatGroupsCreateManyArgs>(args?: Prisma.SelectSubset<T, ChatGroupsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a ChatGroups.
   * @param {ChatGroupsDeleteArgs} args - Arguments to delete one ChatGroups.
   * @example
   * // Delete one ChatGroups
   * const ChatGroups = await prisma.chatGroups.delete({
   *   where: {
   *     // ... filter to delete one ChatGroups
   *   }
   * })
   * 
   */
  delete<T extends ChatGroupsDeleteArgs>(args: Prisma.SelectSubset<T, ChatGroupsDeleteArgs<ExtArgs>>): Prisma.Prisma__ChatGroupsClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ChatGroups.
   * @param {ChatGroupsUpdateArgs} args - Arguments to update one ChatGroups.
   * @example
   * // Update one ChatGroups
   * const chatGroups = await prisma.chatGroups.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChatGroupsUpdateArgs>(args: Prisma.SelectSubset<T, ChatGroupsUpdateArgs<ExtArgs>>): Prisma.Prisma__ChatGroupsClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ChatGroups.
   * @param {ChatGroupsDeleteManyArgs} args - Arguments to filter ChatGroups to delete.
   * @example
   * // Delete a few ChatGroups
   * const { count } = await prisma.chatGroups.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChatGroupsDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChatGroupsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ChatGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ChatGroups
   * const chatGroups = await prisma.chatGroups.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChatGroupsUpdateManyArgs>(args: Prisma.SelectSubset<T, ChatGroupsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one ChatGroups.
   * @param {ChatGroupsUpsertArgs} args - Arguments to update or create a ChatGroups.
   * @example
   * // Update or create a ChatGroups
   * const chatGroups = await prisma.chatGroups.upsert({
   *   create: {
   *     // ... data to create a ChatGroups
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ChatGroups we want to update
   *   }
   * })
   */
  upsert<T extends ChatGroupsUpsertArgs>(args: Prisma.SelectSubset<T, ChatGroupsUpsertArgs<ExtArgs>>): Prisma.Prisma__ChatGroupsClient<runtime.Types.Result.GetResult<Prisma.$ChatGroupsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ChatGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupsCountArgs} args - Arguments to filter ChatGroups to count.
   * @example
   * // Count the number of ChatGroups
   * const count = await prisma.chatGroups.count({
   *   where: {
   *     // ... the filter for the ChatGroups we want to count
   *   }
   * })
  **/
  count<T extends ChatGroupsCountArgs>(
    args?: Prisma.Subset<T, ChatGroupsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChatGroupsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ChatGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChatGroupsAggregateArgs>(args: Prisma.Subset<T, ChatGroupsAggregateArgs>): Prisma.PrismaPromise<GetChatGroupsAggregateType<T>>

  /**
   * Group by ChatGroups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChatGroupsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChatGroupsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChatGroupsGroupByArgs['orderBy'] }
      : { orderBy?: ChatGroupsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChatGroupsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ChatGroups model
 */
readonly fields: ChatGroupsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ChatGroups.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChatGroupsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  ChatGroupMembers<T extends Prisma.ChatGroups$ChatGroupMembersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatGroups$ChatGroupMembersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatGroupMembersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Users<T extends Prisma.ChatGroups$UsersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatGroups$UsersArgs<ExtArgs>>): Prisma.Prisma__UsersClient<runtime.Types.Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  ChatMessages<T extends Prisma.ChatGroups$ChatMessagesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ChatGroups$ChatMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChatMessagesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ChatGroups model
 */
export interface ChatGroupsFieldRefs {
  readonly id: Prisma.FieldRef<"ChatGroups", 'Int'>
  readonly name: Prisma.FieldRef<"ChatGroups", 'String'>
  readonly ownerId: Prisma.FieldRef<"ChatGroups", 'Int'>
  readonly keyForChatOne: Prisma.FieldRef<"ChatGroups", 'String'>
  readonly deletedBy: Prisma.FieldRef<"ChatGroups", 'Int'>
  readonly isDeleted: Prisma.FieldRef<"ChatGroups", 'Boolean'>
  readonly deletedAt: Prisma.FieldRef<"ChatGroups", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"ChatGroups", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ChatGroups", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ChatGroups findUnique
 */
export type ChatGroupsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroups
   */
  select?: Prisma.ChatGroupsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroups
   */
  omit?: Prisma.ChatGroupsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupsInclude<ExtArgs> | null
  /**
   * Filter, which ChatGroups to fetch.
   */
  where: Prisma.ChatGroupsWhereUniqueInput
}

/**
 * ChatGroups findUniqueOrThrow
 */
export type ChatGroupsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroups
   */
  select?: Prisma.ChatGroupsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroups
   */
  omit?: Prisma.ChatGroupsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupsInclude<ExtArgs> | null
  /**
   * Filter, which ChatGroups to fetch.
   */
  where: Prisma.ChatGroupsWhereUniqueInput
}

/**
 * ChatGroups findFirst
 */
export type ChatGroupsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroups
   */
  select?: Prisma.ChatGroupsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroups
   */
  omit?: Prisma.ChatGroupsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupsInclude<ExtArgs> | null
  /**
   * Filter, which ChatGroups to fetch.
   */
  where?: Prisma.ChatGroupsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatGroups to fetch.
   */
  orderBy?: Prisma.ChatGroupsOrderByWithRelationInput | Prisma.ChatGroupsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatGroups.
   */
  cursor?: Prisma.ChatGroupsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatGroups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatGroups.
   */
  distinct?: Prisma.ChatGroupsScalarFieldEnum | Prisma.ChatGroupsScalarFieldEnum[]
}

/**
 * ChatGroups findFirstOrThrow
 */
export type ChatGroupsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroups
   */
  select?: Prisma.ChatGroupsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroups
   */
  omit?: Prisma.ChatGroupsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupsInclude<ExtArgs> | null
  /**
   * Filter, which ChatGroups to fetch.
   */
  where?: Prisma.ChatGroupsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatGroups to fetch.
   */
  orderBy?: Prisma.ChatGroupsOrderByWithRelationInput | Prisma.ChatGroupsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ChatGroups.
   */
  cursor?: Prisma.ChatGroupsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatGroups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ChatGroups.
   */
  distinct?: Prisma.ChatGroupsScalarFieldEnum | Prisma.ChatGroupsScalarFieldEnum[]
}

/**
 * ChatGroups findMany
 */
export type ChatGroupsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroups
   */
  select?: Prisma.ChatGroupsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroups
   */
  omit?: Prisma.ChatGroupsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupsInclude<ExtArgs> | null
  /**
   * Filter, which ChatGroups to fetch.
   */
  where?: Prisma.ChatGroupsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ChatGroups to fetch.
   */
  orderBy?: Prisma.ChatGroupsOrderByWithRelationInput | Prisma.ChatGroupsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ChatGroups.
   */
  cursor?: Prisma.ChatGroupsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ChatGroups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ChatGroups.
   */
  skip?: number
  distinct?: Prisma.ChatGroupsScalarFieldEnum | Prisma.ChatGroupsScalarFieldEnum[]
}

/**
 * ChatGroups create
 */
export type ChatGroupsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroups
   */
  select?: Prisma.ChatGroupsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroups
   */
  omit?: Prisma.ChatGroupsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupsInclude<ExtArgs> | null
  /**
   * The data needed to create a ChatGroups.
   */
  data?: Prisma.XOR<Prisma.ChatGroupsCreateInput, Prisma.ChatGroupsUncheckedCreateInput>
}

/**
 * ChatGroups createMany
 */
export type ChatGroupsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ChatGroups.
   */
  data: Prisma.ChatGroupsCreateManyInput | Prisma.ChatGroupsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ChatGroups update
 */
export type ChatGroupsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroups
   */
  select?: Prisma.ChatGroupsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroups
   */
  omit?: Prisma.ChatGroupsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupsInclude<ExtArgs> | null
  /**
   * The data needed to update a ChatGroups.
   */
  data: Prisma.XOR<Prisma.ChatGroupsUpdateInput, Prisma.ChatGroupsUncheckedUpdateInput>
  /**
   * Choose, which ChatGroups to update.
   */
  where: Prisma.ChatGroupsWhereUniqueInput
}

/**
 * ChatGroups updateMany
 */
export type ChatGroupsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ChatGroups.
   */
  data: Prisma.XOR<Prisma.ChatGroupsUpdateManyMutationInput, Prisma.ChatGroupsUncheckedUpdateManyInput>
  /**
   * Filter which ChatGroups to update
   */
  where?: Prisma.ChatGroupsWhereInput
  /**
   * Limit how many ChatGroups to update.
   */
  limit?: number
}

/**
 * ChatGroups upsert
 */
export type ChatGroupsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroups
   */
  select?: Prisma.ChatGroupsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroups
   */
  omit?: Prisma.ChatGroupsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupsInclude<ExtArgs> | null
  /**
   * The filter to search for the ChatGroups to update in case it exists.
   */
  where: Prisma.ChatGroupsWhereUniqueInput
  /**
   * In case the ChatGroups found by the `where` argument doesn't exist, create a new ChatGroups with this data.
   */
  create: Prisma.XOR<Prisma.ChatGroupsCreateInput, Prisma.ChatGroupsUncheckedCreateInput>
  /**
   * In case the ChatGroups was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChatGroupsUpdateInput, Prisma.ChatGroupsUncheckedUpdateInput>
}

/**
 * ChatGroups delete
 */
export type ChatGroupsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroups
   */
  select?: Prisma.ChatGroupsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroups
   */
  omit?: Prisma.ChatGroupsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupsInclude<ExtArgs> | null
  /**
   * Filter which ChatGroups to delete.
   */
  where: Prisma.ChatGroupsWhereUniqueInput
}

/**
 * ChatGroups deleteMany
 */
export type ChatGroupsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ChatGroups to delete
   */
  where?: Prisma.ChatGroupsWhereInput
  /**
   * Limit how many ChatGroups to delete.
   */
  limit?: number
}

/**
 * ChatGroups.ChatGroupMembers
 */
export type ChatGroups$ChatGroupMembersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroupMembers
   */
  select?: Prisma.ChatGroupMembersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroupMembers
   */
  omit?: Prisma.ChatGroupMembersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupMembersInclude<ExtArgs> | null
  where?: Prisma.ChatGroupMembersWhereInput
  orderBy?: Prisma.ChatGroupMembersOrderByWithRelationInput | Prisma.ChatGroupMembersOrderByWithRelationInput[]
  cursor?: Prisma.ChatGroupMembersWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChatGroupMembersScalarFieldEnum | Prisma.ChatGroupMembersScalarFieldEnum[]
}

/**
 * ChatGroups.Users
 */
export type ChatGroups$UsersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Users
   */
  select?: Prisma.UsersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Users
   */
  omit?: Prisma.UsersOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UsersInclude<ExtArgs> | null
  where?: Prisma.UsersWhereInput
}

/**
 * ChatGroups.ChatMessages
 */
export type ChatGroups$ChatMessagesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatMessages
   */
  select?: Prisma.ChatMessagesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatMessages
   */
  omit?: Prisma.ChatMessagesOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatMessagesInclude<ExtArgs> | null
  where?: Prisma.ChatMessagesWhereInput
  orderBy?: Prisma.ChatMessagesOrderByWithRelationInput | Prisma.ChatMessagesOrderByWithRelationInput[]
  cursor?: Prisma.ChatMessagesWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ChatMessagesScalarFieldEnum | Prisma.ChatMessagesScalarFieldEnum[]
}

/**
 * ChatGroups without action
 */
export type ChatGroupsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChatGroups
   */
  select?: Prisma.ChatGroupsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ChatGroups
   */
  omit?: Prisma.ChatGroupsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChatGroupsInclude<ExtArgs> | null
}
